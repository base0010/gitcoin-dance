{
  "address": "0xCb40A3573ba8Aab94CD9758b2313472B457a8040",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num_dancers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundTimeInBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intermission_time",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dai_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bracketNo",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftIda",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftIdb",
          "type": "uint256"
        }
      ],
      "name": "CreatedNewBracket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftid",
          "type": "uint256"
        }
      ],
      "name": "DancerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bracket",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "GotBracketParticipants",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winnerNFT",
          "type": "uint256"
        }
      ],
      "name": "GotContestants",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftID",
          "type": "uint256"
        }
      ],
      "name": "GotWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "log",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MATIC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZKSYNC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_votesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressByNFTId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "advanceGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bracketNumber",
          "type": "uint256"
        }
      ],
      "name": "determineBracketWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winner",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "determineBrackets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num_dancers",
          "type": "uint256"
        }
      ],
      "name": "determineGameRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donationAddressByNftId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_current_number_dancers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_current_round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_game_started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_intermission_blocktime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_number_dancers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_round_blocktime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_start_block",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameByBracketByRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "log2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "mintNFTAndDeployDonationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "nft_donation_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftIdByDonationAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votesPerNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnersByRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "donation_proxy",
          "type": "address"
        }
      ],
      "name": "withdrawlFromDonationProxyToSelf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
  "receipt": {
    "to": null,
    "from": "0xc2f461aA826c64b93666A6C7f56F632f200fC0E1",
    "contractAddress": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
    "transactionIndex": 0,
    "gasUsed": "3932219",
    "logsBloom": "0x0000000c
    "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432",
    "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c2f461aa826c64b93666a6c7f56f632f200fc0e1",
          "0x000000000000000000000000c2f461aa826c64b93666a6c7f56f632f200fc0e1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000c2f461aa826c64b93666a6c7f56f632f200fc0e1",
          "0x000000000000000000000000c2f461aa826c64b93666a6c7f56f632f200fc0e1"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0x909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 4,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 5,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 6,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 7,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000005",
        "logIndex": 8,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000006",
        "logIndex": 9,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000007",
        "logIndex": 10,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9027701,
        "transactionHash": "0x6d8b62d5d682b679bc209024957e0962760549335a382726ac46d279a2c91780",
        "address": "0x64254112f68249317E8518072EE1CFc28f5EC85c",
        "topics": [
          "0xbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000008",
        "logIndex": 11,
        "blockHash": "0x776455658cedf28faf3851271a7e34722d1a80a8356e635fc2753ee89a128432"
      }
    ],
    "blockNumber": 9027701,
    "cumulativeGasUsed": "3932219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    16,
    25,
    50,
    "0x2e055eee18284513b993db7568a592679ab13188"
  ],
  "solcInputHash": "dbce541f9f23b486964b2479112d1ba9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num_dancers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundTimeInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intermission_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dai_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bracketNo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftIda\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftIdb\",\"type\":\"uint256\"}],\"name\":\"CreatedNewBracket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftid\",\"type\":\"uint256\"}],\"name\":\"DancerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bracket\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"GotBracketParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winnerNFT\",\"type\":\"uint256\"}],\"name\":\"GotContestants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"GotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"log\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKSYNC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressByNFTId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bracketNumber\",\"type\":\"uint256\"}],\"name\":\"determineBracketWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"determineBrackets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num_dancers\",\"type\":\"uint256\"}],\"name\":\"determineGameRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donationAddressByNftId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_current_number_dancers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_current_round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_game_started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_intermission_blocktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_number_dancers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_round_blocktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_start_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameByBracketByRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"mintNFTAndDeployDonationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft_donation_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftIdByDonationAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesPerNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersByRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"donation_proxy\",\"type\":\"address\"}],\"name\":\"withdrawlFromDonationProxyToSelf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zksync/Game.sol\":\"Game\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/oz/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"contracts/oz/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"contracts/oz/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe67312a4f4f0eab1708780ad5d843e2d39cfe468290f98a26fd1ca853bddfe0a\",\"license\":\"MIT\"},\"contracts/oz/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/oz/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/oz/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _ALPHABET = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x1177e4eb1a9f2a1de1999e113c884317da695b7f6256c0ee125edcda70a20e80\",\"license\":\"MIT\"},\"contracts/oz/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"contracts/oz/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/oz/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/zksync/DancerProxy.sol\":{\"content\":\"pragma solidity  ^0.8.0;\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"./Game.sol\\\";\\n\\ncontract DancerProxy is AccessControl{\\n    bytes32 public constant GAME_LOGIC_ROLE = keccak256(\\\"GAME_LOGIC_ROLE\\\");\\n    IERC20 public dai;\\n    //this is the Voting Logic contract\\n    Game public game;\\n\\n    address ZKL1Proxy = address(0x82F67958A5474e40E1485742d648C0b0686b6e5D);\\n    event WithdrawnFromL2ToSelf(uint amount);\\n    event WithdrawlToGameLogic(address indexed game);\\n\\n    constructor(address _game_contract, address daiAddress){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        game = Game(_game_contract);\\n        dai = IERC20(daiAddress);\\n    }\\n\\n\\n    receive() external payable {\\n        require(msg.sender == ZKL1Proxy);\\n        emit WithdrawnFromL2ToSelf(msg.value);\\n    }\\n\\n    function withdrawlDAI() public returns (uint256 bal){\\n        uint256 bal = dai.balanceOf((address (this)));\\n        require(dai.approve(address(game), dai.balanceOf(address(this))));\\n        dai.transfer(address(game), dai.balanceOf(address(this)));\\n\\n        emit WithdrawlToGameLogic(address(game));\\n        return bal;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xdf6f5bdd79ad5b2381f338836da4912a73a93846b8425b6bc798b009ff6992e6\"},\"contracts/zksync/ERC721Mintable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../oz/token/ERC721/ERC721.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/utils/Counters.sol\\\";\\nimport \\\"../oz/utils/Strings.sol\\\";\\n\\ncontract ERC721Mintable is ERC721, AccessControl{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant MATIC_ROLE = keccak256(\\\"MATIC_ROLE\\\");\\n    bytes32 public constant ZKSYNC_ROLE = keccak256(\\\"ZKSYNC_ROLE\\\");\\n\\n//    string private baseURI = \\\"https://gitcoin.dance/\\\";\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    using Strings for uint256;\\n    mapping(uint256=>string) public _tokenURIs;\\n\\n    mapping(uint256=>uint256) public _votesById;\\n\\n    event NFTMinted(uint256 nftId, string uri);\\n\\n    constructor() public ERC721(\\\"Gitcoin Dance NFT\\\", \\\"GITD\\\"){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n//    function resetBaseURI(string memory newBaseURI) external{\\n//        require(\\n//            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n//            \\\"Cant reset URI not admin\\\"\\n//        );\\n//        baseURI = newBaseURI;\\n//\\n//    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal virtual{\\n        require(hasRole(MINTER_ROLE,msg.sender), \\\"Not Minter Role\\\");\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        return _tokenURI;\\n    }\\n\\n    function mint(address to, string memory tokenURI) public returns (uint256 tokenID){\\n        require(\\n            hasRole(MINTER_ROLE, msg.sender),\\n            \\\"721Mint: account isnt Minter role\\\"\\n        );\\n\\n        _mint(to, _tokenIds.current());\\n        _setTokenURI(_tokenIds.current(), tokenURI);\\n\\n        uint mintedId = _tokenIds.current();\\n        _tokenIds.increment();\\n\\n        emit NFTMinted(mintedId, tokenURI);\\n        return mintedId;\\n\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xfac1a0def03bb6ab3f922775741318343180a264585fa70779e2ac8d486baccf\"},\"contracts/zksync/Game.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../oz/utils/math/SafeMath.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/MathLog.sol\\\";\\nimport \\\"./ERC721Mintable.sol\\\";\\nimport \\\"./DancerProxy.sol\\\";\\n\\n\\n//Each \\\"danceoff\\\"\\ncontract Game is MathLog, ERC721Mintable{\\n    IERC20 dai;\\n\\n    using SafeMath for uint;\\n    event DancerCreated(address indexed a, uint indexed nftid);\\n    event GotBracketParticipants(uint bracket, address indexed a, address indexed b);\\n\\n    mapping(uint=>address) public donationAddressByNftId;\\n    mapping(address=>uint) public nftIdByDonationAddress;\\n    mapping(uint=>uint) public votesPerNftId;\\n\\n\\n    //number of the current game\\n    uint g_game_number = 0;\\n    uint public g_rounds = 0;\\n    uint public g_current_round;\\n\\n    uint public g_start_block;\\n    uint public g_round_blocktime;\\n    uint public g_intermission_blocktime;\\n\\n\\n    uint public g_number_dancers;\\n    uint public g_current_number_dancers;\\n    bool public g_game_started = false;\\n    //game_no->round->bracketnumber->addresses in bracket(competetors)\\n    mapping(uint=>mapping(uint=>mapping(uint=>uint[2]))) public gameByBracketByRound;\\n    mapping(uint=>address) public addressByNFTId;\\n\\n    function isBetweenRounds() internal returns (bool isBetweenRounds){\\n        require(g_game_started);\\n        uint gameClock = block.number - g_start_block;\\n\\n        if(gameClock >= g_round_blocktime){\\n            uint blocks_past_round = (gameClock % g_round_blocktime);\\n\\n            if(blocks_past_round <= g_intermission_blocktime){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function determineGameRounds(uint _num_dancers) public returns (uint n) {\\n        uint rounds = log2(_num_dancers);\\n        g_rounds = rounds;\\n        return rounds;\\n    }\\n\\n    function startGame() public {\\n        require(!g_game_started);\\n        g_start_block = block.number;\\n        g_game_started = true;\\n\\n        //initial determine brackets\\n        determineBrackets();\\n    }\\n    function setGameParams(uint _num_dancers) internal {\\n        require(_num_dancers % 2 == 0, \\\"this isnt a power of 2\\\");\\n        require(!g_game_started, \\\"game cant be started already\\\");\\n        require(gameByBracketByRound[g_game_number + 1][0][0][1] == 0,\\\"This looks like a round exists here\\\");\\n    }\\n\\n    function setupNewGame(uint _num_dancers) internal {\\n        setGameParams(_num_dancers);\\n        g_game_number ++;\\n        g_current_round = 1;\\n        g_number_dancers = _num_dancers;\\n        g_current_number_dancers = _num_dancers;\\n\\n        determineGameRounds(g_number_dancers);\\n        determineBrackets();\\n\\n    }\\n\\n    constructor (uint num_dancers, uint roundTimeInBlocks, uint intermission_time, address dai_address){\\n        dai = IERC20(dai_address);\\n        setGameParams(num_dancers);\\n        setupNewGame(num_dancers);\\n        //set rounds\\n        g_round_blocktime = roundTimeInBlocks;\\n        g_intermission_blocktime = intermission_time;\\n    }\\n\\n    event GotWinner(uint nftID);\\n    event GotContestants(uint indexed a, uint indexed b, uint indexed winnerNFT);\\n\\n    function determineBracketWinner(uint roundNumber,uint bracketNumber) public returns(uint winner) {\\n        //require(bracket number exists in the current round\\n        uint [2] memory contestants = gameByBracketByRound[g_game_number][roundNumber][bracketNumber];\\n\\n        uint winner = votesPerNftId[contestants[0]] > votesPerNftId[contestants[1]]? contestants[0] : contestants[1];\\n\\n        emit GotContestants(contestants[0], contestants[1], winner);\\n\\n        return winner;\\n    }\\n\\n\\n    mapping(uint=>uint[]) public winnersByRound;\\n\\n    function advanceGame() public{\\n//        require(isBetweenRounds());\\n        uint bracketsInRound = g_number_dancers.div(g_current_round);\\n\\n        //winners of current bracket\\n        uint[] memory winners = new uint[](bracketsInRound);\\n\\n        for(uint i = 0; i <= bracketsInRound.div(2); i++){\\n            uint winnerId = determineBracketWinner(g_current_round,i);\\n            winnersByRound[g_current_round].push(winnerId);\\n        }\\n\\n    }\\n\\n    event CreatedNewBracket(uint indexed bracketNo, uint indexed nftIda, uint indexed nftIdb);\\n\\n    function createNewRound() public{\\n        g_current_round++;\\n\\n        uint j = 0;\\n        for(uint i = 0; i < 4; i++){\\n            fillBracket(i, [winnersByRound[g_current_round -1][j], winnersByRound[g_current_round -1][j+1]]);\\n            emit CreatedNewBracket(i, winnersByRound[g_current_round -1][j], winnersByRound[g_current_round -1][j+1]);\\n            j+=2;\\n        }\\n    }\\n\\n    function fillBracket(uint bracket, uint[2] memory dancerIndex) internal {\\n        gameByBracketByRound[g_game_number][g_current_round][bracket] = dancerIndex;\\n    }\\n\\n    function determineBrackets() public {\\n        uint bracketsToMake = g_current_number_dancers.div(g_current_round).div(2);\\n\\n        uint index_a = 0;\\n        uint index_b = 1;\\n\\n        for(uint i = 0; i <= bracketsToMake; i++){\\n            fillBracket(i, [index_a, index_b]);\\n            emit GotBracketParticipants(i, donationAddressByNftId[index_a], donationAddressByNftId[index_b]);\\n            index_a = index_b + 1;\\n            index_b = index_a + 1;\\n        }\\n    }\\n\\n    function mintNFTAndDeployDonationAddress(string memory nftURI, address creator) public returns (address nft_donation_address){\\n            require(hasRole(DEFAULT_ADMIN_ROLE,msg.sender), \\\"Not default admin\\\");\\n            uint nftId = mint(address(this), nftURI);\\n            //require dai address set\\n            DancerProxy dancer = new DancerProxy(address(this), address(dai));\\n\\n            emit DancerCreated(address(dancer), nftId);\\n\\n        //ghetto linkedlist\\n            donationAddressByNftId[nftId] = address(dancer);\\n            nftIdByDonationAddress[address(dancer)] = nftId;\\n\\n\\n            return donationAddressByNftId[nftId];\\n        }\\n\\n\\n    function incrementVotes(address dancer, uint amount) internal {\\n        uint256 nftId = nftIdByDonationAddress[dancer];\\n        votesPerNftId[nftId] += amount;\\n    }\\n\\n    function withdrawlFromDonationProxyToSelf(address donation_proxy) public returns (bool success){\\n//       todo: revert to this we're just doing this for testing require(isBetweenRounds());\\n        (bool success, bytes memory returnData) = address(donation_proxy).call(abi.encodeWithSignature(\\\"withdrawlDAI()\\\"));\\n\\n        if(success) {\\n        uint votes = abi.decode(returnData, (uint));\\n        incrementVotes(donation_proxy, votes);\\n        }\\n\\n       return success;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1738f6951c3b9f41be18f317b87373102fdac95d25de315448c410f0260a3138\"},\"contracts/zksync/lib/MathLog.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../../oz/utils/math/SafeMath.sol\\\";\\n\\ncontract MathLog {\\n    using SafeMath for uint;\\n\\n    event Log(uint indexed log);\\n\\n    function  log2(uint x) public returns (uint n){\\n        uint n;\\n        if (x >= 2**128) { x >>= 128; n += 128; }\\n        if (x >= 2**64) { x >>= 64; n += 64; }\\n        if (x >= 2**32) { x >>= 32; n += 32; }\\n        if (x >= 2**16) { x >>= 16; n += 16; }\\n        if (x >= 2**8) { x >>= 8; n += 8; }\\n        if (x >= 2**4) { x >>= 4; n += 4; }\\n        if (x >= 2**2) { x >>= 2; n += 2; }\\n        if (x >= 2**1) {x >>=1; n+=1;}\\n        emit Log(n);\\n        return n;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xd5bde9ded503cd1f65e6afe8ad9e58b7b0ecc4cef2fe86e28ac55ecb41dd79c6\"}},\"version\":1}",
  "bytecode": "0x60806040526000600e819055600f556016805460ff191690553480156200002557600080fd5b50604051620040ca380380620040ca8339810160408190526200004891620006f3565b604080518082018252601181527011da5d18dbda5b8811185b98d948139195607a1b60208083019182528351808501909452600484526311d2551160e21b9084015281519192916200009d916000916200061d565b508051620000b39060019060208401906200061d565b50620000c59150600090503362000133565b620000f17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000133565b600a80546001600160a01b0319166001600160a01b038316179055620001178462000143565b620001228462000291565b506012919091556013555062000812565b6200013f8282620002d8565b5050565b62000150600282620007cf565b15620001a35760405162461bcd60e51b815260206004820152601660248201527f746869732069736e74206120706f776572206f6620320000000000000000000060448201526064015b60405180910390fd5b60165460ff1615620001f85760405162461bcd60e51b815260206004820152601c60248201527f67616d652063616e74206265207374617274656420616c72656164790000000060448201526064016200019a565b60176000600e5460016200020d919062000742565b8152602080820192909252604090810160009081208180528352818120909252902060010154156200028e5760405162461bcd60e51b815260206004820152602360248201527f54686973206c6f6f6b73206c696b65206120726f756e6420657869737473206860448201526265726560e81b60648201526084016200019a565b50565b6200029c8162000143565b600e8054906000620002ae83620007b1565b9091555050600160105560148190556015819055620002cd816200037c565b506200028e62000396565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166200013f5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003383390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806200038a8362000499565b600f8190559392505050565b6000620003d06002620003bc601054601554620005cf60201b620018141790919060201c565b620005cf60201b620018141790919060201c565b905060006001815b83811162000493576200040681604051806040016040528086815260200185815250620005e460201b60201c565b6000828152600b6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a36200046d82600162000742565b92506200047c83600162000742565b9150806200048a81620007b1565b915050620003d8565b50505050565b600080600160801b8310620004bd57608092831c92620004ba908262000742565b90505b680100000000000000008310620004e357604092831c92620004e0908262000742565b90505b64010000000083106200050557602092831c9262000502908262000742565b90505b6201000083106200052557601092831c9262000522908262000742565b90505b61010083106200054457600892831c9262000541908262000742565b90505b601083106200056257600492831c926200055f908262000742565b90505b600483106200058057600292831c926200057d908262000742565b90505b600283106200059e57600192831c926200059b908262000742565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b6000620005dd82846200075d565b9392505050565b600e5460009081526017602090815260408083206010548452825280832085845290915290206200061890826002620006ac565b505050565b8280546200062b9062000774565b90600052602060002090601f0160209004810192826200064f57600085556200069a565b82601f106200066a57805160ff19168380011785556200069a565b828001600101855582156200069a579182015b828111156200069a5782518255916020019190600101906200067d565b50620006a8929150620006dc565b5090565b82600281019282156200069a57916020028201828111156200069a5782518255916020019190600101906200067d565b5b80821115620006a85760008155600101620006dd565b6000806000806080858703121562000709578384fd5b845160208601516040870151606088015192965090945092506001600160a01b038116811462000737578182fd5b939692955090935050565b60008219821115620007585762000758620007e6565b500190565b6000826200076f576200076f620007fc565b500490565b6002810460018216806200078957607f821691505b60208210811415620007ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620007c857620007c8620007e6565b5060010190565b600082620007e157620007e1620007fc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6138a880620008226000396000f3fe60806040523480156200001157600080fd5b5060043610620002985760003560e01c806370a082311162000165578063b6672a3a11620000cf578063b6672a3a1462000616578063b88d4fde1462000624578063bd2f135a146200063b578063c87b56dd1462000652578063c892fffc1462000669578063caccde2a1462000680578063d0def521146200068a578063d539139314620006a1578063d547741f14620006b8578063d65ab5f214620006cf578063dc31beb614620006d9578063e985e9c514620006e35762000298565b806370a0823114620004f957806375b5e92414620005105780637b163d35146200051a5780637d659a48146200053157806387e7ae5c146200055457806391d14854146200055e57806395d89b41146200057557806398b9b236146200057f5780639ce9c7b614620005a2578063a217fddf14620005ce578063a22cb46514620005d7578063b55b8ceb14620005ee5762000298565b806336568abe116200020757806336568abe14620003f857806337070dde146200040f57806342842e0e146200041957806348b336cb14620004305780634e18b6f5146200045c5780635456bf13146200046657806359360c04146200047d5780635e6894fc1462000494578063617aa03014620004b757806362025ca414620004ce5780636352211e14620004d85780636b4d1f0c14620004ef5762000298565b806301041fa5146200029d57806301ffc9a714620002ba578063056524ea14620002e257806306fdde03146200030a578063081812fc1462000323578063095ea7b314620003535780630b72d951146200036c5780630bb78ec114620003765780631095b4df146200038d57806323b872dd14620003a4578063248a9ca314620003bb5780632f2ff15d14620003e1575b600080fd5b620002a760145481565b6040519081526020015b60405180910390f35b620002d1620002cb36600462002660565b620006fa565b6040519015158152602001620002b1565b620002a77f2a0f2a070eb463d9807435b07a6dbfeede905dd039b03efc105c79daf0c8434881565b620003146200070f565b604051620002b1919062002851565b6200033a6200033436600462002622565b620007a9565b6040516001600160a01b039091168152602001620002b1565b6200036a62000364366004620025f6565b62000839565b005b620002a760125481565b620003146200038736600462002622565b62000955565b620002a76200039e36600462002622565b620009f7565b6200036a620003b5366004620024a6565b62000a11565b620002a7620003cc36600462002622565b60009081526006602052604090206001015490565b6200036a620003f23660046200263b565b62000a49565b6200036a620004093660046200263b565b62000a74565b620002a760135481565b6200036a6200042a366004620024a6565b62000af6565b6200033a6200044136600462002622565b6018602052600090815260409020546001600160a01b031681565b620002a760155481565b620002a76200047736600462002622565b62000b13565b6200033a6200048e3660046200269e565b62000c44565b620002a7620004a536600462002622565b60096020526000908152604090205481565b620002a7620004c8366004620026ff565b62000d7c565b620002a760105481565b6200033a620004e936600462002622565b62000dae565b6200036a62000e27565b620002a76200050a36600462002452565b62000f12565b6200036a62000f9b565b620002a76200052b366004620026ff565b6200106d565b620002a76200054236600462002452565b600c6020526000908152604090205481565b6200036a62001188565b620002d16200056f3660046200263b565b62001370565b620003146200139b565b620002a76200059036600462002622565b600d6020526000908152604090205481565b6200033a620005b336600462002622565b600b602052600090815260409020546001600160a01b031681565b620002a7600081565b6200036a620005e836600462002567565b620013ac565b620002a77fa9c8c3e87c79e0da85cf2d427e2102d48db1379529b967d6604d431f1437723f81565b601654620002d19060ff1681565b6200036a62000635366004620024e6565b6200147d565b620002a76200064c36600462002721565b620014b6565b620003146200066336600462002622565b620014f6565b620002d16200067a36600462002452565b620015c9565b620002a760115481565b620002a76200069b366004620025a5565b62001690565b620002a76000805160206200385383398151915281565b6200036a620006c93660046200263b565b6200178e565b6200036a620017b8565b620002a7600f5481565b620002d1620006f43660046200246f565b620017e6565b6000620007078262001829565b90505b919050565b606060008054620007209062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200074e9062002a12565b80156200079f5780601f1062000773576101008083540402835291602001916200079f565b820191906000526020600020905b8154815290600101906020018083116200078157829003601f168201915b5050505050905090565b6000620007b68262001851565b6200081d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000620008468262000dae565b9050806001600160a01b0316836001600160a01b03161415620008b65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840162000814565b336001600160a01b0382161480620008d55750620008d58133620006f4565b620009445760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840162000814565b6200095083836200186e565b505050565b60086020526000908152604090208054620009709062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200099e9062002a12565b8015620009ef5780601f10620009c357610100808354040283529160200191620009ef565b820191906000526020600020905b815481529060010190602001808311620009d157829003601f168201915b505050505081565b60008062000a058362000b13565b600f8190559392505050565b62000a1d3382620018de565b62000a3c5760405162461bcd60e51b81526004016200081490620028e5565b62000950838383620019b4565b60008281526006602052604090206001015462000a6881335b62001b60565b62000950838362001bcf565b6001600160a01b038116331462000ae65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000814565b62000af2828262001c59565b5050565b62000950838383604051806020016040528060008152506200147d565b600080600160801b831062000b3757608092831c9262000b34908262002951565b90505b600160401b831062000b5857604092831c9262000b55908262002951565b90505b640100000000831062000b7a57602092831c9262000b77908262002951565b90505b62010000831062000b9a57601092831c9262000b97908262002951565b90505b610100831062000bb957600892831c9262000bb6908262002951565b90505b6010831062000bd757600492831c9262000bd4908262002951565b90505b6004831062000bf557600292831c9262000bf2908262002951565b90505b6002831062000c1357600192831c9262000c10908262002951565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b600062000c52813362001370565b62000c945760405162461bcd60e51b81526020600482015260116024820152702737ba103232b330bab63a1030b236b4b760791b604482015260640162000814565b600062000ca2308562001690565b600a5460405191925060009130916001600160a01b03169062000cc590620022b8565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000cf9573d6000803e3d6000fd5b50905081816001600160a01b03167fef9c0462f3702100d0fe56e120e5d1bad81b72afa45ef3a6fcd7b40e4e6d8b0660405160405180910390a36000828152600b6020818152604080842080546001600160a01b0319166001600160a01b0396871690811782558552600c83529084208690559490925290529054169392505050565b6019602052816000526040600020818154811062000d9957600080fd5b90600052602060002001600091509150505481565b6000818152600260205260408120546001600160a01b031680620007075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840162000814565b600062000e4f600262000e486010546015546200181490919063ffffffff16565b9062001814565b905060006001815b83811162000f0c5762000e7f8160405180604001604052808681526020018581525062001cc3565b6000828152600b6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a362000ee682600162002951565b925062000ef583600162002951565b91508062000f038162002a4f565b91505062000e57565b50505050565b60006001600160a01b03821662000f7f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000814565b506001600160a01b031660009081526003602052604090205490565b600062000fb66010546014546200181490919063ffffffff16565b90506000816001600160401b0381111562000fe157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200100b578160200160208202803683370190505b50905060005b6200101e83600262001814565b81116200095057600062001035601054836200106d565b601054600090815260196020908152604082208054600181018255908352912001555080620010648162002a4f565b91505062001011565b600e5460009081526017602090815260408083208584528252808320848452909152808220815180830192839052839290919060029082845b815481526020019060010190808311620010a657505050505090506000600d600083600160028110620010e957634e487b7160e01b600052603260045260246000fd5b6020020151815260200190815260200160002054600d6000846000600281106200112357634e487b7160e01b600052603260045260246000fd5b602002015181526020019081526020016000205411620011485760208201516200114b565b81515b6020830151835160405192935083927fd88c4bce48d5c365fe27f4e457535f707eb3bc75d09174008a1cdccf5311a27190600090a4949350505050565b601080549060006200119a8362002a4f565b91905055506000805b600481101562000af25762001275816040518060400160405280601960006001601054620011d29190620029af565b815260200190815260200160002086815481106200120057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001601960006001601054620012259190620029af565b815260200190815260200160002086600162001242919062002951565b815481106200126157634e487b7160e01b600052603260045260246000fd5b906000526020600020015481525062001cc3565b6019600060016010546200128a9190620029af565b8152602001908152602001600020826001620012a7919062002951565b81548110620012c657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154601960006001601054620012e69190620029af565b815260200190815260200160002083815481106200131457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154827f419fa4332d807bbd2b7b6e6bdee06a3482d989ec73eaf98f0ce5d0e874914e9e60405160405180910390a46200135960028362002951565b915080620013678162002a4f565b915050620011a3565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054620007209062002a12565b6001600160a01b038216331415620014035760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640162000814565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405162001471911515815260200190565b60405180910390a35050565b620014893383620018de565b620014a85760405162461bcd60e51b81526004016200081490620028e5565b62000f0c8484848462001cf7565b60176020528360005260406000206020528260005260406000206020528160005260406000208160028110620014eb57600080fd5b015493508492505050565b6060620015038262001851565b620015225760405162461bcd60e51b81526004016200081490620028b8565b600082815260086020526040812080546200153d9062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200156b9062002a12565b8015620015bc5780601f106200159057610100808354040283529160200191620015bc565b820191906000526020600020905b8154815290600101906020018083116200159e57829003601f168201915b5093979650505050505050565b60408051600481526024810182526020810180516001600160e01b031663bbf6061b60e01b1790529051600091829182916001600160a01b0386169162001611919062002781565b6000604051808303816000865af19150503d806000811462001650576040519150601f19603f3d011682016040523d82523d6000602084013e62001655565b606091505b509150915081156200168957600081806020019051810190620016799190620026e6565b905062001687858262001d31565b505b5092915050565b6000620016ad600080516020620038538339815191523362001370565b620017055760405162461bcd60e51b815260206004820152602160248201527f3732314d696e743a206163636f756e742069736e74204d696e74657220726f6c6044820152606560f81b606482015260840162000814565b6200171a836200171460075490565b62001d74565b6200172f6200172860075490565b8362001eaf565b60006200173b60075490565b90506200174c600780546001019055565b7f9e0bfaf38878aad3ebd19b8c8065288eb130f0499a7378363d4652515588ac9681846040516200177f92919062002936565b60405180910390a19392505050565b600082815260066020526040902060010154620017ac813362000a62565b62000950838362001c59565b60165460ff1615620017c957600080fd5b436011556016805460ff19166001179055620017e462000e27565b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006200182282846200296c565b9392505050565b60006001600160e01b03198216637965db0b60e01b1480620007075750620007078262001f55565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190620018a58262000dae565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000620018eb8262001851565b6200194e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840162000814565b60006200195b8362000dae565b9050806001600160a01b0316846001600160a01b03161480620019995750836001600160a01b03166200198e84620007a9565b6001600160a01b0316145b80620019ac5750620019ac8185620017e6565b949350505050565b826001600160a01b0316620019c98262000dae565b6001600160a01b03161462001a335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840162000814565b6001600160a01b03821662001a975760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840162000814565b62001aa46000826200186e565b6001600160a01b038316600090815260036020526040812080546001929062001acf908490620029af565b90915550506001600160a01b038216600090815260036020526040812080546001929062001aff90849062002951565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b62001b6c828262001370565b62000af25762001b87816001600160a01b0316601462001fa8565b62001b9483602062001fa8565b60405160200162001ba79291906200279f565b60408051601f198184030181529082905262461bcd60e51b8252620008149160040162002851565b62001bdb828262001370565b62000af25760008281526006602090815260408083206001600160a01b03851684529091529020805460ff1916600117905562001c153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001c65828262001370565b1562000af25760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600e5460009081526017602090815260408083206010548452825280832085845290915290206200095090826002620022c6565b62001d04848484620019b4565b62001d12848484846200219d565b62000f0c5760405162461bcd60e51b8152600401620008149062002866565b6001600160a01b0382166000908152600c6020908152604080832054808452600d909252822080549192849262001d6a90849062002951565b9091555050505050565b6001600160a01b03821662001dcc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000814565b62001dd78162001851565b1562001e265760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000814565b6001600160a01b038216600090815260036020526040812080546001929062001e5190849062002951565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b62001eca600080516020620038538339815191523362001370565b62001f0a5760405162461bcd60e51b815260206004820152600f60248201526e4e6f74204d696e74657220526f6c6560881b604482015260640162000814565b62001f158262001851565b62001f345760405162461bcd60e51b81526004016200081490620028b8565b60008281526008602090815260409091208251620009509284019062002309565b60006001600160e01b031982166380ac58cd60e01b148062001f8757506001600160e01b03198216635b5e139f60e01b145b806200070757506301ffc9a760e01b6001600160e01b031983161462000707565b6060600062001fb98360026200298d565b62001fc690600262002951565b6001600160401b0381111562001fec57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562002017576020820181803683370190505b509050600360fc1b816000815181106200204157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200207f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620020a58460026200298d565b620020b290600162002951565b90505b60018111156200214c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620020f657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200211b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936200214481620029f8565b9050620020b5565b508315620018225760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000814565b60006001600160a01b0384163b15620022ad57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290620021e490339089908890889060040162002812565b602060405180830381600087803b158015620021ff57600080fd5b505af192505050801562002232575060408051601f3d908101601f191682019092526200222f918101906200267f565b60015b62002292573d80801562002263576040519150601f19603f3d011682016040523d82523d6000602084013e62002268565b606091505b5080516200228a5760405162461bcd60e51b8152600401620008149062002866565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050620019ac565b506001949350505050565b610d9f8062002ab483390190565b8260028101928215620022f7579160200282015b82811115620022f7578251825591602001919060010190620022da565b506200230592915062002385565b5090565b828054620023179062002a12565b90600052602060002090601f0160209004810192826200233b5760008555620022f7565b82601f106200235657805160ff1916838001178555620022f7565b82800160010185558215620022f75791820182811115620022f7578251825591602001919060010190620022da565b5b8082111562002305576000815560010162002386565b60006001600160401b0380841115620023b957620023b962002a83565b604051601f8501601f19908116603f01168101908282118183101715620023e457620023e462002a83565b81604052809350858152868686011115620023fe57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146200070a57600080fd5b600082601f83011262002441578081fd5b62001822838335602085016200239c565b60006020828403121562002464578081fd5b620018228262002418565b6000806040838503121562002482578081fd5b6200248d8362002418565b91506200249d6020840162002418565b90509250929050565b600080600060608486031215620024bb578081fd5b620024c68462002418565b9250620024d66020850162002418565b9150604084013590509250925092565b60008060008060808587031215620024fc578081fd5b620025078562002418565b9350620025176020860162002418565b92506040850135915060608501356001600160401b0381111562002539578182fd5b8501601f810187136200254a578182fd5b6200255b878235602084016200239c565b91505092959194509250565b600080604083850312156200257a578182fd5b620025858362002418565b9150602083013580151581146200259a578182fd5b809150509250929050565b60008060408385031215620025b8578182fd5b620025c38362002418565b915060208301356001600160401b03811115620025de578182fd5b620025ec8582860162002430565b9150509250929050565b6000806040838503121562002609578182fd5b620026148362002418565b946020939093013593505050565b60006020828403121562002634578081fd5b5035919050565b600080604083850312156200264e578182fd5b823591506200249d6020840162002418565b60006020828403121562002672578081fd5b8135620018228162002a99565b60006020828403121562002691578081fd5b8151620018228162002a99565b60008060408385031215620026b1578182fd5b82356001600160401b03811115620026c7578283fd5b620026d58582860162002430565b9250506200249d6020840162002418565b600060208284031215620026f8578081fd5b5051919050565b6000806040838503121562002712578182fd5b50508035926020909101359150565b6000806000806080858703121562002737578182fd5b5050823594602084013594506040840135936060013592509050565b600081518084526200276d816020860160208601620029c9565b601f01601f19169290920160200192915050565b6000825162002795818460208701620029c9565b9190910192915050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351620027d3816017850160208801620029c9565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002806816028840160208801620029c9565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090620028479083018462002753565b9695505050505050565b60006020825262001822602083018462002753565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260139082015272139195081a5908191bdcd95b9d08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083825260406020830152620019ac604083018462002753565b6000821982111562002967576200296762002a6d565b500190565b6000826200298857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620029aa57620029aa62002a6d565b500290565b600082821015620029c457620029c462002a6d565b500390565b60005b83811015620029e6578181015183820152602001620029cc565b8381111562000f0c5750506000910152565b60008162002a0a5762002a0a62002a6d565b506000190190565b60028104600182168062002a2757607f821691505b6020821081141562002a4957634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562002a665762002a6662002a6d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811462002ab057600080fd5b5056fe6080604052600380546001600160a01b0319167382f67958a5474e40e1485742d648c0b0686b6e5d17905534801561003657600080fd5b50604051610d9f380380610d9f83398101604081905261005591610159565b610060600033610091565b600280546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905561018b565b61009b828261009f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661009b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100f93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b038116811461015457600080fd5b919050565b6000806040838503121561016b578182fd5b6101748361013d565b91506101826020840161013d565b90509250929050565b610c058061019a6000396000f3fe6080604052600436106100905760003560e01c806301ffc9a7146100e6578063248a9ca31461011b5780632a3ac08c146101595780632f2ff15d1461018d57806336568abe146101af57806391d14854146101cf578063a217fddf146101ef578063bbf6061b14610204578063c3fe3e2814610219578063d547741f14610246578063f4b9fa7514610266576100e1565b366100e1576003546001600160a01b031633146100ac57600080fd5b6040513481527f8183b826af1aa1b488f7fba9edba0457b6808fd87ee197e08191736a5a9066799060200160405180910390a1005b600080fd5b3480156100f257600080fd5b50610106610101366004610a2c565b610286565b60405190151581526020015b60405180910390f35b34801561012757600080fd5b5061014b6101363660046109da565b60009081526020819052604090206001015490565b604051908152602001610112565b34801561016557600080fd5b5061014b7fe39604301a5df21de489c846135593d1f32826f514afa2544bdbe9ace2bfae4a81565b34801561019957600080fd5b506101ad6101a83660046109f2565b6102bd565b005b3480156101bb57600080fd5b506101ad6101ca3660046109f2565b6102e9565b3480156101db57600080fd5b506101066101ea3660046109f2565b61036c565b3480156101fb57600080fd5b5061014b600081565b34801561021057600080fd5b5061014b610395565b34801561022557600080fd5b50600254610239906001600160a01b031681565b6040516101129190610adb565b34801561025257600080fd5b506101ad6102613660046109f2565b61065e565b34801561027257600080fd5b50600154610239906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546102da81335b610684565b6102e483836106e8565b505050565b6001600160a01b038116331461035e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610368828261076c565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906103ca903090600401610adb565b60206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a9190610a54565b6001546002546040516370a0823160e01b81529293506001600160a01b039182169263095ea7b3929091169083906370a082319061045c903090600401610adb565b60206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac9190610a54565b6040518363ffffffff1660e01b81526004016104c9929190610aef565b602060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906109ba565b61052457600080fd5b6001546002546040516370a0823160e01b81526001600160a01b039283169263a9059cbb92169083906370a0823190610561903090600401610adb565b60206040518083038186803b15801561057957600080fd5b505afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610a54565b6040518363ffffffff1660e01b81526004016105ce929190610aef565b602060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062091906109ba565b506002546040516001600160a01b03909116907fbdd983d6baf07aab2a84779f0fc201c6bf84ab638ad825fa90e0e370f04c39df90600090a2905090565b60008281526020819052604090206001015461067a81336102d5565b6102e4838361076c565b61068e828261036c565b610368576106a6816001600160a01b031660146107d1565b6106b18360206107d1565b6040516020016106c2929190610a6c565b60408051601f198184030181529082905262461bcd60e51b825261035591600401610b08565b6106f2828261036c565b610368576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556107283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610776828261036c565b15610368576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606060006107e0836002610b53565b6107eb906002610b3b565b67ffffffffffffffff81111561081157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561083b576020820181803683370190505b509050600360fc1b8160008151811061086457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106108a157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006108c5846002610b53565b6108d0906001610b3b565b90505b6001811115610964576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061091257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061093657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361095d81610ba2565b90506108d3565b5083156109b35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610355565b9392505050565b6000602082840312156109cb578081fd5b815180151581146109b3578182fd5b6000602082840312156109eb578081fd5b5035919050565b60008060408385031215610a04578081fd5b8235915060208301356001600160a01b0381168114610a21578182fd5b809150509250929050565b600060208284031215610a3d578081fd5b81356001600160e01b0319811681146109b3578182fd5b600060208284031215610a65578081fd5b5051919050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351610a9e816017850160208801610b72565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610acf816028840160208801610b72565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610b27816040850160208701610b72565b601f01601f19169190910160400192915050565b60008219821115610b4e57610b4e610bb9565b500190565b6000816000190483118215151615610b6d57610b6d610bb9565b500290565b60005b83811015610b8d578181015183820152602001610b75565b83811115610b9c576000848401525b50505050565b600081610bb157610bb1610bb9565b506000190190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220acbbc14df6017aa0fc72b3eb21b5407c5b603410c4694e5704a9b1f8689c4cdb64736f6c634300080200339f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220f031074d2836c81300eb970d0e026374e2145d970397376640e1e63bc206189b64736f6c63430008020033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002985760003560e01c806370a082311162000165578063b6672a3a11620000cf578063b6672a3a1462000616578063b88d4fde1462000624578063bd2f135a146200063b578063c87b56dd1462000652578063c892fffc1462000669578063caccde2a1462000680578063d0def521146200068a578063d539139314620006a1578063d547741f14620006b8578063d65ab5f214620006cf578063dc31beb614620006d9578063e985e9c514620006e35762000298565b806370a0823114620004f957806375b5e92414620005105780637b163d35146200051a5780637d659a48146200053157806387e7ae5c146200055457806391d14854146200055e57806395d89b41146200057557806398b9b236146200057f5780639ce9c7b614620005a2578063a217fddf14620005ce578063a22cb46514620005d7578063b55b8ceb14620005ee5762000298565b806336568abe116200020757806336568abe14620003f857806337070dde146200040f57806342842e0e146200041957806348b336cb14620004305780634e18b6f5146200045c5780635456bf13146200046657806359360c04146200047d5780635e6894fc1462000494578063617aa03014620004b757806362025ca414620004ce5780636352211e14620004d85780636b4d1f0c14620004ef5762000298565b806301041fa5146200029d57806301ffc9a714620002ba578063056524ea14620002e257806306fdde03146200030a578063081812fc1462000323578063095ea7b314620003535780630b72d951146200036c5780630bb78ec114620003765780631095b4df146200038d57806323b872dd14620003a4578063248a9ca314620003bb5780632f2ff15d14620003e1575b600080fd5b620002a760145481565b6040519081526020015b60405180910390f35b620002d1620002cb36600462002660565b620006fa565b6040519015158152602001620002b1565b620002a77f2a0f2a070eb463d9807435b07a6dbfeede905dd039b03efc105c79daf0c8434881565b620003146200070f565b604051620002b1919062002851565b6200033a6200033436600462002622565b620007a9565b6040516001600160a01b039091168152602001620002b1565b6200036a62000364366004620025f6565b62000839565b005b620002a760125481565b620003146200038736600462002622565b62000955565b620002a76200039e36600462002622565b620009f7565b6200036a620003b5366004620024a6565b62000a11565b620002a7620003cc36600462002622565b60009081526006602052604090206001015490565b6200036a620003f23660046200263b565b62000a49565b6200036a620004093660046200263b565b62000a74565b620002a760135481565b6200036a6200042a366004620024a6565b62000af6565b6200033a6200044136600462002622565b6018602052600090815260409020546001600160a01b031681565b620002a760155481565b620002a76200047736600462002622565b62000b13565b6200033a6200048e3660046200269e565b62000c44565b620002a7620004a536600462002622565b60096020526000908152604090205481565b620002a7620004c8366004620026ff565b62000d7c565b620002a760105481565b6200033a620004e936600462002622565b62000dae565b6200036a62000e27565b620002a76200050a36600462002452565b62000f12565b6200036a62000f9b565b620002a76200052b366004620026ff565b6200106d565b620002a76200054236600462002452565b600c6020526000908152604090205481565b6200036a62001188565b620002d16200056f3660046200263b565b62001370565b620003146200139b565b620002a76200059036600462002622565b600d6020526000908152604090205481565b6200033a620005b336600462002622565b600b602052600090815260409020546001600160a01b031681565b620002a7600081565b6200036a620005e836600462002567565b620013ac565b620002a77fa9c8c3e87c79e0da85cf2d427e2102d48db1379529b967d6604d431f1437723f81565b601654620002d19060ff1681565b6200036a62000635366004620024e6565b6200147d565b620002a76200064c36600462002721565b620014b6565b620003146200066336600462002622565b620014f6565b620002d16200067a36600462002452565b620015c9565b620002a760115481565b620002a76200069b366004620025a5565b62001690565b620002a76000805160206200385383398151915281565b6200036a620006c93660046200263b565b6200178e565b6200036a620017b8565b620002a7600f5481565b620002d1620006f43660046200246f565b620017e6565b6000620007078262001829565b90505b919050565b606060008054620007209062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200074e9062002a12565b80156200079f5780601f1062000773576101008083540402835291602001916200079f565b820191906000526020600020905b8154815290600101906020018083116200078157829003601f168201915b5050505050905090565b6000620007b68262001851565b6200081d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000620008468262000dae565b9050806001600160a01b0316836001600160a01b03161415620008b65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840162000814565b336001600160a01b0382161480620008d55750620008d58133620006f4565b620009445760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840162000814565b6200095083836200186e565b505050565b60086020526000908152604090208054620009709062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200099e9062002a12565b8015620009ef5780601f10620009c357610100808354040283529160200191620009ef565b820191906000526020600020905b815481529060010190602001808311620009d157829003601f168201915b505050505081565b60008062000a058362000b13565b600f8190559392505050565b62000a1d3382620018de565b62000a3c5760405162461bcd60e51b81526004016200081490620028e5565b62000950838383620019b4565b60008281526006602052604090206001015462000a6881335b62001b60565b62000950838362001bcf565b6001600160a01b038116331462000ae65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000814565b62000af2828262001c59565b5050565b62000950838383604051806020016040528060008152506200147d565b600080600160801b831062000b3757608092831c9262000b34908262002951565b90505b600160401b831062000b5857604092831c9262000b55908262002951565b90505b640100000000831062000b7a57602092831c9262000b77908262002951565b90505b62010000831062000b9a57601092831c9262000b97908262002951565b90505b610100831062000bb957600892831c9262000bb6908262002951565b90505b6010831062000bd757600492831c9262000bd4908262002951565b90505b6004831062000bf557600292831c9262000bf2908262002951565b90505b6002831062000c1357600192831c9262000c10908262002951565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b600062000c52813362001370565b62000c945760405162461bcd60e51b81526020600482015260116024820152702737ba103232b330bab63a1030b236b4b760791b604482015260640162000814565b600062000ca2308562001690565b600a5460405191925060009130916001600160a01b03169062000cc590620022b8565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000cf9573d6000803e3d6000fd5b50905081816001600160a01b03167fef9c0462f3702100d0fe56e120e5d1bad81b72afa45ef3a6fcd7b40e4e6d8b0660405160405180910390a36000828152600b6020818152604080842080546001600160a01b0319166001600160a01b0396871690811782558552600c83529084208690559490925290529054169392505050565b6019602052816000526040600020818154811062000d9957600080fd5b90600052602060002001600091509150505481565b6000818152600260205260408120546001600160a01b031680620007075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840162000814565b600062000e4f600262000e486010546015546200181490919063ffffffff16565b9062001814565b905060006001815b83811162000f0c5762000e7f8160405180604001604052808681526020018581525062001cc3565b6000828152600b6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a362000ee682600162002951565b925062000ef583600162002951565b91508062000f038162002a4f565b91505062000e57565b50505050565b60006001600160a01b03821662000f7f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000814565b506001600160a01b031660009081526003602052604090205490565b600062000fb66010546014546200181490919063ffffffff16565b90506000816001600160401b0381111562000fe157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200100b578160200160208202803683370190505b50905060005b6200101e83600262001814565b81116200095057600062001035601054836200106d565b601054600090815260196020908152604082208054600181018255908352912001555080620010648162002a4f565b91505062001011565b600e5460009081526017602090815260408083208584528252808320848452909152808220815180830192839052839290919060029082845b815481526020019060010190808311620010a657505050505090506000600d600083600160028110620010e957634e487b7160e01b600052603260045260246000fd5b6020020151815260200190815260200160002054600d6000846000600281106200112357634e487b7160e01b600052603260045260246000fd5b602002015181526020019081526020016000205411620011485760208201516200114b565b81515b6020830151835160405192935083927fd88c4bce48d5c365fe27f4e457535f707eb3bc75d09174008a1cdccf5311a27190600090a4949350505050565b601080549060006200119a8362002a4f565b91905055506000805b600481101562000af25762001275816040518060400160405280601960006001601054620011d29190620029af565b815260200190815260200160002086815481106200120057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001601960006001601054620012259190620029af565b815260200190815260200160002086600162001242919062002951565b815481106200126157634e487b7160e01b600052603260045260246000fd5b906000526020600020015481525062001cc3565b6019600060016010546200128a9190620029af565b8152602001908152602001600020826001620012a7919062002951565b81548110620012c657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154601960006001601054620012e69190620029af565b815260200190815260200160002083815481106200131457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154827f419fa4332d807bbd2b7b6e6bdee06a3482d989ec73eaf98f0ce5d0e874914e9e60405160405180910390a46200135960028362002951565b915080620013678162002a4f565b915050620011a3565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054620007209062002a12565b6001600160a01b038216331415620014035760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640162000814565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405162001471911515815260200190565b60405180910390a35050565b620014893383620018de565b620014a85760405162461bcd60e51b81526004016200081490620028e5565b62000f0c8484848462001cf7565b60176020528360005260406000206020528260005260406000206020528160005260406000208160028110620014eb57600080fd5b015493508492505050565b6060620015038262001851565b620015225760405162461bcd60e51b81526004016200081490620028b8565b600082815260086020526040812080546200153d9062002a12565b80601f01602080910402602001604051908101604052809291908181526020018280546200156b9062002a12565b8015620015bc5780601f106200159057610100808354040283529160200191620015bc565b820191906000526020600020905b8154815290600101906020018083116200159e57829003601f168201915b5093979650505050505050565b60408051600481526024810182526020810180516001600160e01b031663bbf6061b60e01b1790529051600091829182916001600160a01b0386169162001611919062002781565b6000604051808303816000865af19150503d806000811462001650576040519150601f19603f3d011682016040523d82523d6000602084013e62001655565b606091505b509150915081156200168957600081806020019051810190620016799190620026e6565b905062001687858262001d31565b505b5092915050565b6000620016ad600080516020620038538339815191523362001370565b620017055760405162461bcd60e51b815260206004820152602160248201527f3732314d696e743a206163636f756e742069736e74204d696e74657220726f6c6044820152606560f81b606482015260840162000814565b6200171a836200171460075490565b62001d74565b6200172f6200172860075490565b8362001eaf565b60006200173b60075490565b90506200174c600780546001019055565b7f9e0bfaf38878aad3ebd19b8c8065288eb130f0499a7378363d4652515588ac9681846040516200177f92919062002936565b60405180910390a19392505050565b600082815260066020526040902060010154620017ac813362000a62565b62000950838362001c59565b60165460ff1615620017c957600080fd5b436011556016805460ff19166001179055620017e462000e27565b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006200182282846200296c565b9392505050565b60006001600160e01b03198216637965db0b60e01b1480620007075750620007078262001f55565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190620018a58262000dae565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000620018eb8262001851565b6200194e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840162000814565b60006200195b8362000dae565b9050806001600160a01b0316846001600160a01b03161480620019995750836001600160a01b03166200198e84620007a9565b6001600160a01b0316145b80620019ac5750620019ac8185620017e6565b949350505050565b826001600160a01b0316620019c98262000dae565b6001600160a01b03161462001a335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840162000814565b6001600160a01b03821662001a975760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840162000814565b62001aa46000826200186e565b6001600160a01b038316600090815260036020526040812080546001929062001acf908490620029af565b90915550506001600160a01b038216600090815260036020526040812080546001929062001aff90849062002951565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b62001b6c828262001370565b62000af25762001b87816001600160a01b0316601462001fa8565b62001b9483602062001fa8565b60405160200162001ba79291906200279f565b60408051601f198184030181529082905262461bcd60e51b8252620008149160040162002851565b62001bdb828262001370565b62000af25760008281526006602090815260408083206001600160a01b03851684529091529020805460ff1916600117905562001c153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001c65828262001370565b1562000af25760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600e5460009081526017602090815260408083206010548452825280832085845290915290206200095090826002620022c6565b62001d04848484620019b4565b62001d12848484846200219d565b62000f0c5760405162461bcd60e51b8152600401620008149062002866565b6001600160a01b0382166000908152600c6020908152604080832054808452600d909252822080549192849262001d6a90849062002951565b9091555050505050565b6001600160a01b03821662001dcc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000814565b62001dd78162001851565b1562001e265760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000814565b6001600160a01b038216600090815260036020526040812080546001929062001e5190849062002951565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b62001eca600080516020620038538339815191523362001370565b62001f0a5760405162461bcd60e51b815260206004820152600f60248201526e4e6f74204d696e74657220526f6c6560881b604482015260640162000814565b62001f158262001851565b62001f345760405162461bcd60e51b81526004016200081490620028b8565b60008281526008602090815260409091208251620009509284019062002309565b60006001600160e01b031982166380ac58cd60e01b148062001f8757506001600160e01b03198216635b5e139f60e01b145b806200070757506301ffc9a760e01b6001600160e01b031983161462000707565b6060600062001fb98360026200298d565b62001fc690600262002951565b6001600160401b0381111562001fec57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562002017576020820181803683370190505b509050600360fc1b816000815181106200204157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200207f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620020a58460026200298d565b620020b290600162002951565b90505b60018111156200214c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620020f657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200211b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936200214481620029f8565b9050620020b5565b508315620018225760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000814565b60006001600160a01b0384163b15620022ad57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290620021e490339089908890889060040162002812565b602060405180830381600087803b158015620021ff57600080fd5b505af192505050801562002232575060408051601f3d908101601f191682019092526200222f918101906200267f565b60015b62002292573d80801562002263576040519150601f19603f3d011682016040523d82523d6000602084013e62002268565b606091505b5080516200228a5760405162461bcd60e51b8152600401620008149062002866565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050620019ac565b506001949350505050565b610d9f8062002ab483390190565b8260028101928215620022f7579160200282015b82811115620022f7578251825591602001919060010190620022da565b506200230592915062002385565b5090565b828054620023179062002a12565b90600052602060002090601f0160209004810192826200233b5760008555620022f7565b82601f106200235657805160ff1916838001178555620022f7565b82800160010185558215620022f75791820182811115620022f7578251825591602001919060010190620022da565b5b8082111562002305576000815560010162002386565b60006001600160401b0380841115620023b957620023b962002a83565b604051601f8501601f19908116603f01168101908282118183101715620023e457620023e462002a83565b81604052809350858152868686011115620023fe57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146200070a57600080fd5b600082601f83011262002441578081fd5b62001822838335602085016200239c565b60006020828403121562002464578081fd5b620018228262002418565b6000806040838503121562002482578081fd5b6200248d8362002418565b91506200249d6020840162002418565b90509250929050565b600080600060608486031215620024bb578081fd5b620024c68462002418565b9250620024d66020850162002418565b9150604084013590509250925092565b60008060008060808587031215620024fc578081fd5b620025078562002418565b9350620025176020860162002418565b92506040850135915060608501356001600160401b0381111562002539578182fd5b8501601f810187136200254a578182fd5b6200255b878235602084016200239c565b91505092959194509250565b600080604083850312156200257a578182fd5b620025858362002418565b9150602083013580151581146200259a578182fd5b809150509250929050565b60008060408385031215620025b8578182fd5b620025c38362002418565b915060208301356001600160401b03811115620025de578182fd5b620025ec8582860162002430565b9150509250929050565b6000806040838503121562002609578182fd5b620026148362002418565b946020939093013593505050565b60006020828403121562002634578081fd5b5035919050565b600080604083850312156200264e578182fd5b823591506200249d6020840162002418565b60006020828403121562002672578081fd5b8135620018228162002a99565b60006020828403121562002691578081fd5b8151620018228162002a99565b60008060408385031215620026b1578182fd5b82356001600160401b03811115620026c7578283fd5b620026d58582860162002430565b9250506200249d6020840162002418565b600060208284031215620026f8578081fd5b5051919050565b6000806040838503121562002712578182fd5b50508035926020909101359150565b6000806000806080858703121562002737578182fd5b5050823594602084013594506040840135936060013592509050565b600081518084526200276d816020860160208601620029c9565b601f01601f19169290920160200192915050565b6000825162002795818460208701620029c9565b9190910192915050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351620027d3816017850160208801620029c9565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002806816028840160208801620029c9565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090620028479083018462002753565b9695505050505050565b60006020825262001822602083018462002753565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260139082015272139195081a5908191bdcd95b9d08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083825260406020830152620019ac604083018462002753565b6000821982111562002967576200296762002a6d565b500190565b6000826200298857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620029aa57620029aa62002a6d565b500290565b600082821015620029c457620029c462002a6d565b500390565b60005b83811015620029e6578181015183820152602001620029cc565b8381111562000f0c5750506000910152565b60008162002a0a5762002a0a62002a6d565b506000190190565b60028104600182168062002a2757607f821691505b6020821081141562002a4957634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562002a665762002a6662002a6d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811462002ab057600080fd5b5056fe6080604052600380546001600160a01b0319167382f67958a5474e40e1485742d648c0b0686b6e5d17905534801561003657600080fd5b50604051610d9f380380610d9f83398101604081905261005591610159565b610060600033610091565b600280546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905561018b565b61009b828261009f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661009b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100f93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b038116811461015457600080fd5b919050565b6000806040838503121561016b578182fd5b6101748361013d565b91506101826020840161013d565b90509250929050565b610c058061019a6000396000f3fe6080604052600436106100905760003560e01c806301ffc9a7146100e6578063248a9ca31461011b5780632a3ac08c146101595780632f2ff15d1461018d57806336568abe146101af57806391d14854146101cf578063a217fddf146101ef578063bbf6061b14610204578063c3fe3e2814610219578063d547741f14610246578063f4b9fa7514610266576100e1565b366100e1576003546001600160a01b031633146100ac57600080fd5b6040513481527f8183b826af1aa1b488f7fba9edba0457b6808fd87ee197e08191736a5a9066799060200160405180910390a1005b600080fd5b3480156100f257600080fd5b50610106610101366004610a2c565b610286565b60405190151581526020015b60405180910390f35b34801561012757600080fd5b5061014b6101363660046109da565b60009081526020819052604090206001015490565b604051908152602001610112565b34801561016557600080fd5b5061014b7fe39604301a5df21de489c846135593d1f32826f514afa2544bdbe9ace2bfae4a81565b34801561019957600080fd5b506101ad6101a83660046109f2565b6102bd565b005b3480156101bb57600080fd5b506101ad6101ca3660046109f2565b6102e9565b3480156101db57600080fd5b506101066101ea3660046109f2565b61036c565b3480156101fb57600080fd5b5061014b600081565b34801561021057600080fd5b5061014b610395565b34801561022557600080fd5b50600254610239906001600160a01b031681565b6040516101129190610adb565b34801561025257600080fd5b506101ad6102613660046109f2565b61065e565b34801561027257600080fd5b50600154610239906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546102da81335b610684565b6102e483836106e8565b505050565b6001600160a01b038116331461035e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610368828261076c565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906103ca903090600401610adb565b60206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a9190610a54565b6001546002546040516370a0823160e01b81529293506001600160a01b039182169263095ea7b3929091169083906370a082319061045c903090600401610adb565b60206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac9190610a54565b6040518363ffffffff1660e01b81526004016104c9929190610aef565b602060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906109ba565b61052457600080fd5b6001546002546040516370a0823160e01b81526001600160a01b039283169263a9059cbb92169083906370a0823190610561903090600401610adb565b60206040518083038186803b15801561057957600080fd5b505afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610a54565b6040518363ffffffff1660e01b81526004016105ce929190610aef565b602060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062091906109ba565b506002546040516001600160a01b03909116907fbdd983d6baf07aab2a84779f0fc201c6bf84ab638ad825fa90e0e370f04c39df90600090a2905090565b60008281526020819052604090206001015461067a81336102d5565b6102e4838361076c565b61068e828261036c565b610368576106a6816001600160a01b031660146107d1565b6106b18360206107d1565b6040516020016106c2929190610a6c565b60408051601f198184030181529082905262461bcd60e51b825261035591600401610b08565b6106f2828261036c565b610368576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556107283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610776828261036c565b15610368576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606060006107e0836002610b53565b6107eb906002610b3b565b67ffffffffffffffff81111561081157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561083b576020820181803683370190505b509050600360fc1b8160008151811061086457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106108a157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006108c5846002610b53565b6108d0906001610b3b565b90505b6001811115610964576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061091257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061093657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361095d81610ba2565b90506108d3565b5083156109b35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610355565b9392505050565b6000602082840312156109cb578081fd5b815180151581146109b3578182fd5b6000602082840312156109eb578081fd5b5035919050565b60008060408385031215610a04578081fd5b8235915060208301356001600160a01b0381168114610a21578182fd5b809150509250929050565b600060208284031215610a3d578081fd5b81356001600160e01b0319811681146109b3578182fd5b600060208284031215610a65578081fd5b5051919050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351610a9e816017850160208801610b72565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610acf816028840160208801610b72565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610b27816040850160208701610b72565b601f01601f19169190910160400192915050565b60008219821115610b4e57610b4e610bb9565b500190565b6000816000190483118215151615610b6d57610b6d610bb9565b500290565b60005b83811015610b8d578181015183820152602001610b75565b83811115610b9c576000848401525b50505050565b600081610bb157610bb1610bb9565b506000190190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220acbbc14df6017aa0fc72b3eb21b5407c5b603410c4694e5704a9b1f8689c4cdb64736f6c634300080200339f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220f031074d2836c81300eb970d0e026374e2145d970397376640e1e63bc206189b64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12992,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 12994,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12998,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13002,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13006,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13012,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 62,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 20067,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)16505_storage"
      },
      {
        "astId": 20074,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 20078,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "_votesById",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20241,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "dai",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)10880"
      },
      {
        "astId": 20262,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "donationAddressByNftId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20266,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "nftIdByDonationAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20270,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "votesPerNftId",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20273,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_game_number",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 20276,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_rounds",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 20278,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_current_round",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 20280,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_start_block",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 20282,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_round_blocktime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 20284,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_intermission_blocktime",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 20286,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_number_dancers",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 20288,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_current_number_dancers",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 20291,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "g_game_started",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 20301,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "gameByBracketByRound",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage)))"
      },
      {
        "astId": 20305,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "addressByNFTId",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20562,
        "contract": "contracts/zksync/Game.sol:Game",
        "label": "winnersByRound",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)10880": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256[2]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256[2])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage))"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)16505_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 16504,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}