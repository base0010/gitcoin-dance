{
  "0xfb98db34a210f4c087bd31bf59930419da80e4f3493cf98cca2371bd5700c700": {
    "name": "Game",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Game",
      "sourceName": "contracts/zksync/Game.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "num_dancers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundTimeInBlocks",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dai_address",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "a",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "nftid",
              "type": "uint256"
            }
          ],
          "name": "DancerCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "bracket",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "a",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "b",
              "type": "address"
            }
          ],
          "name": "GotBracketParticipants",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "log",
              "type": "uint256"
            }
          ],
          "name": "Log",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "name": "NFTMinted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MATIC_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MINTER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "ZKSYNC_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "_tokenURIs",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "_votesById",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "addressByNFTId",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "advanceGame",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "bracketNumber",
              "type": "uint256"
            }
          ],
          "name": "determineBracketWinners",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "determineBrackets",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_num_dancers",
              "type": "uint256"
            }
          ],
          "name": "determineGameRounds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "n",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "donationAddressByNftId",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "g_rounds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "gameByBracketByRound",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "unfilled_brackets",
              "type": "uint256"
            }
          ],
          "name": "getBracketEntropy",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "bracketNo",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "name": "log2",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "n",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "nftURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "name": "mintNFTAndDeployDonationAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "nft_donation_address",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "nftIdByDonationAddress",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "notEliminated",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startGame",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "votesPerNftId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "donation_proxy",
              "type": "address"
            }
          ],
          "name": "withdrawlFromDonationProxyToSelf",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526000600f81905560108190556107d060135560646014556016556017805460ff191690553480156200003557600080fd5b5060405162003c0838038062003c08833981016040819052620000589162000700565b604080518082018252601181527011da5d18dbda5b8811185b98d948139195607a1b60208083019182528351808501909452600484526311d2551160e21b908401528151919291620000ad916000916200062a565b508051620000c39060019060208401906200062a565b50620000d5915060009050336200013b565b620001017f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200013b565b600a80546001600160a01b0319166001600160a01b03831617905562000127836200014b565b620001328362000299565b50505062000816565b620001478282620002e0565b5050565b62000158600282620007d3565b15620001ab5760405162461bcd60e51b815260206004820152601660248201527f746869732069736e74206120706f776572206f6620320000000000000000000060448201526064015b60405180910390fd5b60175460ff1615620002005760405162461bcd60e51b815260206004820152601c60248201527f67616d652063616e74206265207374617274656420616c7265616479000000006044820152606401620001a2565b60186000600f54600162000215919062000746565b815260208082019290925260409081016000908120818052835281812090925290206001015415620002965760405162461bcd60e51b815260206004820152602360248201527f54686973206c6f6f6b73206c696b65206120726f756e6420657869737473206860448201526265726560e81b6064820152608401620001a2565b50565b620002a4816200014b565b600f8054906000620002b683620007b5565b9091555050600160115560158190556016819055620002d58162000384565b50620002966200039e565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001475760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003403390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806200039283620004a6565b60108190559392505050565b6000620003d86002620003c4601154601654620005dc60201b620013e11790919060201c565b620005dc60201b620013e11790919060201c565b60165490915060006001815b8481116200049f576200041281604051806040016040528086815260200185815250620005f160201b60201c565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a36200047982600162000746565b92506200048883600162000746565b9150806200049681620007b5565b915050620003e4565b5050505050565b600080600160801b8310620004ca57608092831c92620004c7908262000746565b90505b680100000000000000008310620004f057604092831c92620004ed908262000746565b90505b64010000000083106200051257602092831c926200050f908262000746565b90505b6201000083106200053257601092831c926200052f908262000746565b90505b61010083106200055157600892831c926200054e908262000746565b90505b601083106200056f57600492831c926200056c908262000746565b90505b600483106200058d57600292831c926200058a908262000746565b90505b60028310620005ab57600192831c92620005a8908262000746565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b6000620005ea828462000761565b9392505050565b600f5460009081526018602090815260408083206011548452825280832085845290915290206200062590826002620006b9565b505050565b828054620006389062000778565b90600052602060002090601f0160209004810192826200065c5760008555620006a7565b82601f106200067757805160ff1916838001178555620006a7565b82800160010185558215620006a7579182015b82811115620006a75782518255916020019190600101906200068a565b50620006b5929150620006e9565b5090565b8260028101928215620006a75791602002820182811115620006a75782518255916020019190600101906200068a565b5b80821115620006b55760008155600101620006ea565b60008060006060848603121562000715578283fd5b83516020850151604086015191945092506001600160a01b03811681146200073b578182fd5b809150509250925092565b600082198211156200075c576200075c620007ea565b500190565b60008262000773576200077362000800565b500490565b6002810460018216806200078d57607f821691505b60208210811415620007af57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620007cc57620007cc620007ea565b5060010190565b600082620007e557620007e562000800565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6133e280620008266000396000f3fe60806040523480156200001157600080fd5b5060043610620002445760003560e01c806375b5e9241162000141578063b88d4fde11620000c3578063b88d4fde1462000595578063bd2f135a14620005ac578063c87b56dd14620005c3578063c892fffc14620005da578063d0def52114620005f1578063d53913931462000608578063d547741f146200061f578063d65ab5f21462000636578063dc31beb61462000640578063de5912bd146200064a578063e985e9c5146200065e5762000244565b806375b5e924146200048a5780637d659a4814620004945780638eb80eb514620004b757806391d1485414620004dd57806395d89b4114620004f457806398b9b23614620004fe5780639ce9c7b61462000521578063a217fddf146200054d578063a22cb4651462000556578063b55b8ceb146200056d5762000244565b80632f2ff15d11620001cb5780632f2ff15d146200039057806336568abe14620003a757806342842e0e14620003be57806348b336cb14620003d55780635456bf13146200040157806359360c0414620004185780635e6894fc146200042f5780636352211e14620004525780636b4d1f0c146200046957806370a0823114620004735762000244565b806301ffc9a71462000249578063056524ea146200027557806306fdde0314620002ac578063081812fc14620002c5578063095ea7b314620002f55780630bb78ec1146200030e5780631095b4df146200032557806323b872dd146200033c578063248a9ca31462000353578063272264d31462000379575b600080fd5b620002606200025a36600462002299565b62000675565b60405190151581526020015b60405180910390f35b6200029d7f2a0f2a070eb463d9807435b07a6dbfeede905dd039b03efc105c79daf0c8434881565b6040519081526020016200026c565b620002b66200068a565b6040516200026c919062002468565b620002dc620002d63660046200225b565b62000725565b6040516001600160a01b0390911681526020016200026c565b6200030c620003063660046200222f565b620007b5565b005b620002b66200031f3660046200225b565b620008d1565b6200029d620003363660046200225b565b62000973565b6200030c6200034d366004620020df565b6200098d565b6200029d620003643660046200225b565b60009081526006602052604090206001015490565b6200029d6200038a3660046200225b565b620009c5565b6200030c620003a136600462002274565b620009eb565b6200030c620003b836600462002274565b62000a16565b6200030c620003cf366004620020df565b62000a98565b620002dc620003e63660046200225b565b601a602052600090815260409020546001600160a01b031681565b6200029d620004123660046200225b565b62000ab5565b620002dc62000429366004620022d7565b62000be6565b6200029d620004403660046200225b565b60096020526000908152604090205481565b620002dc620004633660046200225b565b62000d1e565b6200030c62000d97565b6200029d620004843660046200208b565b62000e87565b6200030c62000f10565b6200029d620004a53660046200208b565b600d6020526000908152604090205481565b62000260620004c83660046200208b565b60196020526000908152604090205460ff1681565b62000260620004ee36600462002274565b62000f26565b620002b662000f51565b6200029d6200050f3660046200225b565b600e6020526000908152604090205481565b620002dc620005323660046200225b565b600c602052600090815260409020546001600160a01b031681565b6200029d600081565b6200030c62000567366004620021a0565b62000f62565b6200029d7fa9c8c3e87c79e0da85cf2d427e2102d48db1379529b967d6604d431f1437723f81565b6200030c620005a63660046200211f565b62001033565b6200029d620005bd36600462002338565b62001072565b620002b6620005d43660046200225b565b620010b2565b62000260620005eb3660046200208b565b62001185565b6200029d62000602366004620021de565b6200125f565b6200029d6000805160206200338d83398151915281565b6200030c6200063036600462002274565b6200135d565b6200030c62001387565b6200029d60105481565b6200030c6200065b3660046200225b565b50565b620002606200066f366004620020a8565b620013b3565b60006200068282620013ef565b90505b919050565b6060600080546200069b906200261f565b80601f0160208091040260200160405190810160405280929190818152602001828054620006c9906200261f565b80156200071a5780601f10620006ee576101008083540402835291602001916200071a565b820191906000526020600020905b815481529060010190602001808311620006fc57829003601f168201915b505050505090505b90565b6000620007328262001417565b620007995760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000620007c28262000d1e565b9050806001600160a01b0316836001600160a01b03161415620008325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840162000790565b336001600160a01b03821614806200085157506200085181336200066f565b620008c05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840162000790565b620008cc838362001434565b505050565b60086020526000908152604090208054620008ec906200261f565b80601f01602080910402602001604051908101604052809291908181526020018280546200091a906200261f565b80156200096b5780601f106200093f576101008083540402835291602001916200096b565b820191906000526020600020905b8154815290600101906020018083116200094d57829003601f168201915b505050505081565b600080620009818362000ab5565b60108190559392505050565b620009993382620014a4565b620009b85760405162461bcd60e51b81526004016200079090620024fc565b620008cc8383836200157a565b600080620009d5600143620025bc565b409050620009e4818462001726565b9392505050565b60008281526006602052604090206001015462000a0a81335b62001734565b620008cc8383620017a3565b6001600160a01b038116331462000a885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000790565b62000a9482826200182d565b5050565b620008cc8383836040518060200160405280600081525062001033565b600080600160801b831062000ad957608092831c9262000ad6908262002568565b90505b600160401b831062000afa57604092831c9262000af7908262002568565b90505b640100000000831062000b1c57602092831c9262000b19908262002568565b90505b62010000831062000b3c57601092831c9262000b39908262002568565b90505b610100831062000b5b57600892831c9262000b58908262002568565b90505b6010831062000b7957600492831c9262000b76908262002568565b90505b6004831062000b9757600292831c9262000b94908262002568565b90505b6002831062000bb557600192831c9262000bb2908262002568565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b600062000bf4813362000f26565b62000c365760405162461bcd60e51b81526020600482015260116024820152702737ba103232b330bab63a1030b236b4b760791b604482015260640162000790565b600062000c4430856200125f565b600a5460405191925060009130916001600160a01b03169062000c679062001ef1565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000c9b573d6000803e3d6000fd5b50905081816001600160a01b03167fef9c0462f3702100d0fe56e120e5d1bad81b72afa45ef3a6fcd7b40e4e6d8b0660405160405180910390a36000828152600c6020818152604080842080546001600160a01b0319166001600160a01b0396871690811782558552600d83529084208690559490925290529054169392505050565b6000818152600260205260408120546001600160a01b031680620006825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840162000790565b600062000dbf600262000db8601154601654620013e190919063ffffffff16565b90620013e1565b60165490915060006001815b84811162000e805762000df38160405180604001604052808681526020018581525062001897565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a362000e5a82600162002568565b925062000e6983600162002568565b91508062000e77816200265c565b91505062000dcb565b5050505050565b60006001600160a01b03821662000ef45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000790565b506001600160a01b031660009081526003602052604090205490565b62000f1a620018cb565b62000f2457600080fd5b565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546200069b906200261f565b6001600160a01b03821633141562000fb95760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640162000790565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405162001027911515815260200190565b60405180910390a35050565b6200103f3383620014a4565b6200105e5760405162461bcd60e51b81526004016200079090620024fc565b6200106c8484848462001930565b50505050565b60186020528360005260406000206020528260005260406000206020528160005260406000208160028110620010a757600080fd5b015493508492505050565b6060620010bf8262001417565b620010de5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602052604081208054620010f9906200261f565b80601f016020809104026020016040519081016040528092919081815260200182805462001127906200261f565b8015620011785780601f106200114c5761010080835404028352916020019162001178565b820191906000526020600020905b8154815290600101906020018083116200115a57829003601f168201915b5093979650505050505050565b600062001191620018cb565b6200119b57600080fd5b60408051600481526024810182526020810180516001600160e01b031663bbf6061b60e01b179052905160009182916001600160a01b03861691620011e09162002398565b6000604051808303816000865af19150503d80600081146200121f576040519150601f19603f3d011682016040523d82523d6000602084013e62001224565b606091505b5091509150811562001258576000818060200190518101906200124891906200231f565b90506200125685826200196a565b505b5092915050565b60006200127c6000805160206200338d8339815191523362000f26565b620012d45760405162461bcd60e51b815260206004820152602160248201527f3732314d696e743a206163636f756e742069736e74204d696e74657220726f6c6044820152606560f81b606482015260840162000790565b620012e983620012e360075490565b620019ad565b620012fe620012f760075490565b8362001ae8565b60006200130a60075490565b90506200131b600780546001019055565b7f9e0bfaf38878aad3ebd19b8c8065288eb130f0499a7378363d4652515588ac9681846040516200134e9291906200254d565b60405180910390a19392505050565b6000828152600660205260409020600101546200137b813362000a04565b620008cc83836200182d565b60175460ff16156200139857600080fd5b436012556017805460ff1916600117905562000f2462000d97565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000620009e4828462002583565b60006001600160e01b03198216637965db0b60e01b1480620006825750620006828262001b8e565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906200146b8262000d1e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000620014b18262001417565b620015145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840162000790565b6000620015218362000d1e565b9050806001600160a01b0316846001600160a01b031614806200155f5750836001600160a01b0316620015548462000725565b6001600160a01b0316145b80620015725750620015728185620013b3565b949350505050565b826001600160a01b03166200158f8262000d1e565b6001600160a01b031614620015f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840162000790565b6001600160a01b0382166200165d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840162000790565b6200166a60008262001434565b6001600160a01b038316600090815260036020526040812080546001929062001695908490620025bc565b90915550506001600160a01b0382166000908152600360205260408120805460019290620016c590849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000620009e482846200267a565b62001740828262000f26565b62000a94576200175b816001600160a01b0316601462001be1565b6200176883602062001be1565b6040516020016200177b929190620023b6565b60408051601f198184030181529082905262461bcd60e51b8252620007909160040162002468565b620017af828262000f26565b62000a945760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620017e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001839828262000f26565b1562000a945760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600f546000908152601860209081526040808320601154845282528083208584529091529020620008cc9082600262001eff565b60175460009060ff16620018de57600080fd5b600060125443620018f09190620025bc565b9050601354811062001928576000601354826200190e91906200267a565b90506014548111620019265760019250505062000722565b505b600091505090565b6200193d8484846200157a565b6200194b8484848462001dd6565b6200106c5760405162461bcd60e51b815260040162000790906200247d565b6001600160a01b0382166000908152600d6020908152604080832054808452600e9092528220805491928492620019a390849062002568565b9091555050505050565b6001600160a01b03821662001a055760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000790565b62001a108162001417565b1562001a5f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000790565b6001600160a01b038216600090815260036020526040812080546001929062001a8a90849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b62001b036000805160206200338d8339815191523362000f26565b62001b435760405162461bcd60e51b815260206004820152600f60248201526e4e6f74204d696e74657220526f6c6560881b604482015260640162000790565b62001b4e8262001417565b62001b6d5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602090815260409091208251620008cc9284019062001f42565b60006001600160e01b031982166380ac58cd60e01b148062001bc057506001600160e01b03198216635b5e139f60e01b145b806200068257506301ffc9a760e01b6001600160e01b031983161462000682565b6060600062001bf28360026200259a565b62001bff90600262002568565b6001600160401b0381111562001c2557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562001c50576020820181803683370190505b509050600360fc1b8160008151811062001c7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001cb857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062001cde8460026200259a565b62001ceb90600162002568565b90505b600181111562001d85576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001d2f57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811062001d5457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362001d7d8162002605565b905062001cee565b508315620009e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000790565b60006001600160a01b0384163b1562001ee657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029062001e1d90339089908890889060040162002429565b602060405180830381600087803b15801562001e3857600080fd5b505af192505050801562001e6b575060408051601f3d908101601f1916820190925262001e6891810190620022b8565b60015b62001ecb573d80801562001e9c576040519150601f19603f3d011682016040523d82523d6000602084013e62001ea1565b606091505b50805162001ec35760405162461bcd60e51b815260040162000790906200247d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062001572565b506001949350505050565b610ca280620026eb83390190565b826002810192821562001f30579160200282015b8281111562001f3057825182559160200191906001019062001f13565b5062001f3e92915062001fbe565b5090565b82805462001f50906200261f565b90600052602060002090601f01602090048101928262001f74576000855562001f30565b82601f1062001f8f57805160ff191683800117855562001f30565b8280016001018555821562001f30579182018281111562001f3057825182559160200191906001019062001f13565b5b8082111562001f3e576000815560010162001fbf565b60006001600160401b038084111562001ff25762001ff2620026bd565b604051601f8501601f19908116603f011681019082821181831017156200201d576200201d620026bd565b816040528093508581528686860111156200203757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146200068557600080fd5b600082601f8301126200207a578081fd5b620009e48383356020850162001fd5565b6000602082840312156200209d578081fd5b620009e48262002051565b60008060408385031215620020bb578081fd5b620020c68362002051565b9150620020d66020840162002051565b90509250929050565b600080600060608486031215620020f4578081fd5b620020ff8462002051565b92506200210f6020850162002051565b9150604084013590509250925092565b6000806000806080858703121562002135578081fd5b620021408562002051565b9350620021506020860162002051565b92506040850135915060608501356001600160401b0381111562002172578182fd5b8501601f8101871362002183578182fd5b620021948782356020840162001fd5565b91505092959194509250565b60008060408385031215620021b3578182fd5b620021be8362002051565b915060208301358015158114620021d3578182fd5b809150509250929050565b60008060408385031215620021f1578182fd5b620021fc8362002051565b915060208301356001600160401b0381111562002217578182fd5b620022258582860162002069565b9150509250929050565b6000806040838503121562002242578182fd5b6200224d8362002051565b946020939093013593505050565b6000602082840312156200226d578081fd5b5035919050565b6000806040838503121562002287578182fd5b82359150620020d66020840162002051565b600060208284031215620022ab578081fd5b8135620009e481620026d3565b600060208284031215620022ca578081fd5b8151620009e481620026d3565b60008060408385031215620022ea578182fd5b82356001600160401b0381111562002300578283fd5b6200230e8582860162002069565b925050620020d66020840162002051565b60006020828403121562002331578081fd5b5051919050565b600080600080608085870312156200234e578182fd5b5050823594602084013594506040840135936060013592509050565b6000815180845262002384816020860160208601620025d6565b601f01601f19169290920160200192915050565b60008251620023ac818460208701620025d6565b9190910192915050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351620023ea816017850160208801620025d6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200241d816028840160208801620025d6565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906200245e908301846200236a565b9695505050505050565b600060208252620009e460208301846200236a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260139082015272139195081a5908191bdcd95b9d08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000838252604060208301526200157260408301846200236a565b600082198211156200257e576200257e62002691565b500190565b600082620025955762002595620026a7565b500490565b6000816000190483118215151615620025b757620025b762002691565b500290565b600082821015620025d157620025d162002691565b500390565b60005b83811015620025f3578181015183820152602001620025d9565b838111156200106c5750506000910152565b60008162002617576200261762002691565b506000190190565b6002810460018216806200263457607f821691505b602082108114156200265657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562002673576200267362002691565b5060010190565b6000826200268c576200268c620026a7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146200065b57600080fdfe608060405234801561001057600080fd5b50604051610ca2380380610ca283398101604081905261002f91610133565b61003a60003361006b565b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055610165565b6100758282610079565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610075576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b038116811461012e57600080fd5b919050565b60008060408385031215610145578182fd5b61014e83610117565b915061015c60208401610117565b90509250929050565b610b2e806101746000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806301ffc9a71461009e578063248a9ca3146100c65780632a3ac08c146100f75780632f2ff15d1461011e57806336568abe1461013357806391d1485414610146578063a217fddf14610159578063bbf6061b14610161578063c3fe3e2814610169578063d547741f14610189578063f4b9fa751461019c575b600080fd5b6100b16100ac366004610955565b6101af565b60405190151581526020015b60405180910390f35b6100e96100d4366004610903565b60009081526020819052604090206001015490565b6040519081526020016100bd565b6100e97fe39604301a5df21de489c846135593d1f32826f514afa2544bdbe9ace2bfae4a81565b61013161012c36600461091b565b6101e6565b005b61013161014136600461091b565b610212565b6100b161015436600461091b565b610295565b6100e9600081565b6100e96102be565b60025461017c906001600160a01b031681565b6040516100bd9190610a04565b61013161019736600461091b565b610587565b60015461017c906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806101e057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461020381335b6105ad565b61020d8383610611565b505050565b6001600160a01b03811633146102875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102918282610695565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906102f3903090600401610a04565b60206040518083038186803b15801561030b57600080fd5b505afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061097d565b6001546002546040516370a0823160e01b81529293506001600160a01b039182169263095ea7b3929091169083906370a0823190610385903090600401610a04565b60206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d5919061097d565b6040518363ffffffff1660e01b81526004016103f2929190610a18565b602060405180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044491906108e3565b61044d57600080fd5b6001546002546040516370a0823160e01b81526001600160a01b039283169263a9059cbb92169083906370a082319061048a903090600401610a04565b60206040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da919061097d565b6040518363ffffffff1660e01b81526004016104f7929190610a18565b602060405180830381600087803b15801561051157600080fd5b505af1158015610525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054991906108e3565b506002546040516001600160a01b03909116907fbdd983d6baf07aab2a84779f0fc201c6bf84ab638ad825fa90e0e370f04c39df90600090a2905090565b6000828152602081905260409020600101546105a381336101fe565b61020d8383610695565b6105b78282610295565b610291576105cf816001600160a01b031660146106fa565b6105da8360206106fa565b6040516020016105eb929190610995565b60408051601f198184030181529082905262461bcd60e51b825261027e91600401610a31565b61061b8282610295565b610291576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61069f8282610295565b15610291576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610709836002610a7c565b610714906002610a64565b67ffffffffffffffff81111561073a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610764576020820181803683370190505b509050600360fc1b8160008151811061078d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107ca57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006107ee846002610a7c565b6107f9906001610a64565b90505b600181111561088d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083b57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061085f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361088681610acb565b90506107fc565b5083156108dc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161027e565b9392505050565b6000602082840312156108f4578081fd5b815180151581146108dc578182fd5b600060208284031215610914578081fd5b5035919050565b6000806040838503121561092d578081fd5b8235915060208301356001600160a01b038116811461094a578182fd5b809150509250929050565b600060208284031215610966578081fd5b81356001600160e01b0319811681146108dc578182fd5b60006020828403121561098e578081fd5b5051919050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b825283516109c7816017850160208801610a9b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516109f8816028840160208801610a9b565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610a50816040850160208701610a9b565b601f01601f19169190910160400192915050565b60008219821115610a7757610a77610ae2565b500190565b6000816000190483118215151615610a9657610a96610ae2565b500290565b60005b83811015610ab6578181015183820152602001610a9e565b83811115610ac5576000848401525b50505050565b600081610ada57610ada610ae2565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206a635ba3c15021e4b36dbf267f0d30ead7bde5f793d2f5eee41a499435a1038264736f6c634300080200339f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122064a4253755f81690a72d99ad9a07ee9f1fad8c0233f330c178ec25529533e95c64736f6c63430008020033",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See {IERC721Metadata-tokenURI}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:2906:153",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:153",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "129:317:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "175:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "184:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "192:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "177:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "177:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "177:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "150:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "159:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "146:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "146:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "171:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "142:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "142:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "139:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "210:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "226:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "220:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "220:16:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "210:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "245:35:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "265:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "276:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "261:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "261:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "255:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "255:25:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "245:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "289:38:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "312:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "323:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "308:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "308:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "302:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "302:25:153"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "293:5:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "390:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "399:6:153"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "407:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "392:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "392:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "392:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "349:5:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "360:5:153"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "375:3:153",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "380:1:153",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "371:3:153"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "371:11:153"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "384:1:153",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "367:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "367:19:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "356:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "356:31:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "346:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "346:42:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "339:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "339:50:153"
                          },
                          "nodeType": "YulIf",
                          "src": "336:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "425:15:153",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "435:5:153"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "425:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "79:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "90:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "102:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "110:6:153",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "118:6:153",
                        "type": ""
                      }
                    ],
                    "src": "14:432:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "625:178:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "642:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "653:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "635:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "635:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "635:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "676:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "687:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "672:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "672:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "692:2:153",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "665:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "665:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "665:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "715:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "726:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "711:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "711:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "731:30:153",
                                "type": "",
                                "value": "game cant be started already"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "704:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "704:58:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "704:58:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "771:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "783:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "794:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "779:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "779:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "771:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2bbc850f76ccb46ca65ce106911bd4b1e8014c7725bdf22395cd73200688693e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "602:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "616:4:153",
                        "type": ""
                      }
                    ],
                    "src": "451:352:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "982:172:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "999:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1010:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "992:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "992:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "992:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1033:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1044:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1029:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1029:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1049:2:153",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1022:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1022:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1022:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1072:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1083:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1068:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1068:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1088:24:153",
                                "type": "",
                                "value": "this isnt a power of 2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1061:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1061:52:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1061:52:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1122:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1134:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1145:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1130:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1130:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1122:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_db01382dbdef9328e45b247b1289fb12dde23333369a6c1f4d09fd217f0b3d11__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "959:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "973:4:153",
                        "type": ""
                      }
                    ],
                    "src": "808:346:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1333:225:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1350:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1361:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1343:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1343:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1343:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1384:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1395:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1380:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1380:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1400:2:153",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1373:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1373:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1373:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1423:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1434:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1419:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1419:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1439:34:153",
                                "type": "",
                                "value": "This looks like a round exists h"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1412:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1412:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1412:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1494:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1505:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1510:5:153",
                                "type": "",
                                "value": "ere"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1483:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1483:33:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1483:33:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1525:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1537:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1548:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1533:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1533:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1525:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f056a8afa6b57cb7618e0095920167f49e981d4ad4a32869c2c3cfdad4f75652__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1310:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1324:4:153",
                        "type": ""
                      }
                    ],
                    "src": "1159:399:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1664:76:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1674:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1686:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1697:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1682:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1682:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1674:4:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1716:9:153"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1727:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1709:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1709:25:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1709:25:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1633:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1644:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1655:4:153",
                        "type": ""
                      }
                    ],
                    "src": "1563:177:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1793:80:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1820:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1822:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1822:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1822:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1809:1:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "1816:1:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1812:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1812:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1806:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1806:13:153"
                          },
                          "nodeType": "YulIf",
                          "src": "1803:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1851:16:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1862:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1865:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1858:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1858:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "1851:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "1776:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "1779:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "1785:3:153",
                        "type": ""
                      }
                    ],
                    "src": "1745:128:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1924:74:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1947:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "1949:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1949:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1949:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1944:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1937:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1937:9:153"
                          },
                          "nodeType": "YulIf",
                          "src": "1934:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1978:14:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1987:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1990:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "1983:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1983:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "1978:1:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "1909:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "1912:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "1918:1:153",
                        "type": ""
                      }
                    ],
                    "src": "1878:120:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2058:325:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2068:22:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2082:4:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2088:1:153",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "2078:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2078:12:153"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2068:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2099:38:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2129:4:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2135:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2125:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2125:12:153"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "2103:18:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2176:31:153",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2178:27:153",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2192:6:153"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2200:4:153",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2188:3:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2188:17:153"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2178:6:153"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2156:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2149:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2149:26:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2146:2:153"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2266:111:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2287:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2294:3:153",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2299:10:153",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2290:3:153"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2290:20:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2280:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2280:31:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2280:31:153"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2331:1:153",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2334:4:153",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2324:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2324:15:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2324:15:153"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2359:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2362:4:153",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2352:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2352:15:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2352:15:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2222:18:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2245:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2253:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2242:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2242:14:153"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2219:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2219:38:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2216:2:153"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2038:4:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2047:6:153",
                        "type": ""
                      }
                    ],
                    "src": "2003:380:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2435:88:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2466:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2468:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2468:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2468:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2451:5:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2462:1:153",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "2458:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2458:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2448:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2448:17:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2445:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2497:20:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2508:5:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2515:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2504:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2504:13:153"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "2497:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2417:5:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "2427:3:153",
                        "type": ""
                      }
                    ],
                    "src": "2388:135:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2566:74:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2589:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "2591:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2591:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2591:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2586:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2579:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2579:9:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2576:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2620:14:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2629:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2632:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "2625:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2625:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "2620:1:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "2551:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "2554:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "2560:1:153",
                        "type": ""
                      }
                    ],
                    "src": "2528:112:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2677:95:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2694:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2701:3:153",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2706:10:153",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2697:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2697:20:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2687:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2687:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2687:31:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2734:1:153",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2737:4:153",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2727:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2727:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2727:15:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2758:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2761:4:153",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2751:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2751:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2751:15:153"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2645:127:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2809:95:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2826:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2833:3:153",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2838:10:153",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2829:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2829:20:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2819:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2819:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2819:31:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2866:1:153",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2869:4:153",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2859:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2859:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2859:15:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2890:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2893:4:153",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2883:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2883:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2883:15:153"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2777:127:153"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value2, value2) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2bbc850f76ccb46ca65ce106911bd4b1e8014c7725bdf22395cd73200688693e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"game cant be started already\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_db01382dbdef9328e45b247b1289fb12dde23333369a6c1f4d09fd217f0b3d11__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"this isnt a power of 2\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f056a8afa6b57cb7618e0095920167f49e981d4ad4a32869c2c3cfdad4f75652__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"This looks like a round exists h\")\n        mstore(add(headStart, 96), \"ere\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}",
              "id": 153,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040526000600f81905560108190556107d060135560646014556016556017805460ff191690553480156200003557600080fd5b5060405162003c0838038062003c08833981016040819052620000589162000700565b604080518082018252601181527011da5d18dbda5b8811185b98d948139195607a1b60208083019182528351808501909452600484526311d2551160e21b908401528151919291620000ad916000916200062a565b508051620000c39060019060208401906200062a565b50620000d5915060009050336200013b565b620001017f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200013b565b600a80546001600160a01b0319166001600160a01b03831617905562000127836200014b565b620001328362000299565b50505062000816565b620001478282620002e0565b5050565b62000158600282620007d3565b15620001ab5760405162461bcd60e51b815260206004820152601660248201527f746869732069736e74206120706f776572206f6620320000000000000000000060448201526064015b60405180910390fd5b60175460ff1615620002005760405162461bcd60e51b815260206004820152601c60248201527f67616d652063616e74206265207374617274656420616c7265616479000000006044820152606401620001a2565b60186000600f54600162000215919062000746565b815260208082019290925260409081016000908120818052835281812090925290206001015415620002965760405162461bcd60e51b815260206004820152602360248201527f54686973206c6f6f6b73206c696b65206120726f756e6420657869737473206860448201526265726560e81b6064820152608401620001a2565b50565b620002a4816200014b565b600f8054906000620002b683620007b5565b9091555050600160115560158190556016819055620002d58162000384565b50620002966200039e565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001475760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003403390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806200039283620004a6565b60108190559392505050565b6000620003d86002620003c4601154601654620005dc60201b620013e11790919060201c565b620005dc60201b620013e11790919060201c565b60165490915060006001815b8481116200049f576200041281604051806040016040528086815260200185815250620005f160201b60201c565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a36200047982600162000746565b92506200048883600162000746565b9150806200049681620007b5565b915050620003e4565b5050505050565b600080600160801b8310620004ca57608092831c92620004c7908262000746565b90505b680100000000000000008310620004f057604092831c92620004ed908262000746565b90505b64010000000083106200051257602092831c926200050f908262000746565b90505b6201000083106200053257601092831c926200052f908262000746565b90505b61010083106200055157600892831c926200054e908262000746565b90505b601083106200056f57600492831c926200056c908262000746565b90505b600483106200058d57600292831c926200058a908262000746565b90505b60028310620005ab57600192831c92620005a8908262000746565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b6000620005ea828462000761565b9392505050565b600f5460009081526018602090815260408083206011548452825280832085845290915290206200062590826002620006b9565b505050565b828054620006389062000778565b90600052602060002090601f0160209004810192826200065c5760008555620006a7565b82601f106200067757805160ff1916838001178555620006a7565b82800160010185558215620006a7579182015b82811115620006a75782518255916020019190600101906200068a565b50620006b5929150620006e9565b5090565b8260028101928215620006a75791602002820182811115620006a75782518255916020019190600101906200068a565b5b80821115620006b55760008155600101620006ea565b60008060006060848603121562000715578283fd5b83516020850151604086015191945092506001600160a01b03811681146200073b578182fd5b809150509250925092565b600082198211156200075c576200075c620007ea565b500190565b60008262000773576200077362000800565b500490565b6002810460018216806200078d57607f821691505b60208210811415620007af57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620007cc57620007cc620007ea565b5060010190565b600082620007e557620007e562000800565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6133e280620008266000396000f3fe60806040523480156200001157600080fd5b5060043610620002445760003560e01c806375b5e9241162000141578063b88d4fde11620000c3578063b88d4fde1462000595578063bd2f135a14620005ac578063c87b56dd14620005c3578063c892fffc14620005da578063d0def52114620005f1578063d53913931462000608578063d547741f146200061f578063d65ab5f21462000636578063dc31beb61462000640578063de5912bd146200064a578063e985e9c5146200065e5762000244565b806375b5e924146200048a5780637d659a4814620004945780638eb80eb514620004b757806391d1485414620004dd57806395d89b4114620004f457806398b9b23614620004fe5780639ce9c7b61462000521578063a217fddf146200054d578063a22cb4651462000556578063b55b8ceb146200056d5762000244565b80632f2ff15d11620001cb5780632f2ff15d146200039057806336568abe14620003a757806342842e0e14620003be57806348b336cb14620003d55780635456bf13146200040157806359360c0414620004185780635e6894fc146200042f5780636352211e14620004525780636b4d1f0c146200046957806370a0823114620004735762000244565b806301ffc9a71462000249578063056524ea146200027557806306fdde0314620002ac578063081812fc14620002c5578063095ea7b314620002f55780630bb78ec1146200030e5780631095b4df146200032557806323b872dd146200033c578063248a9ca31462000353578063272264d31462000379575b600080fd5b620002606200025a36600462002299565b62000675565b60405190151581526020015b60405180910390f35b6200029d7f2a0f2a070eb463d9807435b07a6dbfeede905dd039b03efc105c79daf0c8434881565b6040519081526020016200026c565b620002b66200068a565b6040516200026c919062002468565b620002dc620002d63660046200225b565b62000725565b6040516001600160a01b0390911681526020016200026c565b6200030c620003063660046200222f565b620007b5565b005b620002b66200031f3660046200225b565b620008d1565b6200029d620003363660046200225b565b62000973565b6200030c6200034d366004620020df565b6200098d565b6200029d620003643660046200225b565b60009081526006602052604090206001015490565b6200029d6200038a3660046200225b565b620009c5565b6200030c620003a136600462002274565b620009eb565b6200030c620003b836600462002274565b62000a16565b6200030c620003cf366004620020df565b62000a98565b620002dc620003e63660046200225b565b601a602052600090815260409020546001600160a01b031681565b6200029d620004123660046200225b565b62000ab5565b620002dc62000429366004620022d7565b62000be6565b6200029d620004403660046200225b565b60096020526000908152604090205481565b620002dc620004633660046200225b565b62000d1e565b6200030c62000d97565b6200029d620004843660046200208b565b62000e87565b6200030c62000f10565b6200029d620004a53660046200208b565b600d6020526000908152604090205481565b62000260620004c83660046200208b565b60196020526000908152604090205460ff1681565b62000260620004ee36600462002274565b62000f26565b620002b662000f51565b6200029d6200050f3660046200225b565b600e6020526000908152604090205481565b620002dc620005323660046200225b565b600c602052600090815260409020546001600160a01b031681565b6200029d600081565b6200030c62000567366004620021a0565b62000f62565b6200029d7fa9c8c3e87c79e0da85cf2d427e2102d48db1379529b967d6604d431f1437723f81565b6200030c620005a63660046200211f565b62001033565b6200029d620005bd36600462002338565b62001072565b620002b6620005d43660046200225b565b620010b2565b62000260620005eb3660046200208b565b62001185565b6200029d62000602366004620021de565b6200125f565b6200029d6000805160206200338d83398151915281565b6200030c6200063036600462002274565b6200135d565b6200030c62001387565b6200029d60105481565b6200030c6200065b3660046200225b565b50565b620002606200066f366004620020a8565b620013b3565b60006200068282620013ef565b90505b919050565b6060600080546200069b906200261f565b80601f0160208091040260200160405190810160405280929190818152602001828054620006c9906200261f565b80156200071a5780601f10620006ee576101008083540402835291602001916200071a565b820191906000526020600020905b815481529060010190602001808311620006fc57829003601f168201915b505050505090505b90565b6000620007328262001417565b620007995760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000620007c28262000d1e565b9050806001600160a01b0316836001600160a01b03161415620008325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840162000790565b336001600160a01b03821614806200085157506200085181336200066f565b620008c05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840162000790565b620008cc838362001434565b505050565b60086020526000908152604090208054620008ec906200261f565b80601f01602080910402602001604051908101604052809291908181526020018280546200091a906200261f565b80156200096b5780601f106200093f576101008083540402835291602001916200096b565b820191906000526020600020905b8154815290600101906020018083116200094d57829003601f168201915b505050505081565b600080620009818362000ab5565b60108190559392505050565b620009993382620014a4565b620009b85760405162461bcd60e51b81526004016200079090620024fc565b620008cc8383836200157a565b600080620009d5600143620025bc565b409050620009e4818462001726565b9392505050565b60008281526006602052604090206001015462000a0a81335b62001734565b620008cc8383620017a3565b6001600160a01b038116331462000a885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000790565b62000a9482826200182d565b5050565b620008cc8383836040518060200160405280600081525062001033565b600080600160801b831062000ad957608092831c9262000ad6908262002568565b90505b600160401b831062000afa57604092831c9262000af7908262002568565b90505b640100000000831062000b1c57602092831c9262000b19908262002568565b90505b62010000831062000b3c57601092831c9262000b39908262002568565b90505b610100831062000b5b57600892831c9262000b58908262002568565b90505b6010831062000b7957600492831c9262000b76908262002568565b90505b6004831062000b9757600292831c9262000b94908262002568565b90505b6002831062000bb557600192831c9262000bb2908262002568565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b600062000bf4813362000f26565b62000c365760405162461bcd60e51b81526020600482015260116024820152702737ba103232b330bab63a1030b236b4b760791b604482015260640162000790565b600062000c4430856200125f565b600a5460405191925060009130916001600160a01b03169062000c679062001ef1565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000c9b573d6000803e3d6000fd5b50905081816001600160a01b03167fef9c0462f3702100d0fe56e120e5d1bad81b72afa45ef3a6fcd7b40e4e6d8b0660405160405180910390a36000828152600c6020818152604080842080546001600160a01b0319166001600160a01b0396871690811782558552600d83529084208690559490925290529054169392505050565b6000818152600260205260408120546001600160a01b031680620006825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840162000790565b600062000dbf600262000db8601154601654620013e190919063ffffffff16565b90620013e1565b60165490915060006001815b84811162000e805762000df38160405180604001604052808681526020018581525062001897565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a362000e5a82600162002568565b925062000e6983600162002568565b91508062000e77816200265c565b91505062000dcb565b5050505050565b60006001600160a01b03821662000ef45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000790565b506001600160a01b031660009081526003602052604090205490565b62000f1a620018cb565b62000f2457600080fd5b565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546200069b906200261f565b6001600160a01b03821633141562000fb95760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640162000790565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405162001027911515815260200190565b60405180910390a35050565b6200103f3383620014a4565b6200105e5760405162461bcd60e51b81526004016200079090620024fc565b6200106c8484848462001930565b50505050565b60186020528360005260406000206020528260005260406000206020528160005260406000208160028110620010a757600080fd5b015493508492505050565b6060620010bf8262001417565b620010de5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602052604081208054620010f9906200261f565b80601f016020809104026020016040519081016040528092919081815260200182805462001127906200261f565b8015620011785780601f106200114c5761010080835404028352916020019162001178565b820191906000526020600020905b8154815290600101906020018083116200115a57829003601f168201915b5093979650505050505050565b600062001191620018cb565b6200119b57600080fd5b60408051600481526024810182526020810180516001600160e01b031663bbf6061b60e01b179052905160009182916001600160a01b03861691620011e09162002398565b6000604051808303816000865af19150503d80600081146200121f576040519150601f19603f3d011682016040523d82523d6000602084013e62001224565b606091505b5091509150811562001258576000818060200190518101906200124891906200231f565b90506200125685826200196a565b505b5092915050565b60006200127c6000805160206200338d8339815191523362000f26565b620012d45760405162461bcd60e51b815260206004820152602160248201527f3732314d696e743a206163636f756e742069736e74204d696e74657220726f6c6044820152606560f81b606482015260840162000790565b620012e983620012e360075490565b620019ad565b620012fe620012f760075490565b8362001ae8565b60006200130a60075490565b90506200131b600780546001019055565b7f9e0bfaf38878aad3ebd19b8c8065288eb130f0499a7378363d4652515588ac9681846040516200134e9291906200254d565b60405180910390a19392505050565b6000828152600660205260409020600101546200137b813362000a04565b620008cc83836200182d565b60175460ff16156200139857600080fd5b436012556017805460ff1916600117905562000f2462000d97565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000620009e4828462002583565b60006001600160e01b03198216637965db0b60e01b1480620006825750620006828262001b8e565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906200146b8262000d1e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000620014b18262001417565b620015145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840162000790565b6000620015218362000d1e565b9050806001600160a01b0316846001600160a01b031614806200155f5750836001600160a01b0316620015548462000725565b6001600160a01b0316145b80620015725750620015728185620013b3565b949350505050565b826001600160a01b03166200158f8262000d1e565b6001600160a01b031614620015f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840162000790565b6001600160a01b0382166200165d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840162000790565b6200166a60008262001434565b6001600160a01b038316600090815260036020526040812080546001929062001695908490620025bc565b90915550506001600160a01b0382166000908152600360205260408120805460019290620016c590849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000620009e482846200267a565b62001740828262000f26565b62000a94576200175b816001600160a01b0316601462001be1565b6200176883602062001be1565b6040516020016200177b929190620023b6565b60408051601f198184030181529082905262461bcd60e51b8252620007909160040162002468565b620017af828262000f26565b62000a945760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620017e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001839828262000f26565b1562000a945760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600f546000908152601860209081526040808320601154845282528083208584529091529020620008cc9082600262001eff565b60175460009060ff16620018de57600080fd5b600060125443620018f09190620025bc565b9050601354811062001928576000601354826200190e91906200267a565b90506014548111620019265760019250505062000722565b505b600091505090565b6200193d8484846200157a565b6200194b8484848462001dd6565b6200106c5760405162461bcd60e51b815260040162000790906200247d565b6001600160a01b0382166000908152600d6020908152604080832054808452600e9092528220805491928492620019a390849062002568565b9091555050505050565b6001600160a01b03821662001a055760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000790565b62001a108162001417565b1562001a5f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000790565b6001600160a01b038216600090815260036020526040812080546001929062001a8a90849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b62001b036000805160206200338d8339815191523362000f26565b62001b435760405162461bcd60e51b815260206004820152600f60248201526e4e6f74204d696e74657220526f6c6560881b604482015260640162000790565b62001b4e8262001417565b62001b6d5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602090815260409091208251620008cc9284019062001f42565b60006001600160e01b031982166380ac58cd60e01b148062001bc057506001600160e01b03198216635b5e139f60e01b145b806200068257506301ffc9a760e01b6001600160e01b031983161462000682565b6060600062001bf28360026200259a565b62001bff90600262002568565b6001600160401b0381111562001c2557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562001c50576020820181803683370190505b509050600360fc1b8160008151811062001c7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001cb857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062001cde8460026200259a565b62001ceb90600162002568565b90505b600181111562001d85576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001d2f57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811062001d5457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362001d7d8162002605565b905062001cee565b508315620009e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000790565b60006001600160a01b0384163b1562001ee657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029062001e1d90339089908890889060040162002429565b602060405180830381600087803b15801562001e3857600080fd5b505af192505050801562001e6b575060408051601f3d908101601f1916820190925262001e6891810190620022b8565b60015b62001ecb573d80801562001e9c576040519150601f19603f3d011682016040523d82523d6000602084013e62001ea1565b606091505b50805162001ec35760405162461bcd60e51b815260040162000790906200247d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062001572565b506001949350505050565b610ca280620026eb83390190565b826002810192821562001f30579160200282015b8281111562001f3057825182559160200191906001019062001f13565b5062001f3e92915062001fbe565b5090565b82805462001f50906200261f565b90600052602060002090601f01602090048101928262001f74576000855562001f30565b82601f1062001f8f57805160ff191683800117855562001f30565b8280016001018555821562001f30579182018281111562001f3057825182559160200191906001019062001f13565b5b8082111562001f3e576000815560010162001fbf565b60006001600160401b038084111562001ff25762001ff2620026bd565b604051601f8501601f19908116603f011681019082821181831017156200201d576200201d620026bd565b816040528093508581528686860111156200203757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146200068557600080fd5b600082601f8301126200207a578081fd5b620009e48383356020850162001fd5565b6000602082840312156200209d578081fd5b620009e48262002051565b60008060408385031215620020bb578081fd5b620020c68362002051565b9150620020d66020840162002051565b90509250929050565b600080600060608486031215620020f4578081fd5b620020ff8462002051565b92506200210f6020850162002051565b9150604084013590509250925092565b6000806000806080858703121562002135578081fd5b620021408562002051565b9350620021506020860162002051565b92506040850135915060608501356001600160401b0381111562002172578182fd5b8501601f8101871362002183578182fd5b620021948782356020840162001fd5565b91505092959194509250565b60008060408385031215620021b3578182fd5b620021be8362002051565b915060208301358015158114620021d3578182fd5b809150509250929050565b60008060408385031215620021f1578182fd5b620021fc8362002051565b915060208301356001600160401b0381111562002217578182fd5b620022258582860162002069565b9150509250929050565b6000806040838503121562002242578182fd5b6200224d8362002051565b946020939093013593505050565b6000602082840312156200226d578081fd5b5035919050565b6000806040838503121562002287578182fd5b82359150620020d66020840162002051565b600060208284031215620022ab578081fd5b8135620009e481620026d3565b600060208284031215620022ca578081fd5b8151620009e481620026d3565b60008060408385031215620022ea578182fd5b82356001600160401b0381111562002300578283fd5b6200230e8582860162002069565b925050620020d66020840162002051565b60006020828403121562002331578081fd5b5051919050565b600080600080608085870312156200234e578182fd5b5050823594602084013594506040840135936060013592509050565b6000815180845262002384816020860160208601620025d6565b601f01601f19169290920160200192915050565b60008251620023ac818460208701620025d6565b9190910192915050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351620023ea816017850160208801620025d6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200241d816028840160208801620025d6565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906200245e908301846200236a565b9695505050505050565b600060208252620009e460208301846200236a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260139082015272139195081a5908191bdcd95b9d08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000838252604060208301526200157260408301846200236a565b600082198211156200257e576200257e62002691565b500190565b600082620025955762002595620026a7565b500490565b6000816000190483118215151615620025b757620025b762002691565b500290565b600082821015620025d157620025d162002691565b500390565b60005b83811015620025f3578181015183820152602001620025d9565b838111156200106c5750506000910152565b60008162002617576200261762002691565b506000190190565b6002810460018216806200263457607f821691505b602082108114156200265657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562002673576200267362002691565b5060010190565b6000826200268c576200268c620026a7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146200065b57600080fdfe608060405234801561001057600080fd5b50604051610ca2380380610ca283398101604081905261002f91610133565b61003a60003361006b565b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055610165565b6100758282610079565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610075576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b038116811461012e57600080fd5b919050565b60008060408385031215610145578182fd5b61014e83610117565b915061015c60208401610117565b90509250929050565b610b2e806101746000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806301ffc9a71461009e578063248a9ca3146100c65780632a3ac08c146100f75780632f2ff15d1461011e57806336568abe1461013357806391d1485414610146578063a217fddf14610159578063bbf6061b14610161578063c3fe3e2814610169578063d547741f14610189578063f4b9fa751461019c575b600080fd5b6100b16100ac366004610955565b6101af565b60405190151581526020015b60405180910390f35b6100e96100d4366004610903565b60009081526020819052604090206001015490565b6040519081526020016100bd565b6100e97fe39604301a5df21de489c846135593d1f32826f514afa2544bdbe9ace2bfae4a81565b61013161012c36600461091b565b6101e6565b005b61013161014136600461091b565b610212565b6100b161015436600461091b565b610295565b6100e9600081565b6100e96102be565b60025461017c906001600160a01b031681565b6040516100bd9190610a04565b61013161019736600461091b565b610587565b60015461017c906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806101e057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461020381335b6105ad565b61020d8383610611565b505050565b6001600160a01b03811633146102875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102918282610695565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906102f3903090600401610a04565b60206040518083038186803b15801561030b57600080fd5b505afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061097d565b6001546002546040516370a0823160e01b81529293506001600160a01b039182169263095ea7b3929091169083906370a0823190610385903090600401610a04565b60206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d5919061097d565b6040518363ffffffff1660e01b81526004016103f2929190610a18565b602060405180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044491906108e3565b61044d57600080fd5b6001546002546040516370a0823160e01b81526001600160a01b039283169263a9059cbb92169083906370a082319061048a903090600401610a04565b60206040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da919061097d565b6040518363ffffffff1660e01b81526004016104f7929190610a18565b602060405180830381600087803b15801561051157600080fd5b505af1158015610525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054991906108e3565b506002546040516001600160a01b03909116907fbdd983d6baf07aab2a84779f0fc201c6bf84ab638ad825fa90e0e370f04c39df90600090a2905090565b6000828152602081905260409020600101546105a381336101fe565b61020d8383610695565b6105b78282610295565b610291576105cf816001600160a01b031660146106fa565b6105da8360206106fa565b6040516020016105eb929190610995565b60408051601f198184030181529082905262461bcd60e51b825261027e91600401610a31565b61061b8282610295565b610291576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61069f8282610295565b15610291576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610709836002610a7c565b610714906002610a64565b67ffffffffffffffff81111561073a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610764576020820181803683370190505b509050600360fc1b8160008151811061078d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107ca57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006107ee846002610a7c565b6107f9906001610a64565b90505b600181111561088d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083b57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061085f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361088681610acb565b90506107fc565b5083156108dc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161027e565b9392505050565b6000602082840312156108f4578081fd5b815180151581146108dc578182fd5b600060208284031215610914578081fd5b5035919050565b6000806040838503121561092d578081fd5b8235915060208301356001600160a01b038116811461094a578182fd5b809150509250929050565b600060208284031215610966578081fd5b81356001600160e01b0319811681146108dc578182fd5b60006020828403121561098e578081fd5b5051919050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b825283516109c7816017850160208801610a9b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516109f8816028840160208801610a9b565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610a50816040850160208701610a9b565b601f01601f19169190910160400192915050565b60008219821115610a7757610a77610ae2565b500190565b6000816000190483118215151615610a9657610a96610ae2565b500290565b60005b83811015610ab6578181015183820152602001610a9e565b83811115610ac5576000848401525b50505050565b600081610ada57610ada610ae2565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206a635ba3c15021e4b36dbf267f0d30ead7bde5f793d2f5eee41a499435a1038264736f6c634300080200339f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122064a4253755f81690a72d99ad9a07ee9f1fad8c0233f330c178ec25529533e95c64736f6c63430008020033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH2 0x7D0 PUSH1 0x13 SSTORE PUSH1 0x64 PUSH1 0x14 SSTORE PUSH1 0x16 SSTORE PUSH1 0x17 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3C08 CODESIZE SUB DUP1 PUSH3 0x3C08 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x58 SWAP2 PUSH3 0x700 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x11DA5D18DBDA5B8811185B98D948139195 PUSH1 0x7A SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x4 DUP5 MSTORE PUSH4 0x11D25511 PUSH1 0xE2 SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0xAD SWAP2 PUSH1 0x0 SWAP2 PUSH3 0x62A JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xC3 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x62A JUMP JUMPDEST POP PUSH3 0xD5 SWAP2 POP PUSH1 0x0 SWAP1 POP CALLER PUSH3 0x13B JUMP JUMPDEST PUSH3 0x101 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0x13B JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH3 0x127 DUP4 PUSH3 0x14B JUMP JUMPDEST PUSH3 0x132 DUP4 PUSH3 0x299 JUMP JUMPDEST POP POP POP PUSH3 0x816 JUMP JUMPDEST PUSH3 0x147 DUP3 DUP3 PUSH3 0x2E0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x158 PUSH1 0x2 DUP3 PUSH3 0x7D3 JUMP JUMPDEST ISZERO PUSH3 0x1AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746869732069736E74206120706F776572206F66203200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x17 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x200 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x67616D652063616E74206265207374617274656420616C726561647900000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x1A2 JUMP JUMPDEST PUSH1 0x18 PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0x1 PUSH3 0x215 SWAP2 SWAP1 PUSH3 0x746 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP2 DUP1 MSTORE DUP4 MSTORE DUP2 DUP2 KECCAK256 SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH3 0x296 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973206C6F6F6B73206C696B65206120726F756E64206578697374732068 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657265 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x1A2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x2A4 DUP2 PUSH3 0x14B JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH3 0x2B6 DUP4 PUSH3 0x7B5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x11 SSTORE PUSH1 0x15 DUP2 SWAP1 SSTORE PUSH1 0x16 DUP2 SWAP1 SSTORE PUSH3 0x2D5 DUP2 PUSH3 0x384 JUMP JUMPDEST POP PUSH3 0x296 PUSH3 0x39E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x147 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x340 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x392 DUP4 PUSH3 0x4A6 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D8 PUSH1 0x2 PUSH3 0x3C4 PUSH1 0x11 SLOAD PUSH1 0x16 SLOAD PUSH3 0x5DC PUSH1 0x20 SHL PUSH3 0x13E1 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x5DC PUSH1 0x20 SHL PUSH3 0x13E1 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x16 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP2 JUMPDEST DUP5 DUP2 GT PUSH3 0x49F JUMPI PUSH3 0x412 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH3 0x5F1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP7 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xBBCBAE1C475B8DE12A83D866F05A6C253F2AF9B5A7E299AA0D6F9FC50FB66E1E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x479 DUP3 PUSH1 0x1 PUSH3 0x746 JUMP JUMPDEST SWAP3 POP PUSH3 0x488 DUP4 PUSH1 0x1 PUSH3 0x746 JUMP JUMPDEST SWAP2 POP DUP1 PUSH3 0x496 DUP2 PUSH3 0x7B5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x3E4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x80 SHL DUP4 LT PUSH3 0x4CA JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 PUSH3 0x4C7 SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH9 0x10000000000000000 DUP4 LT PUSH3 0x4F0 JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 PUSH3 0x4ED SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP4 LT PUSH3 0x512 JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 PUSH3 0x50F SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH3 0x10000 DUP4 LT PUSH3 0x532 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 PUSH3 0x52F SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x100 DUP4 LT PUSH3 0x551 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 PUSH3 0x54E SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x10 DUP4 LT PUSH3 0x56F JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 PUSH3 0x56C SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x4 DUP4 LT PUSH3 0x58D JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 PUSH3 0x58A SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x2 DUP4 LT PUSH3 0x5AB JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 PUSH3 0x5A8 SWAP1 DUP3 PUSH3 0x746 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x909C57D5C6AC08245CF2A6DE3900E2B868513FA59099B92B27D8DB823D92DF9C SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5EA DUP3 DUP5 PUSH3 0x761 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x11 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH3 0x625 SWAP1 DUP3 PUSH1 0x2 PUSH3 0x6B9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x638 SWAP1 PUSH3 0x778 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x65C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x6A7 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x677 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x6A7 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x6A7 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x6A7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x68A JUMP JUMPDEST POP PUSH3 0x6B5 SWAP3 SWAP2 POP PUSH3 0x6E9 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x6A7 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD DUP3 DUP2 GT ISZERO PUSH3 0x6A7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x68A JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x6B5 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x6EA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x715 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x73B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x75C JUMPI PUSH3 0x75C PUSH3 0x7EA JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x773 JUMPI PUSH3 0x773 PUSH3 0x800 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x78D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7AF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x7CC JUMPI PUSH3 0x7CC PUSH3 0x7EA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x7E5 JUMPI PUSH3 0x7E5 PUSH3 0x800 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x33E2 DUP1 PUSH3 0x826 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x244 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B5E924 GT PUSH3 0x141 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH3 0xC3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH3 0x595 JUMPI DUP1 PUSH4 0xBD2F135A EQ PUSH3 0x5AC JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH3 0x5C3 JUMPI DUP1 PUSH4 0xC892FFFC EQ PUSH3 0x5DA JUMPI DUP1 PUSH4 0xD0DEF521 EQ PUSH3 0x5F1 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH3 0x608 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH3 0x61F JUMPI DUP1 PUSH4 0xD65AB5F2 EQ PUSH3 0x636 JUMPI DUP1 PUSH4 0xDC31BEB6 EQ PUSH3 0x640 JUMPI DUP1 PUSH4 0xDE5912BD EQ PUSH3 0x64A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH3 0x65E JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x75B5E924 EQ PUSH3 0x48A JUMPI DUP1 PUSH4 0x7D659A48 EQ PUSH3 0x494 JUMPI DUP1 PUSH4 0x8EB80EB5 EQ PUSH3 0x4B7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH3 0x4DD JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH3 0x4F4 JUMPI DUP1 PUSH4 0x98B9B236 EQ PUSH3 0x4FE JUMPI DUP1 PUSH4 0x9CE9C7B6 EQ PUSH3 0x521 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH3 0x54D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH3 0x556 JUMPI DUP1 PUSH4 0xB55B8CEB EQ PUSH3 0x56D JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH3 0x1CB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH3 0x390 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH3 0x3A7 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH3 0x3BE JUMPI DUP1 PUSH4 0x48B336CB EQ PUSH3 0x3D5 JUMPI DUP1 PUSH4 0x5456BF13 EQ PUSH3 0x401 JUMPI DUP1 PUSH4 0x59360C04 EQ PUSH3 0x418 JUMPI DUP1 PUSH4 0x5E6894FC EQ PUSH3 0x42F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH3 0x452 JUMPI DUP1 PUSH4 0x6B4D1F0C EQ PUSH3 0x469 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH3 0x473 JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x249 JUMPI DUP1 PUSH4 0x56524EA EQ PUSH3 0x275 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH3 0x2AC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH3 0x2C5 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH3 0x2F5 JUMPI DUP1 PUSH4 0xBB78EC1 EQ PUSH3 0x30E JUMPI DUP1 PUSH4 0x1095B4DF EQ PUSH3 0x325 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH3 0x33C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH3 0x353 JUMPI DUP1 PUSH4 0x272264D3 EQ PUSH3 0x379 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x260 PUSH3 0x25A CALLDATASIZE PUSH1 0x4 PUSH3 0x2299 JUMP JUMPDEST PUSH3 0x675 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x29D PUSH32 0x2A0F2A070EB463D9807435B07A6DBFEEDE905DD039B03EFC105C79DAF0C84348 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x26C JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0x68A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x26C SWAP2 SWAP1 PUSH3 0x2468 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x725 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x26C JUMP JUMPDEST PUSH3 0x30C PUSH3 0x306 CALLDATASIZE PUSH1 0x4 PUSH3 0x222F JUMP JUMPDEST PUSH3 0x7B5 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x2B6 PUSH3 0x31F CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x8D1 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x336 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x973 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x34D CALLDATASIZE PUSH1 0x4 PUSH3 0x20DF JUMP JUMPDEST PUSH3 0x98D JUMP JUMPDEST PUSH3 0x29D PUSH3 0x364 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x38A CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x9C5 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0x9EB JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3B8 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0xA16 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3CF CALLDATASIZE PUSH1 0x4 PUSH3 0x20DF JUMP JUMPDEST PUSH3 0xA98 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x412 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0xAB5 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x429 CALLDATASIZE PUSH1 0x4 PUSH3 0x22D7 JUMP JUMPDEST PUSH3 0xBE6 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x440 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x463 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0xD1E JUMP JUMPDEST PUSH3 0x30C PUSH3 0xD97 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x484 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH3 0xE87 JUMP JUMPDEST PUSH3 0x30C PUSH3 0xF10 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x4A5 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x4C8 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x4EE CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0xF51 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x50F CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x532 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x29D PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x567 CALLDATASIZE PUSH1 0x4 PUSH3 0x21A0 JUMP JUMPDEST PUSH3 0xF62 JUMP JUMPDEST PUSH3 0x29D PUSH32 0xA9C8C3E87C79E0DA85CF2D427E2102D48DB1379529B967D6604D431F1437723F DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH3 0x211F JUMP JUMPDEST PUSH3 0x1033 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x5BD CALLDATASIZE PUSH1 0x4 PUSH3 0x2338 JUMP JUMPDEST PUSH3 0x1072 JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0x5D4 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x10B2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x5EB CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH3 0x1185 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x602 CALLDATASIZE PUSH1 0x4 PUSH3 0x21DE JUMP JUMPDEST PUSH3 0x125F JUMP JUMPDEST PUSH3 0x29D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x630 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0x135D JUMP JUMPDEST PUSH3 0x30C PUSH3 0x1387 JUMP JUMPDEST PUSH3 0x29D PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x65B CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x260 PUSH3 0x66F CALLDATASIZE PUSH1 0x4 PUSH3 0x20A8 JUMP JUMPDEST PUSH3 0x13B3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x682 DUP3 PUSH3 0x13EF JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH3 0x69B SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x6C9 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x71A JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x6EE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x71A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x6FC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x732 DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x799 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x7C2 DUP3 PUSH3 0xD1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH3 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH3 0x851 JUMPI POP PUSH3 0x851 DUP2 CALLER PUSH3 0x66F JUMP JUMPDEST PUSH3 0x8C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B995C881B9BDC88185C1C1C9BDD995908199BDC88185B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x1434 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x8EC SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x91A SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x96B JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x93F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x96B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x94D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x981 DUP4 PUSH3 0xAB5 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0x999 CALLER DUP3 PUSH3 0x14A4 JUMP JUMPDEST PUSH3 0x9B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24FC JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 DUP4 PUSH3 0x157A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9D5 PUSH1 0x1 NUMBER PUSH3 0x25BC JUMP JUMPDEST BLOCKHASH SWAP1 POP PUSH3 0x9E4 DUP2 DUP5 PUSH3 0x1726 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0xA0A DUP2 CALLER JUMPDEST PUSH3 0x1734 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x17A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH3 0xA88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0xA94 DUP3 DUP3 PUSH3 0x182D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH3 0x1033 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x80 SHL DUP4 LT PUSH3 0xAD9 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 PUSH3 0xAD6 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP4 LT PUSH3 0xAFA JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 PUSH3 0xAF7 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP4 LT PUSH3 0xB1C JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB19 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH3 0x10000 DUP4 LT PUSH3 0xB3C JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB39 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x100 DUP4 LT PUSH3 0xB5B JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB58 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x10 DUP4 LT PUSH3 0xB79 JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB76 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x4 DUP4 LT PUSH3 0xB97 JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB94 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x2 DUP4 LT PUSH3 0xBB5 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 PUSH3 0xBB2 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x909C57D5C6AC08245CF2A6DE3900E2B868513FA59099B92B27D8DB823D92DF9C SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xBF4 DUP2 CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xC36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737BA103232B330BAB63A1030B236B4B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xC44 ADDRESS DUP6 PUSH3 0x125F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH3 0xC67 SWAP1 PUSH3 0x1EF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xC9B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP2 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEF9C0462F3702100D0FE56E120E5D1BAD81B72AFA45EF3A6FCD7B40E4E6D8B06 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP1 DUP2 OR DUP3 SSTORE DUP6 MSTORE PUSH1 0xD DUP4 MSTORE SWAP1 DUP5 KECCAK256 DUP7 SWAP1 SSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 MSTORE SWAP1 SLOAD AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x682 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xDBF PUSH1 0x2 PUSH3 0xDB8 PUSH1 0x11 SLOAD PUSH1 0x16 SLOAD PUSH3 0x13E1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH3 0x13E1 JUMP JUMPDEST PUSH1 0x16 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP2 JUMPDEST DUP5 DUP2 GT PUSH3 0xE80 JUMPI PUSH3 0xDF3 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH3 0x1897 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP7 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xBBCBAE1C475B8DE12A83D866F05A6C253F2AF9B5A7E299AA0D6F9FC50FB66E1E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0xE5A DUP3 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP3 POP PUSH3 0xE69 DUP4 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP2 POP DUP1 PUSH3 0xE77 DUP2 PUSH3 0x265C JUMP JUMPDEST SWAP2 POP POP PUSH3 0xDCB JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xEF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0xF1A PUSH3 0x18CB JUMP JUMPDEST PUSH3 0xF24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH3 0x69B SWAP1 PUSH3 0x261F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH3 0xFB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH3 0x1027 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x103F CALLER DUP4 PUSH3 0x14A4 JUMP JUMPDEST PUSH3 0x105E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24FC JUMP JUMPDEST PUSH3 0x106C DUP5 DUP5 DUP5 DUP5 PUSH3 0x1930 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 MSTORE DUP4 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x2 DUP2 LT PUSH3 0x10A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP4 POP DUP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x10BF DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x10DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0x10F9 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x1127 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x1178 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x114C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x1178 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x115A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1191 PUSH3 0x18CB JUMP JUMPDEST PUSH3 0x119B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xBBF6061B PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH3 0x11E0 SWAP2 PUSH3 0x2398 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x121F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1224 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH3 0x1258 JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0x1248 SWAP2 SWAP1 PUSH3 0x231F JUMP JUMPDEST SWAP1 POP PUSH3 0x1256 DUP6 DUP3 PUSH3 0x196A JUMP JUMPDEST POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x127C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732314D696E743A206163636F756E742069736E74204D696E74657220726F6C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x12E9 DUP4 PUSH3 0x12E3 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x19AD JUMP JUMPDEST PUSH3 0x12FE PUSH3 0x12F7 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST DUP4 PUSH3 0x1AE8 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x130A PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH3 0x131B PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x9E0BFAF38878AAD3EBD19B8C8065288EB130F0499A7378363D4652515588AC96 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH3 0x134E SWAP3 SWAP2 SWAP1 PUSH3 0x254D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x137B DUP2 CALLER PUSH3 0xA04 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x182D JUMP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH1 0x12 SSTORE PUSH1 0x17 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0xF24 PUSH3 0xD97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9E4 DUP3 DUP5 PUSH3 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x682 JUMPI POP PUSH3 0x682 DUP3 PUSH3 0x1B8E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH3 0x146B DUP3 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14B1 DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x1514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1521 DUP4 PUSH3 0xD1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH3 0x155F JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1554 DUP5 PUSH3 0x725 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH3 0x1572 JUMPI POP PUSH3 0x1572 DUP2 DUP6 PUSH3 0x13B3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x158F DUP3 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x15F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x165D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x166A PUSH1 0x0 DUP3 PUSH3 0x1434 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x1695 SWAP1 DUP5 SWAP1 PUSH3 0x25BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x16C5 SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9E4 DUP3 DUP5 PUSH3 0x267A JUMP JUMPDEST PUSH3 0x1740 DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xA94 JUMPI PUSH3 0x175B DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH3 0x1BE1 JUMP JUMPDEST PUSH3 0x1768 DUP4 PUSH1 0x20 PUSH3 0x1BE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x177B SWAP3 SWAP2 SWAP1 PUSH3 0x23B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x790 SWAP2 PUSH1 0x4 ADD PUSH3 0x2468 JUMP JUMPDEST PUSH3 0x17AF DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xA94 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x17E9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH3 0x1839 DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST ISZERO PUSH3 0xA94 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x11 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH3 0x8CC SWAP1 DUP3 PUSH1 0x2 PUSH3 0x1EFF JUMP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH3 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x12 SLOAD NUMBER PUSH3 0x18F0 SWAP2 SWAP1 PUSH3 0x25BC JUMP JUMPDEST SWAP1 POP PUSH1 0x13 SLOAD DUP2 LT PUSH3 0x1928 JUMPI PUSH1 0x0 PUSH1 0x13 SLOAD DUP3 PUSH3 0x190E SWAP2 SWAP1 PUSH3 0x267A JUMP JUMPDEST SWAP1 POP PUSH1 0x14 SLOAD DUP2 GT PUSH3 0x1926 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH3 0x722 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH3 0x193D DUP5 DUP5 DUP5 PUSH3 0x157A JUMP JUMPDEST PUSH3 0x194B DUP5 DUP5 DUP5 DUP5 PUSH3 0x1DD6 JUMP JUMPDEST PUSH3 0x106C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x247D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP1 DUP5 MSTORE PUSH1 0xE SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH3 0x19A3 SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x1A05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x1A10 DUP2 PUSH3 0x1417 JUMP JUMPDEST ISZERO PUSH3 0x1A5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x1A8A SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH3 0x1B03 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x1B43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x4E6F74204D696E74657220526F6C65 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x1B4E DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x1B6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH3 0x8CC SWAP3 DUP5 ADD SWAP1 PUSH3 0x1F42 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x1BC0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH3 0x682 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH3 0x682 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x1BF2 DUP4 PUSH1 0x2 PUSH3 0x259A JUMP JUMPDEST PUSH3 0x1BFF SWAP1 PUSH1 0x2 PUSH3 0x2568 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1C25 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x1C50 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1C7A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x1CB8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x1CDE DUP5 PUSH1 0x2 PUSH3 0x259A JUMP JUMPDEST PUSH3 0x1CEB SWAP1 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x1D85 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x1D2F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x1D54 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x1D7D DUP2 PUSH3 0x2605 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CEE JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0x9E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH3 0x1EE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH3 0x1E1D SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1E38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1E6B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x1E68 SWAP2 DUP2 ADD SWAP1 PUSH3 0x22B8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1ECB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0x1E9C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1EA1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH3 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x247D JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH3 0x1572 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xCA2 DUP1 PUSH3 0x26EB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x1F30 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1F30 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1F13 JUMP JUMPDEST POP PUSH3 0x1F3E SWAP3 SWAP2 POP PUSH3 0x1FBE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1F50 SWAP1 PUSH3 0x261F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1F74 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1F30 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1F8F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1F30 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1F30 JUMPI SWAP2 DUP3 ADD DUP3 DUP2 GT ISZERO PUSH3 0x1F30 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1F13 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1F3E JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT ISZERO PUSH3 0x1FF2 JUMPI PUSH3 0x1FF2 PUSH3 0x26BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x201D JUMPI PUSH3 0x201D PUSH3 0x26BD JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH3 0x2037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x207A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x9E4 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0x1FD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x209D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x9E4 DUP3 PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x20BB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x20C6 DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x20F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x20FF DUP5 PUSH3 0x2051 JUMP JUMPDEST SWAP3 POP PUSH3 0x210F PUSH1 0x20 DUP6 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x2135 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x2140 DUP6 PUSH3 0x2051 JUMP JUMPDEST SWAP4 POP PUSH3 0x2150 PUSH1 0x20 DUP7 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2172 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH3 0x2183 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x2194 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH3 0x1FD5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x21B3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x21BE DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x21D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x21F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x21FC DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2217 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x2225 DUP6 DUP3 DUP7 ADD PUSH3 0x2069 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2242 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x224D DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x226D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2287 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x22AB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x9E4 DUP2 PUSH3 0x26D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x22CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x9E4 DUP2 PUSH3 0x26D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x22EA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2300 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x230E DUP6 DUP3 DUP7 ADD PUSH3 0x2069 JUMP JUMPDEST SWAP3 POP POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2331 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x234E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x2384 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x25D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x23AC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25D6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP3 MSTORE DUP4 MLOAD PUSH3 0x23EA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25D6 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x241D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25D6 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x245E SWAP1 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH3 0x9E4 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x139195081A5908191BDCD95B9D08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x1572 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x257E JUMPI PUSH3 0x257E PUSH3 0x2691 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x2595 JUMPI PUSH3 0x2595 PUSH3 0x26A7 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x25B7 JUMPI PUSH3 0x25B7 PUSH3 0x2691 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x25D1 JUMPI PUSH3 0x25D1 PUSH3 0x2691 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x25F3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x25D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x106C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x2617 JUMPI PUSH3 0x2617 PUSH3 0x2691 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2634 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2656 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x2673 JUMPI PUSH3 0x2673 PUSH3 0x2691 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x268C JUMPI PUSH3 0x268C PUSH3 0x26A7 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0x65B JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xCA2 CODESIZE SUB DUP1 PUSH2 0xCA2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x133 JUMP JUMPDEST PUSH2 0x3A PUSH1 0x0 CALLER PUSH2 0x6B JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x165 JUMP JUMPDEST PUSH2 0x75 DUP3 DUP3 PUSH2 0x79 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x75 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x145 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x14E DUP4 PUSH2 0x117 JUMP JUMPDEST SWAP2 POP PUSH2 0x15C PUSH1 0x20 DUP5 ADD PUSH2 0x117 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xB2E DUP1 PUSH2 0x174 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x2A3AC08C EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xBBF6061B EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0xC3FE3E28 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xF4B9FA75 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x903 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xE9 PUSH32 0xE39604301A5DF21DE489C846135593D1F32826F514AFA2544BDBE9ACE2BFAE4A DUP2 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x131 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x212 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH2 0xE9 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0xE9 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x17C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x17C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1E0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x203 DUP2 CALLER JUMPDEST PUSH2 0x5AD JUMP JUMPDEST PUSH2 0x20D DUP4 DUP4 PUSH2 0x611 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x287 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x291 DUP3 DUP3 PUSH2 0x695 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2F3 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x385 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D5 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F2 SWAP3 SWAP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x444 SWAP2 SWAP1 PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x48A SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP3 SWAP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x8E3 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xBDD983D6BAF07AAB2A84779F0FC201C6BF84AB638AD825FA90E0E370F04C39DF SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5A3 DUP2 CALLER PUSH2 0x1FE JUMP JUMPDEST PUSH2 0x20D DUP4 DUP4 PUSH2 0x695 JUMP JUMPDEST PUSH2 0x5B7 DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x291 JUMPI PUSH2 0x5CF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x5DA DUP4 PUSH1 0x20 PUSH2 0x6FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5EB SWAP3 SWAP2 SWAP1 PUSH2 0x995 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x27E SWAP2 PUSH1 0x4 ADD PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x61B DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x291 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x651 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x69F DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x709 DUP4 PUSH1 0x2 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x714 SWAP1 PUSH1 0x2 PUSH2 0xA64 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x73A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x764 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x78D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x7CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x7EE DUP5 PUSH1 0x2 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x7F9 SWAP1 PUSH1 0x1 PUSH2 0xA64 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x88D JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x85F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x886 DUP2 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0x7FC JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x27E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8DC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x914 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x94A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x966 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP3 MSTORE DUP4 MLOAD PUSH2 0x9C7 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x9F8 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA9B JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA50 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0xAE2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA96 JUMPI PUSH2 0xA96 PUSH2 0xAE2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA9E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xADA JUMPI PUSH2 0xADA PUSH2 0xAE2 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x635BA3C15021E4B36DBF26 PUSH32 0xD30EAD7BDE5F793D2F5EEE41A499435A1038264736F6C634300080200339F2D CREATE INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xA4253755F8 AND SWAP1 0xA7 0x2D SWAP10 0xAD SWAP11 SMOD 0xEE SWAP16 0x1F 0xAD DUP13 MUL CALLER RETURN ADDRESS 0xC1 PUSH25 0xEC25529533E95C64736F6C6343000802003300000000000000 ",
          "sourceMap": "252:5642:150:-:0;;;829:1;808:22;;;;836:24;;;;942:4;917:29;;984:3;952:35;;1022:33;;1061:27;;;-1:-1:-1;;1061:27:150;;;2072:240;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1321:114:106;;;;;;;;;;;-1:-1:-1;;;1321:114:106;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1321:114:106;;;;1388:13;;1321:114;;;1388:13;;-1:-1:-1;;1388:13:106;:::i;:::-;-1:-1:-1;1411:17:106;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;817:42:149::1;::::0;-1:-1:-1;2439:4:0::1;::::0;-1:-1:-1;848:10:149::1;817;:42::i;:::-;869:35;267:24;893:10;869;:35::i;:::-;2157:3:150::0;:25;;-1:-1:-1;;;;;;2157:25:150;-1:-1:-1;;;;;2157:25:150;;;;;2192:26;2206:11;2192:13;:26::i;:::-;2228:25;2241:11;2228:12;:25::i;:::-;2072:240;;;252:5642;;7515:110:0;7593:25;7604:4;7610:7;7593:10;:25::i;:::-;7515:110;;:::o;2317:300:150:-;2386:16;2401:1;2386:12;:16;:::i;:::-;:21;2378:56;;;;-1:-1:-1;;;2378:56:150;;1010:2:153;2378:56:150;;;992:21:153;1049:2;1029:18;;;1022:30;1088:24;1068:18;;;1061:52;1130:18;;2378:56:150;;;;;;;;;2453:14;;;;2452:15;2444:56;;;;-1:-1:-1;;;2444:56:150;;653:2:153;2444:56:150;;;635:21:153;692:2;672:18;;;665:30;731;711:18;;;704:58;779:18;;2444:56:150;625:178:153;2444:56:150;2518:20;:39;2539:13;;2555:1;2539:17;;;;:::i;:::-;2518:39;;;;;;;;;;;;;;-1:-1:-1;2518:39:150;;;:42;;;;;;;;:45;;;;;2564:1;2518:48;;:53;2510:100;;;;-1:-1:-1;;;2510:100:150;;1361:2:153;2510:100:150;;;1343:21:153;1400:2;1380:18;;;1373:30;1439:34;1419:18;;;1412:62;-1:-1:-1;;;1490:18:153;;;1483:33;1533:19;;2510:100:150;1333:225:153;2510:100:150;2317:300;:::o;2623:317::-;2683:27;2697:12;2683:13;:27::i;:::-;2720:13;:16;;;:13;:16;;;:::i;:::-;;;;-1:-1:-1;;2764:1:150;2746:15;:19;2775:16;:31;;;2816:24;:39;;;2866:37;2794:12;2866:19;:37::i;:::-;-1:-1:-1;2913:19:150;:17;:19::i;7948:224:0:-;4452:4;4475:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;4475:29:0;;;;;;;;;;;;8017:149;;8060:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8060:29:0;;;;;;;;;:36;;-1:-1:-1;;8060:36:0;8092:4;8060:36;;;8142:12;665:10:124;586:96;;8142:12:0;-1:-1:-1;;;;;8115:40:0;8133:7;-1:-1:-1;;;;;8115:40:0;8127:4;8115:40;;;;;;;;;;7948:224;;:::o;4468:171:150:-;4532:6;;4564:18;4569:12;4564:4;:18::i;:::-;4592:8;:17;;;;4468:171;-1:-1:-1;;;4468:171:150:o;3928:535::-;3974:19;3996:52;4046:1;3996:45;4025:15;;3996:24;;:28;;;;;;:45;;;;:::i;:::-;:49;;;;;;:52;;;;:::i;:::-;4089:24;;3974:74;;-1:-1:-1;4058:28:150;4165:1;4058:28;4177:280;4198:14;4193:1;:19;4177:280;;4232:34;4244:1;4232:34;;;;;;;;4248:7;4232:34;;;;4257:7;4232:34;;;:11;;;:34;;:::i;:::-;4344:31;;;;:22;:31;;;;;;;;;4311;;;;;;;;4285:91;;1709:25:153;;;-1:-1:-1;;;;;4344:31:150;;;;4311;;;;4285:91;;1682:18:153;4285:91:150;;;;;;;4400:11;:7;4410:1;4400:11;:::i;:::-;4390:21;-1:-1:-1;4435:11:150;4390:21;4445:1;4435:11;:::i;:::-;4425:21;-1:-1:-1;4214:3:150;;;;:::i;:::-;;;;4177:280;;;;3928:535;;;;:::o;155:470:152:-;194:6;211;-1:-1:-1;;;231:1:152;:11;227:41;;252:3;246:9;;;;257:8;;;;:::i;:::-;;;227:41;286:5;281:1;:10;277:38;;301:2;295:8;;;;305:7;;;;:::i;:::-;;;277:38;333:5;328:1;:10;324:38;;348:2;342:8;;;;352:7;;;;:::i;:::-;;;324:38;380:5;375:1;:10;371:38;;395:2;389:8;;;;399:7;;;;:::i;:::-;;;371:38;427:4;422:1;:9;418:35;;441:1;435:7;;;;444:6;;;;:::i;:::-;;;418:35;471:4;466:1;:9;462:35;;485:1;479:7;;;;488:6;;;;:::i;:::-;;;462:35;515:4;510:1;:9;506:35;;529:1;523:7;;;;532:6;;;;:::i;:::-;;;506:35;559:4;554:1;:9;550:30;;571:1;566:6;;;;574:4;;;;:::i;:::-;;;550:30;594:6;;598:1;;594:6;;;;;617:1;155:470;-1:-1:-1;;155:470:152:o;3767:96:145:-;3825:7;3851:5;3855:1;3851;:5;:::i;:::-;3844:12;3767:96;-1:-1:-1;;;3767:96:145:o;3759:164:150:-;3862:13;;3841:35;;;;:20;:35;;;;;;;;3877:15;;3841:52;;;;;;;:61;;;;;;;;:75;;3905:11;3841:75;;:::i;:::-;;3759:164;;:::o;252:5642::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;252:5642:150;;;-1:-1:-1;252:5642:150;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:432:153;;;;171:2;159:9;150:7;146:23;142:32;139:2;;;192:6;184;177:22;139:2;220:16;;276:2;261:18;;255:25;323:2;308:18;;302:25;220:16;;-1:-1:-1;255:25:153;-1:-1:-1;;;;;;356:31:153;;346:42;;336:2;;407:6;399;392:22;336:2;435:5;425:15;;;129:317;;;;;:::o;1745:128::-;;1816:1;1812:6;1809:1;1806:13;1803:2;;;1822:18;;:::i;:::-;-1:-1:-1;1858:9:153;;1793:80::o;1878:120::-;;1944:1;1934:2;;1949:18;;:::i;:::-;-1:-1:-1;1983:9:153;;1924:74::o;2003:380::-;2088:1;2078:12;;2135:1;2125:12;;;2146:2;;2200:4;2192:6;2188:17;2178:27;;2146:2;2253;2245:6;2242:14;2222:18;2219:38;2216:2;;;2299:10;2294:3;2290:20;2287:1;2280:31;2334:4;2331:1;2324:15;2362:4;2359:1;2352:15;2216:2;;2058:325;;;:::o;2388:135::-;;-1:-1:-1;;2448:17:153;;2445:2;;;2468:18;;:::i;:::-;-1:-1:-1;2515:1:153;2504:13;;2435:88::o;2528:112::-;;2586:1;2576:2;;2591:18;;:::i;:::-;-1:-1:-1;2625:9:153;;2566:74::o;2645:127::-;2706:10;2701:3;2697:20;2694:1;2687:31;2737:4;2734:1;2727:15;2761:4;2758:1;2751:15;2777:127;2838:10;2833:3;2829:20;2826:1;2819:31;2869:4;2866:1;2859:15;2893:4;2890:1;2883:15;2809:95;252:5642:150;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:18815:153",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:153",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "88:557:153",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "98:28:153",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "108:18:153",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "102:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "153:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "155:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "155:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "155:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "141:6:153"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "149:2:153"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "138:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "138:14:153"
                          },
                          "nodeType": "YulIf",
                          "src": "135:2:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "184:17:153",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "198:2:153",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "194:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "194:7:153"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "188:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "210:23:153",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "230:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "224:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "224:9:153"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "214:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "242:73:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "264:6:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nodeType": "YulIdentifier",
                                                "src": "288:6:153"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "296:2:153",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "284:3:153"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "284:15:153"
                                          },
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "301:2:153"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "280:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "280:24:153"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "306:2:153",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "276:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "276:33:153"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "311:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "272:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "272:42:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "260:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "260:55:153"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "246:10:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "374:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "376:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "376:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "376:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:10:153"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "345:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "330:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "330:18:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "353:10:153"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "365:6:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "350:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "350:22:153"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "327:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "327:46:153"
                          },
                          "nodeType": "YulIf",
                          "src": "324:2:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "412:2:153",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "416:10:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "405:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "405:22:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "405:22:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "436:15:153",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "445:6:153"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "436:5:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "467:6:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "475:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "460:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "460:22:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "460:22:153"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "520:16:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "529:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "532:1:153",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "522:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "522:12:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "522:12:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "501:3:153"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "506:6:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "497:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "497:16:153"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "515:3:153"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "494:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "494:25:153"
                          },
                          "nodeType": "YulIf",
                          "src": "491:2:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "562:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "570:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "558:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "558:17:153"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "577:3:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "582:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "545:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "545:44:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "545:44:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "613:6:153"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "621:6:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "609:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "609:19:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "630:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "605:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "605:30:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "637:1:153",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "598:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "598:41:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "598:41:153"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "57:3:153",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "62:6:153",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "70:3:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "78:5:153",
                        "type": ""
                      }
                    ],
                    "src": "14:631:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "699:124:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "709:29:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "731:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "718:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "718:20:153"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "709:5:153"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "801:16:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "810:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "813:1:153",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "803:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "803:12:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "803:12:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "760:5:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "771:5:153"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "786:3:153",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "791:1:153",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "782:3:153"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "782:11:153"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "795:1:153",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "778:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "778:19:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "767:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "767:31:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "757:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "757:42:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "750:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "750:50:153"
                          },
                          "nodeType": "YulIf",
                          "src": "747:2:153"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "678:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "689:5:153",
                        "type": ""
                      }
                    ],
                    "src": "650:173:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "881:176:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "930:24:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "939:5:153"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "946:5:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "932:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "932:20:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "932:20:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "909:6:153"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "917:4:153",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "905:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "905:17:153"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "924:3:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "901:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "901:27:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "894:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "894:35:153"
                          },
                          "nodeType": "YulIf",
                          "src": "891:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "963:88:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1010:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1018:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1006:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1006:17:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1038:6:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1025:12:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1025:20:153"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1047:3:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "972:33:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "972:79:153"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "963:5:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "855:6:153",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "863:3:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "871:5:153",
                        "type": ""
                      }
                    ],
                    "src": "828:229:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1132:126:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1178:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1187:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1195:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1180:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1180:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1180:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1153:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1162:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1149:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1149:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1174:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1145:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1145:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "1142:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1213:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1242:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1223:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1223:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1213:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1098:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1109:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1121:6:153",
                        "type": ""
                      }
                    ],
                    "src": "1062:196:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1350:183:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1396:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1405:6:153"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1413:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1398:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1398:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1398:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1371:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1380:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1367:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1367:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1392:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1363:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1363:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "1360:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1431:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1460:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1441:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1441:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1431:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1479:48:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1512:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1523:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1508:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1508:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1489:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1489:38:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1479:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1308:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1319:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1331:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1339:6:153",
                        "type": ""
                      }
                    ],
                    "src": "1263:270:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1642:234:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1688:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1697:6:153"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1705:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1690:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1690:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1690:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1663:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1672:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1659:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1659:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1684:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1655:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1655:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "1652:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1723:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1752:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1733:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1733:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1723:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1771:48:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1804:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1815:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1800:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1800:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1781:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1781:38:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1771:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1828:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1855:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1866:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1851:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1851:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1838:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1838:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1828:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1592:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1603:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1615:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1623:6:153",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1631:6:153",
                        "type": ""
                      }
                    ],
                    "src": "1538:338:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2011:566:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2058:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2067:6:153"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2075:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2060:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2060:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2060:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2032:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2041:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2028:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2028:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2053:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2024:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2024:33:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2021:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2093:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2122:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2103:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2103:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2093:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2141:48:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2174:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2185:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2170:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2170:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2151:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2151:38:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2141:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2198:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2225:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2236:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2221:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2221:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2208:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2208:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2198:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2249:46:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2280:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2291:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2276:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2276:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2263:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2263:32:153"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2253:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2338:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2347:6:153"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2355:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2340:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2340:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2340:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2310:6:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2318:18:153",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2307:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2307:30:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2304:2:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2373:32:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2387:9:153"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2398:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2383:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2383:22:153"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2377:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2453:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2462:6:153"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2470:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2455:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2455:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2455:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2432:2:153"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2436:4:153",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2428:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2428:13:153"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2443:7:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2424:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2424:27:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2417:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2417:35:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2414:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2488:83:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2536:2:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2540:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2532:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2532:11:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2558:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2545:12:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2545:16:153"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2563:7:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "2498:33:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2498:73:153"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2488:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1953:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1964:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1976:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1984:6:153",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1992:6:153",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2000:6:153",
                        "type": ""
                      }
                    ],
                    "src": "1881:696:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2666:283:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2712:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2721:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2729:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2714:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2714:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2714:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2687:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2696:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2683:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2683:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2708:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2679:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2679:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2676:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2747:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2776:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2757:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2757:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2747:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2795:45:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2825:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2836:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2821:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2821:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2808:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2808:32:153"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2799:5:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2893:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2902:6:153"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2910:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2895:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2895:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2895:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2862:5:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2883:5:153"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2876:6:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2876:13:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2869:6:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2869:21:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2859:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2859:32:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2852:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2852:40:153"
                          },
                          "nodeType": "YulIf",
                          "src": "2849:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2928:15:153",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2938:5:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2928:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2624:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2635:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2647:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2655:6:153",
                        "type": ""
                      }
                    ],
                    "src": "2582:367:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3051:319:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3097:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3106:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3114:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3099:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3099:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3099:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3072:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3081:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3068:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3068:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3093:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3064:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3064:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "3061:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3132:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3161:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3142:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3142:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3132:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3180:46:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3211:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3222:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3207:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3207:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3194:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3194:32:153"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3184:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3269:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3278:6:153"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3286:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3271:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3271:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3271:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3241:6:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3249:18:153",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3238:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3238:30:153"
                          },
                          "nodeType": "YulIf",
                          "src": "3235:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3304:60:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3336:9:153"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3347:6:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3332:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3332:22:153"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3356:7:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "3314:17:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3314:50:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3304:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3009:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3020:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3032:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3040:6:153",
                        "type": ""
                      }
                    ],
                    "src": "2954:416:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3462:177:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3508:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3517:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3525:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3510:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3510:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3510:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3483:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3492:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3479:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3479:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3504:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3475:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3475:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "3472:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3543:39:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3572:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3553:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3553:29:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3543:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3591:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3618:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3629:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3614:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3614:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3601:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3601:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3591:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3420:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3431:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3443:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3451:6:153",
                        "type": ""
                      }
                    ],
                    "src": "3375:264:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3714:120:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3760:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3769:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3777:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3762:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3762:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3762:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3735:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3744:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3731:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3731:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3756:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3727:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3727:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "3724:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3795:33:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3818:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3805:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3805:23:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3795:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3680:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3691:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3703:6:153",
                        "type": ""
                      }
                    ],
                    "src": "3644:190:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3926:177:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3972:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3981:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3989:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3974:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3974:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3974:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3947:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3956:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3943:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3943:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3968:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3939:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3939:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "3936:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4007:33:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4030:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4017:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4017:23:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4007:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4049:48:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4082:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4093:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4078:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4078:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4059:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4059:38:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4049:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3884:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3895:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3907:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3915:6:153",
                        "type": ""
                      }
                    ],
                    "src": "3839:264:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4177:186:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4223:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4232:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4240:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4225:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4225:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4225:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4198:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4207:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4194:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4194:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4219:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4190:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4190:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "4187:2:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4258:36:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4284:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4271:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4271:23:153"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4262:5:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4327:5:153"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "4303:23:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4303:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4303:30:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4342:15:153",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4352:5:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4342:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4143:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4154:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4166:6:153",
                        "type": ""
                      }
                    ],
                    "src": "4108:255:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4448:179:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4494:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4503:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4511:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4496:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4496:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4496:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4469:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4478:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4465:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4465:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4490:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4461:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4461:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "4458:2:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4529:29:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4548:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4542:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4542:16:153"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4533:5:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4591:5:153"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "4567:23:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4567:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4567:30:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4606:15:153",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4616:5:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4606:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4414:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4425:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4437:6:153",
                        "type": ""
                      }
                    ],
                    "src": "4368:259:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4729:319:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4775:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4784:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4792:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4777:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4777:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4777:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4750:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4759:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4746:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4746:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4771:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4742:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4742:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "4739:2:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4810:37:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4837:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4824:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4824:23:153"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4814:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4890:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4899:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4907:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4892:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4892:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4892:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4862:6:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4870:18:153",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4859:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4859:30:153"
                          },
                          "nodeType": "YulIf",
                          "src": "4856:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4925:60:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4957:9:153"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4968:6:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4953:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4953:22:153"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4977:7:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "4935:17:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4935:50:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4925:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4994:48:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5027:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5038:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5023:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5023:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5004:18:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5004:38:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4994:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4687:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4698:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4710:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4718:6:153",
                        "type": ""
                      }
                    ],
                    "src": "4632:416:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5123:120:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5169:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5178:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5186:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5171:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5171:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5171:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5144:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5153:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5140:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5140:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5165:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5136:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5136:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "5133:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5204:33:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5227:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5214:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5214:23:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5204:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5089:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5100:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5112:6:153",
                        "type": ""
                      }
                    ],
                    "src": "5053:190:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5329:113:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5375:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5384:6:153"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5392:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5377:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5377:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5377:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5350:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5359:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5346:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5346:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5371:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5342:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5342:32:153"
                          },
                          "nodeType": "YulIf",
                          "src": "5339:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5410:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5426:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5420:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5420:16:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5410:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5295:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5306:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5318:6:153",
                        "type": ""
                      }
                    ],
                    "src": "5248:194:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5568:274:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5615:26:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "5624:6:153"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "5632:6:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5617:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5617:22:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5617:22:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5589:7:153"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5598:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5585:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5585:23:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5610:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5581:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5581:33:153"
                          },
                          "nodeType": "YulIf",
                          "src": "5578:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5650:33:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5673:9:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5660:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5660:23:153"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5650:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5692:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5719:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5730:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5715:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5715:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5702:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5702:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5692:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5743:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5770:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5781:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5766:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5766:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5753:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5753:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5743:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5794:42:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5821:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5832:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5817:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5817:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5804:12:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5804:32:153"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5794:6:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5510:9:153",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5521:7:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5533:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5541:6:153",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5549:6:153",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5557:6:153",
                        "type": ""
                      }
                    ],
                    "src": "5447:395:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5896:208:153",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5906:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5926:5:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5920:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5920:12:153"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5910:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5948:3:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5953:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5941:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5941:19:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5941:19:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5995:5:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6002:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5991:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5991:16:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6013:3:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6018:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6009:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6009:14:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6025:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5969:21:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5969:63:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5969:63:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6041:57:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6056:3:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "6069:6:153"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6077:2:153",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6065:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6065:15:153"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6086:2:153",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "6082:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6082:7:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6061:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6061:29:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6052:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6052:39:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6093:4:153",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6048:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6048:50:153"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6041:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5873:5:153",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5880:3:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5888:3:153",
                        "type": ""
                      }
                    ],
                    "src": "5847:257:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6246:137:153",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6256:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6276:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6270:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6270:13:153"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6260:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6318:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6326:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6314:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6314:17:153"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6333:3:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6338:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6292:21:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6292:53:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6292:53:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6354:23:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6365:3:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6370:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6361:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6361:16:153"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6354:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6222:3:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6227:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6238:3:153",
                        "type": ""
                      }
                    ],
                    "src": "6109:274:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6777:397:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6794:3:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6799:25:153",
                                "type": "",
                                "value": "AccessControl: account "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6787:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6787:38:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6787:38:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6834:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6854:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6848:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6848:13:153"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6838:6:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6896:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6904:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6892:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6892:17:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6915:3:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6920:2:153",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6911:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6911:12:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6925:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6870:21:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6870:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6870:62:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6941:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6955:3:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6960:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6951:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6951:16:153"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6945:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6987:2:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6991:2:153",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6983:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6983:11:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6996:19:153",
                                "type": "",
                                "value": " is missing role "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6976:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6976:40:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6976:40:153"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7025:29:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7047:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7041:5:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7041:13:153"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "7029:8:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7089:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7097:4:153",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7085:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7085:17:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7108:2:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7112:2:153",
                                    "type": "",
                                    "value": "40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7104:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7104:11:153"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "7117:8:153"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "7063:21:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7063:63:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7063:63:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7135:33:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7150:2:153"
                                  },
                                  {
                                    "name": "length_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7154:8:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7146:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7146:17:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7165:2:153",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7142:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7142:26:153"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7135:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6745:3:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6750:6:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6758:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6769:3:153",
                        "type": ""
                      }
                    ],
                    "src": "6388:786:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7280:102:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7290:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7302:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7313:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7298:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7298:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7290:4:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7332:9:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7347:6:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7363:3:153",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7368:1:153",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7359:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7359:11:153"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7372:1:153",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7355:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7355:19:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7343:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7343:32:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7325:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7325:51:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7325:51:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7249:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7260:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7271:4:153",
                        "type": ""
                      }
                    ],
                    "src": "7179:203:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7516:175:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7526:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7538:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7549:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7534:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7534:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7526:4:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7561:29:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7579:3:153",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7584:1:153",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7575:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7575:11:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7588:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7571:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7571:19:153"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7565:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7606:9:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7621:6:153"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7629:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7617:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7617:15:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7599:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7599:34:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7599:34:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7653:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7664:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7649:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7649:18:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7673:6:153"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7681:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7669:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7669:15:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7642:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7642:43:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7642:43:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7477:9:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7488:6:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7496:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7507:4:153",
                        "type": ""
                      }
                    ],
                    "src": "7387:304:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7899:285:153",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7909:29:153",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7927:3:153",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7932:1:153",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7923:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7923:11:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7936:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7919:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7919:19:153"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7913:2:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7954:9:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7969:6:153"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7977:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7965:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7965:15:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7947:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7947:34:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7947:34:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8001:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8012:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7997:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7997:18:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8021:6:153"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8029:2:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8017:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8017:15:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7990:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7990:43:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7990:43:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8053:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8064:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8049:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8049:18:153"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8069:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8042:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8042:34:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8042:34:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8096:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8107:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8092:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8092:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8112:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8085:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8085:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8085:31:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8125:53:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "8150:6:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8162:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8173:3:153",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8158:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8158:19:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8133:16:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8133:45:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8125:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7844:9:153",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7855:6:153",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7863:6:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7871:6:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7879:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7890:4:153",
                        "type": ""
                      }
                    ],
                    "src": "7696:488:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8284:92:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8294:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8306:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8317:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8302:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8302:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8294:4:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8336:9:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8361:6:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "8354:6:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8354:14:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8347:6:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8347:22:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8329:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8329:41:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8329:41:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8253:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8264:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8275:4:153",
                        "type": ""
                      }
                    ],
                    "src": "8189:187:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8482:76:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8492:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8504:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8515:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8500:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8500:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8492:4:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8534:9:153"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8545:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8527:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8527:25:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8527:25:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8451:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8462:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8473:4:153",
                        "type": ""
                      }
                    ],
                    "src": "8381:177:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8684:98:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8701:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8712:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8694:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8694:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8694:21:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8724:52:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8749:6:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8761:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8772:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8757:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8757:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8732:16:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8732:44:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8724:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8653:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8664:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8675:4:153",
                        "type": ""
                      }
                    ],
                    "src": "8563:219:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8961:182:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8978:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8989:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8971:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8971:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8971:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9012:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9023:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9008:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9008:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9028:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9001:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9001:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9001:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9051:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9062:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9047:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9047:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9067:34:153",
                                "type": "",
                                "value": "Strings: hex length insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9040:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9040:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9040:62:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9111:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9123:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9134:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9119:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9119:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9111:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8938:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8952:4:153",
                        "type": ""
                      }
                    ],
                    "src": "8787:356:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9322:240:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9339:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9350:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9332:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9332:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9332:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9373:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9384:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9369:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9369:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9389:2:153",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9362:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9362:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9362:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9412:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9423:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9408:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9408:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9428:34:153",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9401:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9401:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9401:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9483:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9494:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9479:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9479:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9499:20:153",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9472:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9472:48:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9472:48:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9529:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9541:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9552:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9537:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9537:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9529:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9299:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9313:4:153",
                        "type": ""
                      }
                    ],
                    "src": "9148:414:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9741:178:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9758:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9769:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9751:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9751:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9751:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9792:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9803:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9788:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9788:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9808:2:153",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9781:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9781:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9781:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9831:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9842:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9827:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9827:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9847:30:153",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9820:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9820:58:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9820:58:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9887:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9899:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9910:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9895:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9895:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9887:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9718:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9732:4:153",
                        "type": ""
                      }
                    ],
                    "src": "9567:352:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10098:226:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10115:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10126:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10108:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10108:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10108:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10149:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10160:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10145:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10145:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10165:2:153",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10138:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10138:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10138:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10188:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10199:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10184:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10184:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10204:34:153",
                                "type": "",
                                "value": "ERC721: transfer to the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10177:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10177:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10177:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10259:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10270:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10255:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10255:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10275:6:153",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10248:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10248:34:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10248:34:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10291:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10303:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10314:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10299:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10299:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10291:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10075:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10089:4:153",
                        "type": ""
                      }
                    ],
                    "src": "9924:400:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10503:175:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10520:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10531:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10513:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10513:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10513:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10554:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10565:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10550:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10550:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10570:2:153",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10543:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10543:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10543:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10593:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10604:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10589:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10589:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10609:27:153",
                                "type": "",
                                "value": "ERC721: approve to caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10582:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10582:55:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10582:55:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10646:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10658:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10669:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10654:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10654:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10646:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10480:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10494:4:153",
                        "type": ""
                      }
                    ],
                    "src": "10329:349:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10857:234:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10874:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10885:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10867:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10867:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10867:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10908:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10919:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10904:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10904:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10924:2:153",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10897:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10897:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10897:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10947:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10958:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10943:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10943:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10963:34:153",
                                "type": "",
                                "value": "ERC721: operator query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10936:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10936:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10936:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11018:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11029:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11014:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11014:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11034:14:153",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11007:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11007:42:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11007:42:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11058:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11070:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11081:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11066:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11066:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11058:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10834:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10848:4:153",
                        "type": ""
                      }
                    ],
                    "src": "10683:408:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11270:167:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11287:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11298:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11280:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11280:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11280:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11321:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11332:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11317:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11317:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11337:2:153",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11310:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11310:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11310:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11360:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11371:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11356:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11356:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11376:19:153",
                                "type": "",
                                "value": "Not default admin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11349:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11349:47:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11349:47:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11405:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11417:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11428:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11413:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11413:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11405:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_668ae020fa5e30433665cb15f755fe1e43ffb17050608dda42be9df506228347__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11247:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11261:4:153",
                        "type": ""
                      }
                    ],
                    "src": "11096:341:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11616:246:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11633:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11644:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11626:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11626:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11626:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11667:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11678:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11663:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11663:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11683:2:153",
                                "type": "",
                                "value": "56"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11656:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11656:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11656:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11706:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11717:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11702:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11702:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11722:34:153",
                                "type": "",
                                "value": "ERC721: approve caller is not ow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11695:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11695:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11695:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11777:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11788:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11773:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11773:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11793:26:153",
                                "type": "",
                                "value": "ner nor approved for all"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11766:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11766:54:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11766:54:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11829:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11841:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11852:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11837:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11837:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11829:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11593:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11607:4:153",
                        "type": ""
                      }
                    ],
                    "src": "11442:420:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12041:232:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12058:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12069:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12051:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12051:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12051:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12092:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12103:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12088:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12088:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12108:2:153",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12081:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12081:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12081:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12131:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12142:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12127:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12127:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12147:34:153",
                                "type": "",
                                "value": "ERC721: balance query for the ze"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12120:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12120:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12120:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12202:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12213:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12198:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12198:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12218:12:153",
                                "type": "",
                                "value": "ro address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12191:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12191:40:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12191:40:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12240:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12252:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12263:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12248:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12248:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12240:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12018:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12032:4:153",
                        "type": ""
                      }
                    ],
                    "src": "11867:406:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12452:231:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12469:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12480:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12462:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12462:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12462:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12503:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12514:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12499:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12499:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12519:2:153",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12492:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12492:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12492:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12542:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12553:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12538:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12538:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12558:34:153",
                                "type": "",
                                "value": "ERC721: owner query for nonexist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12531:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12531:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12531:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12613:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12624:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12609:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12609:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12629:11:153",
                                "type": "",
                                "value": "ent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12602:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12602:39:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12602:39:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12650:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12662:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12673:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12658:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12658:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12650:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12429:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12443:4:153",
                        "type": ""
                      }
                    ],
                    "src": "12278:405:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12862:182:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12879:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12890:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12872:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12872:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12872:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12913:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12924:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12909:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12909:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12929:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12902:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12902:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12902:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12952:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12963:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12948:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12948:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12968:34:153",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12941:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12941:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12941:62:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13012:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13024:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13035:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13020:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13020:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13012:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12839:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12853:4:153",
                        "type": ""
                      }
                    ],
                    "src": "12688:356:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13223:234:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13240:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13251:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13233:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13233:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13233:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13274:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13285:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13270:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13270:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13290:2:153",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13263:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13263:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13263:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13313:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13324:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13309:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13309:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13329:34:153",
                                "type": "",
                                "value": "ERC721: approved query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13302:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13302:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13302:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13384:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13395:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13380:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13380:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13400:14:153",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13373:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13373:42:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13373:42:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13424:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13436:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13447:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13432:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13432:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13424:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13200:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13214:4:153",
                        "type": ""
                      }
                    ],
                    "src": "13049:408:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13636:231:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13653:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13664:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13646:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13646:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13646:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13687:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13698:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13683:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13683:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13703:2:153",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13676:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13676:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13676:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13726:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13737:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13722:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13722:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13742:34:153",
                                "type": "",
                                "value": "ERC721: transfer of token that i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13715:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13715:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13715:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13797:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13808:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13793:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13793:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13813:11:153",
                                "type": "",
                                "value": "s not own"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13786:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13786:39:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13786:39:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13834:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13846:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13857:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13842:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13842:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13834:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13613:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13627:4:153",
                        "type": ""
                      }
                    ],
                    "src": "13462:405:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14046:169:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14063:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14074:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14056:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14056:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14056:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14097:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14108:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14093:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14093:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14113:2:153",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14086:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14086:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14086:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14136:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14147:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14132:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14132:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14152:21:153",
                                "type": "",
                                "value": "NFT id dosent exist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14125:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14125:49:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14125:49:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14183:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14195:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14206:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14191:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14191:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14183:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b40dcb4a6f50613dbdac6c1502e4c8e86c01ed83fae504cf923464a04f126e85__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14023:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14037:4:153",
                        "type": ""
                      }
                    ],
                    "src": "13872:343:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14394:223:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14411:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14422:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14404:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14404:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14404:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14445:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14456:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14441:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14441:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14461:2:153",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14434:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14434:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14434:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14484:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14495:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14480:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14480:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14500:34:153",
                                "type": "",
                                "value": "ERC721: approval to current owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14473:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14473:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14473:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14555:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14566:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14551:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14551:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14571:3:153",
                                "type": "",
                                "value": "r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14544:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14544:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14544:31:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14584:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14596:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14607:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14592:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14592:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14584:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14371:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14385:4:153",
                        "type": ""
                      }
                    ],
                    "src": "14220:397:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14796:165:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14813:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14824:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14806:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14806:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14806:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14847:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14858:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14843:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14843:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14863:2:153",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14836:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14836:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14836:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14886:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14897:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14882:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14882:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14902:17:153",
                                "type": "",
                                "value": "Not Minter Role"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14875:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14875:45:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14875:45:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14929:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14941:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14952:2:153",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14937:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14937:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14929:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_bccfeab7ec673a58dc93184595c5a49c84c19f5523f7412461d0fe84add24d6d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14773:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14787:4:153",
                        "type": ""
                      }
                    ],
                    "src": "14622:339:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15140:239:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15157:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15168:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15150:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15150:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15150:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15191:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15202:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15187:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15187:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15207:2:153",
                                "type": "",
                                "value": "49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15180:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15180:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15180:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15230:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15241:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15226:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15226:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15246:34:153",
                                "type": "",
                                "value": "ERC721: transfer caller is not o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15219:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15219:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15219:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15301:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15312:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15297:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15297:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15317:19:153",
                                "type": "",
                                "value": "wner nor approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15290:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15290:47:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15290:47:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15346:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15358:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15369:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15354:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15354:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15346:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15117:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15131:4:153",
                        "type": ""
                      }
                    ],
                    "src": "14966:413:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15558:223:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15575:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15586:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15568:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15568:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15568:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15609:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15620:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15605:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15605:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15625:2:153",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15598:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15598:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15598:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15648:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15659:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15644:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15644:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15664:34:153",
                                "type": "",
                                "value": "721Mint: account isnt Minter rol"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15637:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15637:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15637:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15719:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15730:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15715:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15715:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15735:3:153",
                                "type": "",
                                "value": "e"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15708:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15708:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15708:31:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15748:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15760:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15771:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15756:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15756:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15748:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e41529282bfb36bd3d99d38af314d8b6474f803ddd94c907b17c39f8cdcc86f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15535:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15549:4:153",
                        "type": ""
                      }
                    ],
                    "src": "15384:397:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15960:237:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15977:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15988:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15970:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15970:21:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15970:21:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16011:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16022:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16007:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16007:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16027:2:153",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16000:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16000:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16000:30:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16050:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16061:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16046:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16046:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16066:34:153",
                                "type": "",
                                "value": "AccessControl: can only renounce"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16039:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16039:62:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16039:62:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16121:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16132:2:153",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16117:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16117:18:153"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16137:17:153",
                                "type": "",
                                "value": " roles for self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16110:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16110:45:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16110:45:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16164:27:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16176:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16187:3:153",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16172:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16172:19:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16164:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15937:9:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15951:4:153",
                        "type": ""
                      }
                    ],
                    "src": "15786:411:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16303:76:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16313:26:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16325:9:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16336:2:153",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16321:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16321:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16313:4:153"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16355:9:153"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16366:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16348:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16348:25:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16348:25:153"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16272:9:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16283:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16294:4:153",
                        "type": ""
                      }
                    ],
                    "src": "16202:177:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16533:141:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16550:9:153"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16561:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16543:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16543:25:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16543:25:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16588:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16599:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16584:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16584:18:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16604:2:153",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16577:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16577:30:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16577:30:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16616:52:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16641:6:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16653:9:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16664:2:153",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16649:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16649:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "16624:16:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16624:44:153"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16616:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16494:9:153",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16505:6:153",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16513:6:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16524:4:153",
                        "type": ""
                      }
                    ],
                    "src": "16384:290:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16727:80:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16754:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16756:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16756:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16756:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16743:1:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "16750:1:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "16746:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16746:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16740:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16740:13:153"
                          },
                          "nodeType": "YulIf",
                          "src": "16737:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16785:16:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16796:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16799:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16792:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16792:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "16785:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16710:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16713:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "16719:3:153",
                        "type": ""
                      }
                    ],
                    "src": "16679:128:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16858:74:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16881:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "16883:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16883:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16883:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16878:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "16871:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16871:9:153"
                          },
                          "nodeType": "YulIf",
                          "src": "16868:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16912:14:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16921:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16924:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "16917:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16917:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "16912:1:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16843:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16846:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "16852:1:153",
                        "type": ""
                      }
                    ],
                    "src": "16812:120:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16989:116:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17048:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17050:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17050:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17050:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "17020:1:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "17013:6:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17013:9:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "17006:6:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17006:17:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "17028:1:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "17039:1:153",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "17035:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "17035:6:153"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "17043:1:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "17031:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17031:14:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17025:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17025:21:153"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17002:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17002:45:153"
                          },
                          "nodeType": "YulIf",
                          "src": "16999:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17079:20:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17094:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17097:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "17090:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17090:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "17079:7:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16968:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16971:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "16977:7:153",
                        "type": ""
                      }
                    ],
                    "src": "16937:168:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17159:76:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17181:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17183:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17183:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17183:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17175:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17178:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "17172:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17172:8:153"
                          },
                          "nodeType": "YulIf",
                          "src": "17169:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17212:17:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17224:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17227:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "17220:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17220:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "17212:4:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "17141:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "17144:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "17150:4:153",
                        "type": ""
                      }
                    ],
                    "src": "17110:125:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17293:205:153",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17303:10:153",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17312:1:153",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "17307:1:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17372:63:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "17397:3:153"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "17402:1:153"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "17393:3:153"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17393:11:153"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "17416:3:153"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "17421:1:153"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "17412:3:153"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "17412:11:153"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "17406:5:153"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17406:18:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17386:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17386:39:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17386:39:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17333:1:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17336:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "17330:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17330:13:153"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "17344:19:153",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17346:15:153",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "17355:1:153"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17358:2:153",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "17351:3:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17351:10:153"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "17346:1:153"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "17326:3:153",
                            "statements": []
                          },
                          "src": "17322:113:153"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17461:31:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "17474:3:153"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "17479:6:153"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "17470:3:153"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17470:16:153"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17488:1:153",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17463:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17463:27:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17463:27:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17450:1:153"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17453:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17447:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17447:13:153"
                          },
                          "nodeType": "YulIf",
                          "src": "17444:2:153"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "17271:3:153",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "17276:3:153",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17281:6:153",
                        "type": ""
                      }
                    ],
                    "src": "17240:258:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17550:89:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17577:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17579:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17579:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17579:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17570:5:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17563:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17563:13:153"
                          },
                          "nodeType": "YulIf",
                          "src": "17560:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17608:25:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17619:5:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17630:1:153",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "17626:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17626:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17615:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17615:18:153"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "17608:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17532:5:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "17542:3:153",
                        "type": ""
                      }
                    ],
                    "src": "17503:136:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17699:325:153",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17709:22:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17723:4:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17729:1:153",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "17719:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17719:12:153"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "17709:6:153"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17740:38:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17770:4:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17776:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17766:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17766:12:153"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "17744:18:153",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17817:31:153",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17819:27:153",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "17833:6:153"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17841:4:153",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "17829:3:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17829:17:153"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17819:6:153"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17797:18:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17790:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17790:26:153"
                          },
                          "nodeType": "YulIf",
                          "src": "17787:2:153"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17907:111:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17928:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "17935:3:153",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "17940:10:153",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "17931:3:153"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17931:20:153"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17921:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17921:31:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17921:31:153"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17972:1:153",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17975:4:153",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17965:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17965:15:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17965:15:153"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18000:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18003:4:153",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17993:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17993:15:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17993:15:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17863:18:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17886:6:153"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17894:2:153",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17883:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17883:14:153"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "17860:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17860:38:153"
                          },
                          "nodeType": "YulIf",
                          "src": "17857:2:153"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "17679:4:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17688:6:153",
                        "type": ""
                      }
                    ],
                    "src": "17644:380:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18076:88:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18107:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "18109:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18109:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18109:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18092:5:153"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18103:1:153",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "18099:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18099:6:153"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "18089:2:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18089:17:153"
                          },
                          "nodeType": "YulIf",
                          "src": "18086:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18138:20:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18149:5:153"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18156:1:153",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18145:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18145:13:153"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "18138:3:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "18058:5:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "18068:3:153",
                        "type": ""
                      }
                    ],
                    "src": "18029:135:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18207:74:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18230:22:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "18232:16:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18232:18:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18232:18:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "18227:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "18220:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18220:9:153"
                          },
                          "nodeType": "YulIf",
                          "src": "18217:2:153"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18261:14:153",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "18270:1:153"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "18273:1:153"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "18266:3:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18266:9:153"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "18261:1:153"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "18192:1:153",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "18195:1:153",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "18201:1:153",
                        "type": ""
                      }
                    ],
                    "src": "18169:112:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18318:95:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18335:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18342:3:153",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18347:10:153",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "18338:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18338:20:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18328:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18328:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18328:31:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18375:1:153",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18378:4:153",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18368:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18368:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18368:15:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18399:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18402:4:153",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18392:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18392:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18392:15:153"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18286:127:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18450:95:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18467:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18474:3:153",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18479:10:153",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "18470:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18470:20:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18460:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18460:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18460:31:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18507:1:153",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18510:4:153",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18500:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18500:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18500:15:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18531:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18534:4:153",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18524:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18524:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18524:15:153"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18418:127:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18582:95:153",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18599:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18606:3:153",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18611:10:153",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "18602:3:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18602:20:153"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18592:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18592:31:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18592:31:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18639:1:153",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18642:4:153",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18632:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18632:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18632:15:153"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18663:1:153",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18666:4:153",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18656:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18656:15:153"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18656:15:153"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18550:127:153"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18726:87:153",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18791:16:153",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18800:1:153",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18803:1:153",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18793:6:153"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18793:12:153"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18793:12:153"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "18749:5:153"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "18760:5:153"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18771:3:153",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18776:10:153",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "18767:3:153"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18767:20:153"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "18756:3:153"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18756:32:153"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "18746:2:153"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18746:43:153"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "18739:6:153"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18739:51:153"
                          },
                          "nodeType": "YulIf",
                          "src": "18736:2:153"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "18715:5:153",
                        "type": ""
                      }
                    ],
                    "src": "18682:131:153"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        array := abi_decode_available_length_bytes(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(value3, value3) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(value3, value3) }\n        value3 := abi_decode_available_length_bytes(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value1, value1) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_668ae020fa5e30433665cb15f755fe1e43ffb17050608dda42be9df506228347__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Not default admin\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: transfer of token that i\")\n        mstore(add(headStart, 96), \"s not own\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b40dcb4a6f50613dbdac6c1502e4c8e86c01ed83fae504cf923464a04f126e85__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"NFT id dosent exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_bccfeab7ec673a58dc93184595c5a49c84c19f5523f7412461d0fe84add24d6d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not Minter Role\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e41529282bfb36bd3d99d38af314d8b6474f803ddd94c907b17c39f8cdcc86f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"721Mint: account isnt Minter rol\")\n        mstore(add(headStart, 96), \"e\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n}",
              "id": 153,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x244 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B5E924 GT PUSH3 0x141 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH3 0xC3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH3 0x595 JUMPI DUP1 PUSH4 0xBD2F135A EQ PUSH3 0x5AC JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH3 0x5C3 JUMPI DUP1 PUSH4 0xC892FFFC EQ PUSH3 0x5DA JUMPI DUP1 PUSH4 0xD0DEF521 EQ PUSH3 0x5F1 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH3 0x608 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH3 0x61F JUMPI DUP1 PUSH4 0xD65AB5F2 EQ PUSH3 0x636 JUMPI DUP1 PUSH4 0xDC31BEB6 EQ PUSH3 0x640 JUMPI DUP1 PUSH4 0xDE5912BD EQ PUSH3 0x64A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH3 0x65E JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x75B5E924 EQ PUSH3 0x48A JUMPI DUP1 PUSH4 0x7D659A48 EQ PUSH3 0x494 JUMPI DUP1 PUSH4 0x8EB80EB5 EQ PUSH3 0x4B7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH3 0x4DD JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH3 0x4F4 JUMPI DUP1 PUSH4 0x98B9B236 EQ PUSH3 0x4FE JUMPI DUP1 PUSH4 0x9CE9C7B6 EQ PUSH3 0x521 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH3 0x54D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH3 0x556 JUMPI DUP1 PUSH4 0xB55B8CEB EQ PUSH3 0x56D JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH3 0x1CB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH3 0x390 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH3 0x3A7 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH3 0x3BE JUMPI DUP1 PUSH4 0x48B336CB EQ PUSH3 0x3D5 JUMPI DUP1 PUSH4 0x5456BF13 EQ PUSH3 0x401 JUMPI DUP1 PUSH4 0x59360C04 EQ PUSH3 0x418 JUMPI DUP1 PUSH4 0x5E6894FC EQ PUSH3 0x42F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH3 0x452 JUMPI DUP1 PUSH4 0x6B4D1F0C EQ PUSH3 0x469 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH3 0x473 JUMPI PUSH3 0x244 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x249 JUMPI DUP1 PUSH4 0x56524EA EQ PUSH3 0x275 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH3 0x2AC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH3 0x2C5 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH3 0x2F5 JUMPI DUP1 PUSH4 0xBB78EC1 EQ PUSH3 0x30E JUMPI DUP1 PUSH4 0x1095B4DF EQ PUSH3 0x325 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH3 0x33C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH3 0x353 JUMPI DUP1 PUSH4 0x272264D3 EQ PUSH3 0x379 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x260 PUSH3 0x25A CALLDATASIZE PUSH1 0x4 PUSH3 0x2299 JUMP JUMPDEST PUSH3 0x675 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x29D PUSH32 0x2A0F2A070EB463D9807435B07A6DBFEEDE905DD039B03EFC105C79DAF0C84348 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x26C JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0x68A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x26C SWAP2 SWAP1 PUSH3 0x2468 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x725 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x26C JUMP JUMPDEST PUSH3 0x30C PUSH3 0x306 CALLDATASIZE PUSH1 0x4 PUSH3 0x222F JUMP JUMPDEST PUSH3 0x7B5 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x2B6 PUSH3 0x31F CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x8D1 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x336 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x973 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x34D CALLDATASIZE PUSH1 0x4 PUSH3 0x20DF JUMP JUMPDEST PUSH3 0x98D JUMP JUMPDEST PUSH3 0x29D PUSH3 0x364 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x38A CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x9C5 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0x9EB JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3B8 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0xA16 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x3CF CALLDATASIZE PUSH1 0x4 PUSH3 0x20DF JUMP JUMPDEST PUSH3 0xA98 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x412 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0xAB5 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x429 CALLDATASIZE PUSH1 0x4 PUSH3 0x22D7 JUMP JUMPDEST PUSH3 0xBE6 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x440 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x463 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0xD1E JUMP JUMPDEST PUSH3 0x30C PUSH3 0xD97 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x484 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH3 0xE87 JUMP JUMPDEST PUSH3 0x30C PUSH3 0xF10 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x4A5 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x4C8 CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x4EE CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0xF51 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x50F CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x2DC PUSH3 0x532 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x29D PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x567 CALLDATASIZE PUSH1 0x4 PUSH3 0x21A0 JUMP JUMPDEST PUSH3 0xF62 JUMP JUMPDEST PUSH3 0x29D PUSH32 0xA9C8C3E87C79E0DA85CF2D427E2102D48DB1379529B967D6604D431F1437723F DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH3 0x211F JUMP JUMPDEST PUSH3 0x1033 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x5BD CALLDATASIZE PUSH1 0x4 PUSH3 0x2338 JUMP JUMPDEST PUSH3 0x1072 JUMP JUMPDEST PUSH3 0x2B6 PUSH3 0x5D4 CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST PUSH3 0x10B2 JUMP JUMPDEST PUSH3 0x260 PUSH3 0x5EB CALLDATASIZE PUSH1 0x4 PUSH3 0x208B JUMP JUMPDEST PUSH3 0x1185 JUMP JUMPDEST PUSH3 0x29D PUSH3 0x602 CALLDATASIZE PUSH1 0x4 PUSH3 0x21DE JUMP JUMPDEST PUSH3 0x125F JUMP JUMPDEST PUSH3 0x29D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x630 CALLDATASIZE PUSH1 0x4 PUSH3 0x2274 JUMP JUMPDEST PUSH3 0x135D JUMP JUMPDEST PUSH3 0x30C PUSH3 0x1387 JUMP JUMPDEST PUSH3 0x29D PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x30C PUSH3 0x65B CALLDATASIZE PUSH1 0x4 PUSH3 0x225B JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x260 PUSH3 0x66F CALLDATASIZE PUSH1 0x4 PUSH3 0x20A8 JUMP JUMPDEST PUSH3 0x13B3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x682 DUP3 PUSH3 0x13EF JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH3 0x69B SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x6C9 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x71A JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x6EE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x71A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x6FC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x732 DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x799 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x7C2 DUP3 PUSH3 0xD1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH3 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH3 0x851 JUMPI POP PUSH3 0x851 DUP2 CALLER PUSH3 0x66F JUMP JUMPDEST PUSH3 0x8C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B995C881B9BDC88185C1C1C9BDD995908199BDC88185B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x1434 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x8EC SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x91A SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x96B JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x93F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x96B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x94D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x981 DUP4 PUSH3 0xAB5 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0x999 CALLER DUP3 PUSH3 0x14A4 JUMP JUMPDEST PUSH3 0x9B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24FC JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 DUP4 PUSH3 0x157A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9D5 PUSH1 0x1 NUMBER PUSH3 0x25BC JUMP JUMPDEST BLOCKHASH SWAP1 POP PUSH3 0x9E4 DUP2 DUP5 PUSH3 0x1726 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0xA0A DUP2 CALLER JUMPDEST PUSH3 0x1734 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x17A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH3 0xA88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0xA94 DUP3 DUP3 PUSH3 0x182D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH3 0x1033 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x80 SHL DUP4 LT PUSH3 0xAD9 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 PUSH3 0xAD6 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP4 LT PUSH3 0xAFA JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 PUSH3 0xAF7 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP4 LT PUSH3 0xB1C JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB19 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH3 0x10000 DUP4 LT PUSH3 0xB3C JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB39 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x100 DUP4 LT PUSH3 0xB5B JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB58 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x10 DUP4 LT PUSH3 0xB79 JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB76 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x4 DUP4 LT PUSH3 0xB97 JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 PUSH3 0xB94 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x2 DUP4 LT PUSH3 0xBB5 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 PUSH3 0xBB2 SWAP1 DUP3 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x909C57D5C6AC08245CF2A6DE3900E2B868513FA59099B92B27D8DB823D92DF9C SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xBF4 DUP2 CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xC36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737BA103232B330BAB63A1030B236B4B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xC44 ADDRESS DUP6 PUSH3 0x125F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH3 0xC67 SWAP1 PUSH3 0x1EF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xC9B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP2 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEF9C0462F3702100D0FE56E120E5D1BAD81B72AFA45EF3A6FCD7B40E4E6D8B06 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP1 DUP2 OR DUP3 SSTORE DUP6 MSTORE PUSH1 0xD DUP4 MSTORE SWAP1 DUP5 KECCAK256 DUP7 SWAP1 SSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 MSTORE SWAP1 SLOAD AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x682 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xDBF PUSH1 0x2 PUSH3 0xDB8 PUSH1 0x11 SLOAD PUSH1 0x16 SLOAD PUSH3 0x13E1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH3 0x13E1 JUMP JUMPDEST PUSH1 0x16 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP2 JUMPDEST DUP5 DUP2 GT PUSH3 0xE80 JUMPI PUSH3 0xDF3 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH3 0x1897 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP7 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xBBCBAE1C475B8DE12A83D866F05A6C253F2AF9B5A7E299AA0D6F9FC50FB66E1E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0xE5A DUP3 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP3 POP PUSH3 0xE69 DUP4 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP2 POP DUP1 PUSH3 0xE77 DUP2 PUSH3 0x265C JUMP JUMPDEST SWAP2 POP POP PUSH3 0xDCB JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xEF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0xF1A PUSH3 0x18CB JUMP JUMPDEST PUSH3 0xF24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH3 0x69B SWAP1 PUSH3 0x261F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH3 0xFB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH3 0x1027 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x103F CALLER DUP4 PUSH3 0x14A4 JUMP JUMPDEST PUSH3 0x105E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24FC JUMP JUMPDEST PUSH3 0x106C DUP5 DUP5 DUP5 DUP5 PUSH3 0x1930 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 MSTORE DUP4 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x2 DUP2 LT PUSH3 0x10A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP4 POP DUP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x10BF DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x10DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0x10F9 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x1127 SWAP1 PUSH3 0x261F JUMP JUMPDEST DUP1 ISZERO PUSH3 0x1178 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x114C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x1178 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x115A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1191 PUSH3 0x18CB JUMP JUMPDEST PUSH3 0x119B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xBBF6061B PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH3 0x11E0 SWAP2 PUSH3 0x2398 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x121F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1224 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH3 0x1258 JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0x1248 SWAP2 SWAP1 PUSH3 0x231F JUMP JUMPDEST SWAP1 POP PUSH3 0x1256 DUP6 DUP3 PUSH3 0x196A JUMP JUMPDEST POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x127C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732314D696E743A206163636F756E742069736E74204D696E74657220726F6C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x12E9 DUP4 PUSH3 0x12E3 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x19AD JUMP JUMPDEST PUSH3 0x12FE PUSH3 0x12F7 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST DUP4 PUSH3 0x1AE8 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x130A PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH3 0x131B PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x9E0BFAF38878AAD3EBD19B8C8065288EB130F0499A7378363D4652515588AC96 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH3 0x134E SWAP3 SWAP2 SWAP1 PUSH3 0x254D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x137B DUP2 CALLER PUSH3 0xA04 JUMP JUMPDEST PUSH3 0x8CC DUP4 DUP4 PUSH3 0x182D JUMP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH1 0x12 SSTORE PUSH1 0x17 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0xF24 PUSH3 0xD97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9E4 DUP3 DUP5 PUSH3 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x682 JUMPI POP PUSH3 0x682 DUP3 PUSH3 0x1B8E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH3 0x146B DUP3 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14B1 DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x1514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1521 DUP4 PUSH3 0xD1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH3 0x155F JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1554 DUP5 PUSH3 0x725 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH3 0x1572 JUMPI POP PUSH3 0x1572 DUP2 DUP6 PUSH3 0x13B3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x158F DUP3 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x15F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x165D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x166A PUSH1 0x0 DUP3 PUSH3 0x1434 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x1695 SWAP1 DUP5 SWAP1 PUSH3 0x25BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x16C5 SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9E4 DUP3 DUP5 PUSH3 0x267A JUMP JUMPDEST PUSH3 0x1740 DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xA94 JUMPI PUSH3 0x175B DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH3 0x1BE1 JUMP JUMPDEST PUSH3 0x1768 DUP4 PUSH1 0x20 PUSH3 0x1BE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x177B SWAP3 SWAP2 SWAP1 PUSH3 0x23B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x790 SWAP2 PUSH1 0x4 ADD PUSH3 0x2468 JUMP JUMPDEST PUSH3 0x17AF DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST PUSH3 0xA94 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x17E9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH3 0x1839 DUP3 DUP3 PUSH3 0xF26 JUMP JUMPDEST ISZERO PUSH3 0xA94 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x11 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH3 0x8CC SWAP1 DUP3 PUSH1 0x2 PUSH3 0x1EFF JUMP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH3 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x12 SLOAD NUMBER PUSH3 0x18F0 SWAP2 SWAP1 PUSH3 0x25BC JUMP JUMPDEST SWAP1 POP PUSH1 0x13 SLOAD DUP2 LT PUSH3 0x1928 JUMPI PUSH1 0x0 PUSH1 0x13 SLOAD DUP3 PUSH3 0x190E SWAP2 SWAP1 PUSH3 0x267A JUMP JUMPDEST SWAP1 POP PUSH1 0x14 SLOAD DUP2 GT PUSH3 0x1926 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH3 0x722 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH3 0x193D DUP5 DUP5 DUP5 PUSH3 0x157A JUMP JUMPDEST PUSH3 0x194B DUP5 DUP5 DUP5 DUP5 PUSH3 0x1DD6 JUMP JUMPDEST PUSH3 0x106C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x247D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP1 DUP5 MSTORE PUSH1 0xE SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH3 0x19A3 SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x1A05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x1A10 DUP2 PUSH3 0x1417 JUMP JUMPDEST ISZERO PUSH3 0x1A5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x1A8A SWAP1 DUP5 SWAP1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH3 0x1B03 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xF26 JUMP JUMPDEST PUSH3 0x1B43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x4E6F74204D696E74657220526F6C65 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH3 0x1B4E DUP3 PUSH3 0x1417 JUMP JUMPDEST PUSH3 0x1B6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x24CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH3 0x8CC SWAP3 DUP5 ADD SWAP1 PUSH3 0x1F42 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x1BC0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH3 0x682 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH3 0x682 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x1BF2 DUP4 PUSH1 0x2 PUSH3 0x259A JUMP JUMPDEST PUSH3 0x1BFF SWAP1 PUSH1 0x2 PUSH3 0x2568 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1C25 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x1C50 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1C7A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x1CB8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x1CDE DUP5 PUSH1 0x2 PUSH3 0x259A JUMP JUMPDEST PUSH3 0x1CEB SWAP1 PUSH1 0x1 PUSH3 0x2568 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x1D85 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x1D2F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x1D54 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x1D7D DUP2 PUSH3 0x2605 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CEE JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0x9E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x790 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH3 0x1EE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH3 0x1E1D SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1E38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1E6B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x1E68 SWAP2 DUP2 ADD SWAP1 PUSH3 0x22B8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1ECB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0x1E9C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1EA1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH3 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x790 SWAP1 PUSH3 0x247D JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH3 0x1572 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xCA2 DUP1 PUSH3 0x26EB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x1F30 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1F30 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1F13 JUMP JUMPDEST POP PUSH3 0x1F3E SWAP3 SWAP2 POP PUSH3 0x1FBE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1F50 SWAP1 PUSH3 0x261F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1F74 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1F30 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1F8F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1F30 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1F30 JUMPI SWAP2 DUP3 ADD DUP3 DUP2 GT ISZERO PUSH3 0x1F30 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1F13 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1F3E JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT ISZERO PUSH3 0x1FF2 JUMPI PUSH3 0x1FF2 PUSH3 0x26BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x201D JUMPI PUSH3 0x201D PUSH3 0x26BD JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH3 0x2037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x207A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x9E4 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0x1FD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x209D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x9E4 DUP3 PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x20BB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x20C6 DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x20F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x20FF DUP5 PUSH3 0x2051 JUMP JUMPDEST SWAP3 POP PUSH3 0x210F PUSH1 0x20 DUP6 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x2135 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x2140 DUP6 PUSH3 0x2051 JUMP JUMPDEST SWAP4 POP PUSH3 0x2150 PUSH1 0x20 DUP7 ADD PUSH3 0x2051 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2172 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH3 0x2183 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x2194 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH3 0x1FD5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x21B3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x21BE DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x21D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x21F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x21FC DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2217 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x2225 DUP6 DUP3 DUP7 ADD PUSH3 0x2069 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2242 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x224D DUP4 PUSH3 0x2051 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x226D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2287 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x22AB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x9E4 DUP2 PUSH3 0x26D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x22CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x9E4 DUP2 PUSH3 0x26D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x22EA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2300 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x230E DUP6 DUP3 DUP7 ADD PUSH3 0x2069 JUMP JUMPDEST SWAP3 POP POP PUSH3 0x20D6 PUSH1 0x20 DUP5 ADD PUSH3 0x2051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2331 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x234E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x2384 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x25D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x23AC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25D6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP3 MSTORE DUP4 MLOAD PUSH3 0x23EA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25D6 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x241D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25D6 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x245E SWAP1 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH3 0x9E4 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x139195081A5908191BDCD95B9D08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x1572 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x236A JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x257E JUMPI PUSH3 0x257E PUSH3 0x2691 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x2595 JUMPI PUSH3 0x2595 PUSH3 0x26A7 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x25B7 JUMPI PUSH3 0x25B7 PUSH3 0x2691 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x25D1 JUMPI PUSH3 0x25D1 PUSH3 0x2691 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x25F3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x25D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x106C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x2617 JUMPI PUSH3 0x2617 PUSH3 0x2691 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2634 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2656 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x2673 JUMPI PUSH3 0x2673 PUSH3 0x2691 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x268C JUMPI PUSH3 0x268C PUSH3 0x26A7 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0x65B JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xCA2 CODESIZE SUB DUP1 PUSH2 0xCA2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x133 JUMP JUMPDEST PUSH2 0x3A PUSH1 0x0 CALLER PUSH2 0x6B JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x165 JUMP JUMPDEST PUSH2 0x75 DUP3 DUP3 PUSH2 0x79 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x75 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x145 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x14E DUP4 PUSH2 0x117 JUMP JUMPDEST SWAP2 POP PUSH2 0x15C PUSH1 0x20 DUP5 ADD PUSH2 0x117 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xB2E DUP1 PUSH2 0x174 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x2A3AC08C EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xBBF6061B EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0xC3FE3E28 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xF4B9FA75 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x903 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xE9 PUSH32 0xE39604301A5DF21DE489C846135593D1F32826F514AFA2544BDBE9ACE2BFAE4A DUP2 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x131 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x212 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH2 0xE9 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0xE9 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x17C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x17C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1E0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x203 DUP2 CALLER JUMPDEST PUSH2 0x5AD JUMP JUMPDEST PUSH2 0x20D DUP4 DUP4 PUSH2 0x611 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x287 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x291 DUP3 DUP3 PUSH2 0x695 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2F3 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x385 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D5 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F2 SWAP3 SWAP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x444 SWAP2 SWAP1 PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x48A SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP3 SWAP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x8E3 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xBDD983D6BAF07AAB2A84779F0FC201C6BF84AB638AD825FA90E0E370F04C39DF SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5A3 DUP2 CALLER PUSH2 0x1FE JUMP JUMPDEST PUSH2 0x20D DUP4 DUP4 PUSH2 0x695 JUMP JUMPDEST PUSH2 0x5B7 DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x291 JUMPI PUSH2 0x5CF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x5DA DUP4 PUSH1 0x20 PUSH2 0x6FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5EB SWAP3 SWAP2 SWAP1 PUSH2 0x995 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x27E SWAP2 PUSH1 0x4 ADD PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x61B DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x291 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x651 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x69F DUP3 DUP3 PUSH2 0x295 JUMP JUMPDEST ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x709 DUP4 PUSH1 0x2 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x714 SWAP1 PUSH1 0x2 PUSH2 0xA64 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x73A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x764 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x78D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x7CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x7EE DUP5 PUSH1 0x2 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x7F9 SWAP1 PUSH1 0x1 PUSH2 0xA64 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x88D JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x85F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x886 DUP2 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0x7FC JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x27E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8DC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x914 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x94A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x966 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP3 MSTORE DUP4 MLOAD PUSH2 0x9C7 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x9F8 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA9B JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA50 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0xAE2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA96 JUMPI PUSH2 0xA96 PUSH2 0xAE2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA9E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xADA JUMPI PUSH2 0xADA PUSH2 0xAE2 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x635BA3C15021E4B36DBF26 PUSH32 0xD30EAD7BDE5F793D2F5EEE41A499435A1038264736F6C634300080200339F2D CREATE INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xA4253755F8 AND SWAP1 0xA7 0x2D SWAP10 0xAD SWAP11 SMOD 0xEE SWAP16 0x1F 0xAD DUP13 MUL CALLER RETURN ADDRESS 0xC1 PUSH25 0xEC25529533E95C64736F6C6343000802003300000000000000 ",
          "sourceMap": "252:5642:150:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;918:174:149;;;;;;:::i;:::-;;:::i;:::-;;;8354:14:153;;8347:22;8329:41;;8317:2;8302:18;918:174:149;;;;;;;;297:60;;334:23;297:60;;;;;8527:25:153;;;8515:2;8500:18;297:60:149;8482:76:153;2408:98:106;;;:::i;:::-;;;;;;;:::i;3931:217::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;7343:32:153;;;7325:51;;7313:2;7298:18;3931:217:106;7280:102:153;3482:388:106;;;;;;:::i;:::-;;:::i;:::-;;603:42:149;;;;;;:::i;:::-;;:::i;4468:171:150:-;;;;;;:::i;:::-;;:::i;4795:300:106:-;;;;;;:::i;:::-;;:::i;5348:121:0:-;;;;;;:::i;:::-;5414:7;5440:12;;;:6;:12;;;;;:22;;;;5348:121;3156:186:150;;;;;;:::i;:::-;;:::i;5719:145:0:-;;;;;;:::i;:::-;;:::i;6736:214::-;;;;;;:::i;:::-;;:::i;5161:149:106:-;;;;;;:::i;:::-;;:::i;1300:44:150:-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1300:44:150;;;155:470:152;;;;;;:::i;:::-;;:::i;4645:649:150:-;;;;;;:::i;:::-;;:::i;652:43:149:-;;;;;;:::i;:::-;;;;;;;;;;;;;;2111:235:106;;;;;;:::i;:::-;;:::i;3928:535:150:-;;;:::i;1849:205:106:-;;;;;;:::i;:::-;;:::i;1945:122:150:-;;;:::i;669:52::-;;;;;;:::i;:::-;;;;;;;;;;;;;;1251:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4374:137:0;;;;;;:::i;:::-;;:::i;2570:102:106:-;;;:::i;727:40:150:-;;;;;;:::i;:::-;;;;;;;;;;;;;;611:52;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;611:52:150;;;2394:49:0;;2439:4;2394:49;;4215:290:106;;;;;;:::i;:::-;;:::i;363:62:149:-;;401:24;363:62;;5376:282:106;;;;;;:::i;:::-;;:::i;1165:80:150:-;;;;;;:::i;:::-;;:::i;1593:233:149:-;;;;;;:::i;:::-;;:::i;5472:418:150:-;;;;;;:::i;:::-;;:::i;1832:453:149:-;;;;;;:::i;:::-;;:::i;229:62::-;;-1:-1:-1;;;;;;;;;;;229:62:149;;6098:147:0;;;;;;:::i;:::-;;:::i;1772:168:150:-;;;:::i;836:24::-;;;;;;3348:405;;;;;;:::i;:::-;;;4571:162:106;;;;;;:::i;:::-;;:::i;918:174:149:-;1026:4;1049:36;1073:11;1049:23;:36::i;:::-;1042:43;;918:174;;;;:::o;2408:98:106:-;2462:13;2494:5;2487:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2408:98;;:::o;3931:217::-;4007:7;4034:16;4042:7;4034;:16::i;:::-;4026:73;;;;-1:-1:-1;;;4026:73:106;;13251:2:153;4026:73:106;;;13233:21:153;13290:2;13270:18;;;13263:30;13329:34;13309:18;;;13302:62;-1:-1:-1;;;13380:18:153;;;13373:42;13432:19;;4026:73:106;;;;;;;;;-1:-1:-1;4117:24:106;;;;:15;:24;;;;;;-1:-1:-1;;;;;4117:24:106;;3931:217::o;3482:388::-;3562:13;3578:23;3593:7;3578:14;:23::i;:::-;3562:39;;3625:5;-1:-1:-1;;;;;3619:11:106;:2;-1:-1:-1;;;;;3619:11:106;;;3611:57;;;;-1:-1:-1;;;3611:57:106;;14422:2:153;3611:57:106;;;14404:21:153;14461:2;14441:18;;;14434:30;14500:34;14480:18;;;14473:62;-1:-1:-1;;;14551:18:153;;;14544:31;14592:19;;3611:57:106;14394:223:153;3611:57:106;665:10:124;-1:-1:-1;;;;;3687:21:106;;;;:62;;-1:-1:-1;3712:37:106;3729:5;665:10:124;3736:12:106;586:96:124;3712:37:106;3679:152;;;;-1:-1:-1;;;3679:152:106;;11644:2:153;3679:152:106;;;11626:21:153;11683:2;11663:18;;;11656:30;11722:34;11702:18;;;11695:62;-1:-1:-1;;;11773:18:153;;;11766:54;11837:19;;3679:152:106;11616:246:153;3679:152:106;3842:21;3851:2;3855:7;3842:8;:21::i;:::-;3482:388;;;:::o;603:42:149:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4468:171:150:-;4532:6;4550:11;4564:18;4569:12;4564:4;:18::i;:::-;4592:8;:17;;;;4468:171;-1:-1:-1;;;4468:171:150:o;4795:300:106:-;4954:41;665:10:124;4987:7:106;4954:18;:41::i;:::-;4946:103;;;;-1:-1:-1;;;4946:103:106;;;;;;;:::i;:::-;5060:28;5070:4;5076:2;5080:7;5060:9;:28::i;3156:186:150:-;3222:14;;3274:15;3288:1;3274:12;:15;:::i;:::-;3264:26;;-1:-1:-1;3308:27:150;3264:26;3317:17;3308:8;:27::i;:::-;3301:34;3156:186;-1:-1:-1;;;3156:186:150:o;5719:145:0:-;5414:7;5440:12;;;:6;:12;;;;;:22;;;3958:30;3969:4;665:10:124;3975:12:0;3958:10;:30::i;:::-;5832:25:::1;5843:4;5849:7;5832:10;:25::i;6736:214::-:0;-1:-1:-1;;;;;6831:23:0;;665:10:124;6831:23:0;6823:83;;;;-1:-1:-1;;;6823:83:0;;15988:2:153;6823:83:0;;;15970:21:153;16027:2;16007:18;;;16000:30;16066:34;16046:18;;;16039:62;-1:-1:-1;;;16117:18:153;;;16110:45;16172:19;;6823:83:0;15960:237:153;6823:83:0;6917:26;6929:4;6935:7;6917:11;:26::i;:::-;6736:214;;:::o;5161:149:106:-;5264:39;5281:4;5287:2;5291:7;5264:39;;;;;;;;;;;;:16;:39::i;155:470:152:-;194:6;211;-1:-1:-1;;;231:1:152;:11;227:41;;252:3;246:9;;;;257:8;;;;:::i;:::-;;;227:41;-1:-1:-1;;;281:1:152;:10;277:38;;301:2;295:8;;;;305:7;;;;:::i;:::-;;;277:38;333:5;328:1;:10;324:38;;348:2;342:8;;;;352:7;;;;:::i;:::-;;;324:38;380:5;375:1;:10;371:38;;395:2;389:8;;;;399:7;;;;:::i;:::-;;;371:38;427:4;422:1;:9;418:35;;441:1;435:7;;;;444:6;;;;:::i;:::-;;;418:35;471:4;466:1;:9;462:35;;485:1;479:7;;;;488:6;;;;:::i;:::-;;;462:35;515:4;510:1;:9;506:35;;529:1;523:7;;;;532:6;;;;:::i;:::-;;;506:35;559:4;554:1;:9;550:30;;571:1;566:6;;;;574:4;;;;:::i;:::-;;;550:30;594:6;;598:1;;594:6;;;;;617:1;155:470;-1:-1:-1;;155:470:152:o;4645:649:150:-;4741:28;4792:38;4741:28;4819:10;4792:7;:38::i;:::-;4784:68;;;;-1:-1:-1;;;4784:68:150;;11298:2:153;4784:68:150;;;11280:21:153;11337:2;11317:18;;;11310:30;-1:-1:-1;;;11356:18:153;;;11349:47;11413:18;;4784:68:150;11270:167:153;4784:68:150;4866:10;4879:27;4892:4;4899:6;4879:4;:27::i;:::-;5018:3;;4979:44;;4866:40;;-1:-1:-1;4958:18:150;;5003:4;;-1:-1:-1;;;;;5018:3:150;;4979:44;;;:::i;:::-;-1:-1:-1;;;;;7617:15:153;;;7599:34;;7669:15;;7664:2;7649:18;;7642:43;7549:2;7534:18;4979:44:150;;;;;;;;;;;;;;;;;;;;;;;4958:65;;5074:5;5065:6;-1:-1:-1;;;;;5043:37:150;;;;;;;;;;;5123:29;;;;:22;:29;;;;;;;;:47;;-1:-1:-1;;;;;;5123:47:150;-1:-1:-1;;;;;5123:47:150;;;;;;;;5184:39;;:22;:39;;;;;:47;;;5254:29;;;;;;;;;;4645:649;-1:-1:-1;;;4645:649:150:o;2111:235:106:-;2183:7;2218:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2218:16:106;2252:19;2244:73;;;;-1:-1:-1;;;2244:73:106;;12480:2:153;2244:73:106;;;12462:21:153;12519:2;12499:18;;;12492:30;12558:34;12538:18;;;12531:62;-1:-1:-1;;;12609:18:153;;;12602:39;12658:19;;2244:73:106;12452:231:153;3928:535:150;3974:19;3996:52;4046:1;3996:45;4025:15;;3996:24;;:28;;:45;;;;:::i;:::-;:49;;:52::i;:::-;4089:24;;3974:74;;-1:-1:-1;4058:28:150;4165:1;4058:28;4177:280;4198:14;4193:1;:19;4177:280;;4232:34;4244:1;4232:34;;;;;;;;4248:7;4232:34;;;;4257:7;4232:34;;;:11;:34::i;:::-;4344:31;;;;:22;:31;;;;;;;;;4311;;;;;;;;4285:91;;8527:25:153;;;-1:-1:-1;;;;;4344:31:150;;;;4311;;;;4285:91;;8500:18:153;4285:91:150;;;;;;;4400:11;:7;4410:1;4400:11;:::i;:::-;4390:21;-1:-1:-1;4435:11:150;4390:21;4445:1;4435:11;:::i;:::-;4425:21;-1:-1:-1;4214:3:150;;;;:::i;:::-;;;;4177:280;;;;3928:535;;;;:::o;1849:205:106:-;1921:7;-1:-1:-1;;;;;1948:19:106;;1940:74;;;;-1:-1:-1;;;1940:74:106;;12069:2:153;1940:74:106;;;12051:21:153;12108:2;12088:18;;;12081:30;12147:34;12127:18;;;12120:62;-1:-1:-1;;;12198:18:153;;;12191:40;12248:19;;1940:74:106;12041:232:153;1940:74:106;-1:-1:-1;;;;;;2031:16:106;;;;;:9;:16;;;;;;;1849:205::o;1945:122:150:-;1992:17;:15;:17::i;:::-;1984:26;;;;;;1945:122::o;4374:137:0:-;4452:4;4475:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;4475:29:0;;;;;;;;;;;;;;;4374:137::o;2570:102:106:-;2626:13;2658:7;2651:14;;;;;:::i;4215:290::-;-1:-1:-1;;;;;4317:24:106;;665:10:124;4317:24:106;;4309:62;;;;-1:-1:-1;;;4309:62:106;;10531:2:153;4309:62:106;;;10513:21:153;10570:2;10550:18;;;10543:30;-1:-1:-1;;;10589:18:153;;;10582:55;10654:18;;4309:62:106;10503:175:153;4309:62:106;665:10:124;4382:32:106;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;4382:42:106;;;;;;;;;;:53;;-1:-1:-1;;4382:53:106;;;;;;;:42;-1:-1:-1;;;;;4450:48:106;;4489:8;4450:48;;;;8354:14:153;8347:22;8329:41;;8317:2;8302:18;;8284:92;4450:48:106;;;;;;;;4215:290;;:::o;5376:282::-;5507:41;665:10:124;5540:7:106;5507:18;:41::i;:::-;5499:103;;;;-1:-1:-1;;;5499:103:106;;;;;;;:::i;:::-;5612:39;5626:4;5632:2;5636:7;5645:5;5612:13;:39::i;:::-;5376:282;;;;:::o;1165:80:150:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1165:80:150;;-1:-1:-1;;;1165:80:150:o;1593:233:149:-;1666:13;1698:16;1706:7;1698;:16::i;:::-;1690:48;;;;-1:-1:-1;;;1690:48:149;;;;;;;:::i;:::-;1748:23;1774:19;;;:10;:19;;;;;1748:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1748:45:149;;1593:233;-1:-1:-1;;;;;;;1593:233:149:o;5472:418:150:-;5554:12;5585:17;:15;:17::i;:::-;5577:26;;;;;;5684:41;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5684:41:150;-1:-1:-1;;;5684:41:150;;;5655:71;;5614:12;;;;-1:-1:-1;;;;;5655:28:150;;;:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5613:113;;;;5740:7;5737:123;;;5759:10;5783;5772:30;;;;;;;;;;;;:::i;:::-;5759:43;;5812:37;5827:14;5843:5;5812:14;:37::i;:::-;5737:123;;-1:-1:-1;5876:7:150;5472:418;-1:-1:-1;;5472:418:150:o;1832:453:149:-;1898:15;1945:32;-1:-1:-1;;;;;;;;;;;1966:10:149;1945:7;:32::i;:::-;1924:112;;;;-1:-1:-1;;;1924:112:149;;15586:2:153;1924:112:149;;;15568:21:153;15625:2;15605:18;;;15598:30;15664:34;15644:18;;;15637:62;-1:-1:-1;;;15715:18:153;;;15708:31;15756:19;;1924:112:149;15558:223:153;1924:112:149;2047:30;2053:2;2057:19;:9;864:14:125;;773:112;2057:19:149;2047:5;:30::i;:::-;2087:43;2100:19;:9;864:14:125;;773:112;2100:19:149;2121:8;2087:12;:43::i;:::-;2141:13;2157:19;:9;864:14:125;;773:112;2157:19:149;2141:35;;2186:21;:9;978:19:125;;996:1;978:19;;;891:123;2186:21:149;2223:29;2233:8;2243;2223:29;;;;;;;:::i;:::-;;;;;;;;2269:8;1832:453;-1:-1:-1;;;1832:453:149:o;6098:147:0:-;5414:7;5440:12;;;:6;:12;;;;;:22;;;3958:30;3969:4;665:10:124;3975:12:0;586:96:124;3958:30:0;6212:26:::1;6224:4;6230:7;6212:11;:26::i;1772:168:150:-:0;1819:14;;;;1818:15;1810:24;;;;;;1860:12;1844:13;:28;1882:14;:21;;-1:-1:-1;;1882:21:150;1899:4;1882:21;;;1913:19;:17;:19::i;4571:162:106:-;-1:-1:-1;;;;;4691:25:106;;;4668:4;4691:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4571:162::o;3767:96:145:-;3825:7;3851:5;3855:1;3851;:5;:::i;4073:214:0:-;4158:4;-1:-1:-1;;;;;;4181:47:0;;-1:-1:-1;;;4181:47:0;;:99;;;4244:36;4268:11;4244:23;:36::i;7092:125:106:-;7157:4;7180:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7180:16:106;:30;;;7092:125::o;10849:171::-;10923:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;10923:29:106;-1:-1:-1;;;;;10923:29:106;;;;;;;;:24;;10976:23;10923:24;10976:14;:23::i;:::-;-1:-1:-1;;;;;10967:46:106;;;;;;;;;;;10849:171;;:::o;7375:344::-;7468:4;7492:16;7500:7;7492;:16::i;:::-;7484:73;;;;-1:-1:-1;;;7484:73:106;;10885:2:153;7484:73:106;;;10867:21:153;10924:2;10904:18;;;10897:30;10963:34;10943:18;;;10936:62;-1:-1:-1;;;11014:18:153;;;11007:42;11066:19;;7484:73:106;10857:234:153;7484:73:106;7567:13;7583:23;7598:7;7583:14;:23::i;:::-;7567:39;;7635:5;-1:-1:-1;;;;;7624:16:106;:7;-1:-1:-1;;;;;7624:16:106;;:51;;;;7668:7;-1:-1:-1;;;;;7644:31:106;:20;7656:7;7644:11;:20::i;:::-;-1:-1:-1;;;;;7644:31:106;;7624:51;:87;;;;7679:32;7696:5;7703:7;7679:16;:32::i;:::-;7616:96;7375:344;-1:-1:-1;;;;7375:344:106:o;10208:530::-;10332:4;-1:-1:-1;;;;;10305:31:106;:23;10320:7;10305:14;:23::i;:::-;-1:-1:-1;;;;;10305:31:106;;10297:85;;;;-1:-1:-1;;;10297:85:106;;13664:2:153;10297:85:106;;;13646:21:153;13703:2;13683:18;;;13676:30;13742:34;13722:18;;;13715:62;-1:-1:-1;;;13793:18:153;;;13786:39;13842:19;;10297:85:106;13636:231:153;10297:85:106;-1:-1:-1;;;;;10400:16:106;;10392:65;;;;-1:-1:-1;;;10392:65:106;;10126:2:153;10392:65:106;;;10108:21:153;10165:2;10145:18;;;10138:30;10204:34;10184:18;;;10177:62;-1:-1:-1;;;10255:18:153;;;10248:34;10299:19;;10392:65:106;10098:226:153;10392:65:106;10569:29;10586:1;10590:7;10569:8;:29::i;:::-;-1:-1:-1;;;;;10609:15:106;;;;;;:9;:15;;;;;:20;;10628:1;;10609:15;:20;;10628:1;;10609:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10639:13:106;;;;;;:9;:13;;;;;:18;;10656:1;;10639:13;:18;;10656:1;;10639:18;:::i;:::-;;;;-1:-1:-1;;10667:16:106;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10667:21:106;-1:-1:-1;;;;;10667:21:106;;;;;;;;;10704:27;;10667:16;;10704:27;;;;;;;10208:530;;;:::o;4316:96:145:-;4374:7;4400:5;4404:1;4400;:5;:::i;4792:375:0:-;4871:22;4879:4;4885:7;4871;:22::i;:::-;4867:294;;5000:41;5028:7;-1:-1:-1;;;;;5000:41:0;5038:2;5000:19;:41::i;:::-;5096:38;5124:4;5131:2;5096:19;:38::i;:::-;4923:225;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4923:225:0;;;;;;;;;;-1:-1:-1;;;4909:241:0;;;;;;;:::i;7948:224::-;8022:22;8030:4;8036:7;8022;:22::i;:::-;8017:149;;8060:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8060:29:0;;;;;;;;;:36;;-1:-1:-1;;8060:36:0;8092:4;8060:36;;;8142:12;665:10:124;586:96;;8142:12:0;-1:-1:-1;;;;;8115:40:0;8133:7;-1:-1:-1;;;;;8115:40:0;8127:4;8115:40;;;;;;;;;;7948:224;;:::o;8178:225::-;8252:22;8260:4;8266:7;8252;:22::i;:::-;8248:149;;;8322:5;8290:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8290:29:0;;;;;;;;;;:37;;-1:-1:-1;;8290:37:0;;;8346:40;665:10:124;;8290:12:0;;8346:40;;8322:5;8346:40;8178:225;;:::o;3759:164:150:-;3862:13;;3841:35;;;;:20;:35;;;;;;;;3877:15;;3841:52;;;;;;;:61;;;;;;;;:75;;3905:11;3841:75;;:::i;1352:415::-;1436:14;;1397:20;;1436:14;;1428:23;;;;;;1461:14;1493:13;;1478:12;:28;;;;:::i;:::-;1461:45;;1533:17;;1520:9;:30;1517:222;;1565:22;1603:17;;1591:9;:29;;;;:::i;:::-;1565:56;;1660:24;;1639:17;:45;1636:93;;1710:4;1703:11;;;;;;1636:93;1517:222;;1755:5;1748:12;;;1352:415;:::o;6520:269:106:-;6633:28;6643:4;6649:2;6653:7;6633:9;:28::i;:::-;6679:48;6702:4;6708:2;6712:7;6721:5;6679:22;:48::i;:::-;6671:111;;;;-1:-1:-1;;;6671:111:106;;;;;;;:::i;5301:165:150:-;-1:-1:-1;;;;;5389:30:150;;5373:13;5389:30;;;:22;:30;;;;;;;;;5429:20;;;:13;:20;;;;;:30;;5389;;5453:6;;5429:30;;5453:6;;5429:30;:::i;:::-;;;;-1:-1:-1;;;;;5301:165:150:o;8947:372:106:-;-1:-1:-1;;;;;9026:16:106;;9018:61;;;;-1:-1:-1;;;9018:61:106;;12890:2:153;9018:61:106;;;12872:21:153;;;12909:18;;;12902:30;12968:34;12948:18;;;12941:62;13020:18;;9018:61:106;12862:182:153;9018:61:106;9098:16;9106:7;9098;:16::i;:::-;9097:17;9089:58;;;;-1:-1:-1;;;9089:58:106;;9769:2:153;9089:58:106;;;9751:21:153;9808:2;9788:18;;;9781:30;9847;9827:18;;;9820:58;9895:18;;9089:58:106;9741:178:153;9089:58:106;-1:-1:-1;;;;;9214:13:106;;;;;;:9;:13;;;;;:18;;9231:1;;9214:13;:18;;9231:1;;9214:18;:::i;:::-;;;;-1:-1:-1;;9242:16:106;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9242:21:106;-1:-1:-1;;;;;9242:21:106;;;;;;;;9279:33;;9242:16;;;9279:33;;9242:16;;9279:33;8947:372;;:::o;1334:253:149:-;1431:31;-1:-1:-1;;;;;;;;;;;1451:10:149;1431:7;:31::i;:::-;1423:59;;;;-1:-1:-1;;;1423:59:149;;14824:2:153;1423:59:149;;;14806:21:153;14863:2;14843:18;;;14836:30;-1:-1:-1;;;14882:18:153;;;14875:45;14937:18;;1423:59:149;14796:165:153;1423:59:149;1500:16;1508:7;1500;:16::i;:::-;1492:48;;;;-1:-1:-1;;;1492:48:149;;;;;;;:::i;:::-;1550:19;;;;:10;:19;;;;;;;;:30;;;;;;;;:::i;1502:288:106:-;1604:4;-1:-1:-1;;;;;;1627:40:106;;-1:-1:-1;;;1627:40:106;;:104;;-1:-1:-1;;;;;;;1683:48:106;;-1:-1:-1;;;1683:48:106;1627:104;:156;;;-1:-1:-1;;;;;;;;;;871:40:136;;;1747:36:106;763:155:136;1531:437:129;1606:13;1631:19;1663:10;1667:6;1663:1;:10;:::i;:::-;:14;;1676:1;1663:14;:::i;:::-;-1:-1:-1;;;;;1653:25:129;;;;;-1:-1:-1;;;1653:25:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1653:25:129;;1631:47;;-1:-1:-1;;;1688:6:129;1695:1;1688:9;;;;;;-1:-1:-1;;;1688:9:129;;;;;;;;;;;;:15;-1:-1:-1;;;;;1688:15:129;;;;;;;;;-1:-1:-1;;;1713:6:129;1720:1;1713:9;;;;;;-1:-1:-1;;;1713:9:129;;;;;;;;;;;;:15;-1:-1:-1;;;;;1713:15:129;;;;;;;;-1:-1:-1;1743:9:129;1755:10;1759:6;1755:1;:10;:::i;:::-;:14;;1768:1;1755:14;:::i;:::-;1743:26;;1738:128;1775:1;1771;:5;1738:128;;;-1:-1:-1;;;1818:5:129;1826:3;1818:11;1809:21;;;;;-1:-1:-1;;;1809:21:129;;;;;;;;;;;;1797:6;1804:1;1797:9;;;;;;-1:-1:-1;;;1797:9:129;;;;;;;;;;;;:33;-1:-1:-1;;;;;1797:33:129;;;;;;;;-1:-1:-1;1854:1:129;1844:11;;;;;1778:3;;;:::i;:::-;;;1738:128;;;-1:-1:-1;1883:10:129;;1875:55;;;;-1:-1:-1;;;1875:55:129;;8989:2:153;1875:55:129;;;8971:21:153;;;9008:18;;;9001:30;9067:34;9047:18;;;9040:62;9119:18;;1875:55:129;8961:182:153;11573:824:106;11693:4;-1:-1:-1;;;;;11717:13:106;;1078:20:122;1116:8;11713:678:106;;11752:72;;-1:-1:-1;;;11752:72:106;;-1:-1:-1;;;;;11752:36:106;;;;;:72;;665:10:124;;11803:4:106;;11809:7;;11818:5;;11752:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11752:72:106;;;;;;;;-1:-1:-1;;11752:72:106;;;;;;;;;;;;:::i;:::-;;;11748:591;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11995:13:106;;11991:334;;12037:60;;-1:-1:-1;;;12037:60:106;;;;;;;:::i;11991:334::-;12277:6;12271:13;12262:6;12258:2;12254:15;12247:38;11748:591;-1:-1:-1;;;;;;11874:55:106;-1:-1:-1;;;11874:55:106;;-1:-1:-1;11867:62:106;;11713:678;-1:-1:-1;12376:4:106;11573:824;;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:631:153;;-1:-1:-1;;;;;149:2:153;141:6;138:14;135:2;;;155:18;;:::i;:::-;230:2;224:9;198:2;284:15;;-1:-1:-1;;280:24:153;;;306:2;276:33;272:42;260:55;;;330:18;;;350:22;;;327:46;324:2;;;376:18;;:::i;:::-;416:10;412:2;405:22;445:6;436:15;;475:6;467;460:22;515:3;506:6;501:3;497:16;494:25;491:2;;;532:1;529;522:12;491:2;582:6;577:3;570:4;562:6;558:17;545:44;637:1;630:4;621:6;613;609:19;605:30;598:41;;;;88:557;;;;;:::o;650:173::-;718:20;;-1:-1:-1;;;;;767:31:153;;757:42;;747:2;;813:1;810;803:12;828:229;;924:3;917:4;909:6;905:17;901:27;891:2;;946:5;939;932:20;891:2;972:79;1047:3;1038:6;1025:20;1018:4;1010:6;1006:17;972:79;:::i;1062:196::-;;1174:2;1162:9;1153:7;1149:23;1145:32;1142:2;;;1195:6;1187;1180:22;1142:2;1223:29;1242:9;1223:29;:::i;1263:270::-;;;1392:2;1380:9;1371:7;1367:23;1363:32;1360:2;;;1413:6;1405;1398:22;1360:2;1441:29;1460:9;1441:29;:::i;:::-;1431:39;;1489:38;1523:2;1512:9;1508:18;1489:38;:::i;:::-;1479:48;;1350:183;;;;;:::o;1538:338::-;;;;1684:2;1672:9;1663:7;1659:23;1655:32;1652:2;;;1705:6;1697;1690:22;1652:2;1733:29;1752:9;1733:29;:::i;:::-;1723:39;;1781:38;1815:2;1804:9;1800:18;1781:38;:::i;:::-;1771:48;;1866:2;1855:9;1851:18;1838:32;1828:42;;1642:234;;;;;:::o;1881:696::-;;;;;2053:3;2041:9;2032:7;2028:23;2024:33;2021:2;;;2075:6;2067;2060:22;2021:2;2103:29;2122:9;2103:29;:::i;:::-;2093:39;;2151:38;2185:2;2174:9;2170:18;2151:38;:::i;:::-;2141:48;;2236:2;2225:9;2221:18;2208:32;2198:42;;2291:2;2280:9;2276:18;2263:32;-1:-1:-1;;;;;2310:6:153;2307:30;2304:2;;;2355:6;2347;2340:22;2304:2;2383:22;;2436:4;2428:13;;2424:27;-1:-1:-1;2414:2:153;;2470:6;2462;2455:22;2414:2;2498:73;2563:7;2558:2;2545:16;2540:2;2536;2532:11;2498:73;:::i;:::-;2488:83;;;2011:566;;;;;;;:::o;2582:367::-;;;2708:2;2696:9;2687:7;2683:23;2679:32;2676:2;;;2729:6;2721;2714:22;2676:2;2757:29;2776:9;2757:29;:::i;:::-;2747:39;;2836:2;2825:9;2821:18;2808:32;2883:5;2876:13;2869:21;2862:5;2859:32;2849:2;;2910:6;2902;2895:22;2849:2;2938:5;2928:15;;;2666:283;;;;;:::o;2954:416::-;;;3093:2;3081:9;3072:7;3068:23;3064:32;3061:2;;;3114:6;3106;3099:22;3061:2;3142:29;3161:9;3142:29;:::i;:::-;3132:39;;3222:2;3211:9;3207:18;3194:32;-1:-1:-1;;;;;3241:6:153;3238:30;3235:2;;;3286:6;3278;3271:22;3235:2;3314:50;3356:7;3347:6;3336:9;3332:22;3314:50;:::i;:::-;3304:60;;;3051:319;;;;;:::o;3375:264::-;;;3504:2;3492:9;3483:7;3479:23;3475:32;3472:2;;;3525:6;3517;3510:22;3472:2;3553:29;3572:9;3553:29;:::i;:::-;3543:39;3629:2;3614:18;;;;3601:32;;-1:-1:-1;;;3462:177:153:o;3644:190::-;;3756:2;3744:9;3735:7;3731:23;3727:32;3724:2;;;3777:6;3769;3762:22;3724:2;-1:-1:-1;3805:23:153;;3714:120;-1:-1:-1;3714:120:153:o;3839:264::-;;;3968:2;3956:9;3947:7;3943:23;3939:32;3936:2;;;3989:6;3981;3974:22;3936:2;4030:9;4017:23;4007:33;;4059:38;4093:2;4082:9;4078:18;4059:38;:::i;4108:255::-;;4219:2;4207:9;4198:7;4194:23;4190:32;4187:2;;;4240:6;4232;4225:22;4187:2;4284:9;4271:23;4303:30;4327:5;4303:30;:::i;4368:259::-;;4490:2;4478:9;4469:7;4465:23;4461:32;4458:2;;;4511:6;4503;4496:22;4458:2;4548:9;4542:16;4567:30;4591:5;4567:30;:::i;4632:416::-;;;4771:2;4759:9;4750:7;4746:23;4742:32;4739:2;;;4792:6;4784;4777:22;4739:2;4837:9;4824:23;-1:-1:-1;;;;;4862:6:153;4859:30;4856:2;;;4907:6;4899;4892:22;4856:2;4935:50;4977:7;4968:6;4957:9;4953:22;4935:50;:::i;:::-;4925:60;;;5004:38;5038:2;5027:9;5023:18;5004:38;:::i;5248:194::-;;5371:2;5359:9;5350:7;5346:23;5342:32;5339:2;;;5392:6;5384;5377:22;5339:2;-1:-1:-1;5420:16:153;;5329:113;-1:-1:-1;5329:113:153:o;5447:395::-;;;;;5610:3;5598:9;5589:7;5585:23;5581:33;5578:2;;;5632:6;5624;5617:22;5578:2;-1:-1:-1;;5660:23:153;;;5730:2;5715:18;;5702:32;;-1:-1:-1;5781:2:153;5766:18;;5753:32;;5832:2;5817:18;5804:32;;-1:-1:-1;5568:274:153;-1:-1:-1;5568:274:153:o;5847:257::-;;5926:5;5920:12;5953:6;5948:3;5941:19;5969:63;6025:6;6018:4;6013:3;6009:14;6002:4;5995:5;5991:16;5969:63;:::i;:::-;6086:2;6065:15;-1:-1:-1;;6061:29:153;6052:39;;;;6093:4;6048:50;;5896:208;-1:-1:-1;;5896:208:153:o;6109:274::-;;6276:6;6270:13;6292:53;6338:6;6333:3;6326:4;6318:6;6314:17;6292:53;:::i;:::-;6361:16;;;;;6246:137;-1:-1:-1;;6246:137:153:o;6388:786::-;;-1:-1:-1;;;6794:3:153;6787:38;6854:6;6848:13;6870:62;6925:6;6920:2;6915:3;6911:12;6904:4;6896:6;6892:17;6870:62;:::i;:::-;-1:-1:-1;;;6991:2:153;6951:16;;;6983:11;;;6976:40;7041:13;;7063:63;7041:13;7112:2;7104:11;;7097:4;7085:17;;7063:63;:::i;:::-;7146:17;7165:2;7142:26;;6777:397;-1:-1:-1;;;;6777:397:153:o;7696:488::-;-1:-1:-1;;;;;7965:15:153;;;7947:34;;8017:15;;8012:2;7997:18;;7990:43;8064:2;8049:18;;8042:34;;;8112:3;8107:2;8092:18;;8085:31;;;7696:488;;8133:45;;8158:19;;8150:6;8133:45;:::i;:::-;8125:53;7899:285;-1:-1:-1;;;;;;7899:285:153:o;8563:219::-;;8712:2;8701:9;8694:21;8732:44;8772:2;8761:9;8757:18;8749:6;8732:44;:::i;9148:414::-;9350:2;9332:21;;;9389:2;9369:18;;;9362:30;9428:34;9423:2;9408:18;;9401:62;-1:-1:-1;;;9494:2:153;9479:18;;9472:48;9552:3;9537:19;;9322:240::o;13872:343::-;14074:2;14056:21;;;14113:2;14093:18;;;14086:30;-1:-1:-1;;;14147:2:153;14132:18;;14125:49;14206:2;14191:18;;14046:169::o;14966:413::-;15168:2;15150:21;;;15207:2;15187:18;;;15180:30;15246:34;15241:2;15226:18;;15219:62;-1:-1:-1;;;15312:2:153;15297:18;;15290:47;15369:3;15354:19;;15140:239::o;16384:290::-;;16561:6;16550:9;16543:25;16604:2;16599;16588:9;16584:18;16577:30;16624:44;16664:2;16653:9;16649:18;16641:6;16624:44;:::i;16679:128::-;;16750:1;16746:6;16743:1;16740:13;16737:2;;;16756:18;;:::i;:::-;-1:-1:-1;16792:9:153;;16727:80::o;16812:120::-;;16878:1;16868:2;;16883:18;;:::i;:::-;-1:-1:-1;16917:9:153;;16858:74::o;16937:168::-;;17043:1;17039;17035:6;17031:14;17028:1;17025:21;17020:1;17013:9;17006:17;17002:45;16999:2;;;17050:18;;:::i;:::-;-1:-1:-1;17090:9:153;;16989:116::o;17110:125::-;;17178:1;17175;17172:8;17169:2;;;17183:18;;:::i;:::-;-1:-1:-1;17220:9:153;;17159:76::o;17240:258::-;17312:1;17322:113;17336:6;17333:1;17330:13;17322:113;;;17412:11;;;17406:18;17393:11;;;17386:39;17358:2;17351:10;17322:113;;;17453:6;17450:1;17447:13;17444:2;;;-1:-1:-1;;17488:1:153;17470:16;;17463:27;17293:205::o;17503:136::-;;17570:5;17560:2;;17579:18;;:::i;:::-;-1:-1:-1;;;17615:18:153;;17550:89::o;17644:380::-;17729:1;17719:12;;17776:1;17766:12;;;17787:2;;17841:4;17833:6;17829:17;17819:27;;17787:2;17894;17886:6;17883:14;17863:18;17860:38;17857:2;;;17940:10;17935:3;17931:20;17928:1;17921:31;17975:4;17972:1;17965:15;18003:4;18000:1;17993:15;17857:2;;17699:325;;;:::o;18029:135::-;;-1:-1:-1;;18089:17:153;;18086:2;;;18109:18;;:::i;:::-;-1:-1:-1;18156:1:153;18145:13;;18076:88::o;18169:112::-;;18227:1;18217:2;;18232:18;;:::i;:::-;-1:-1:-1;18266:9:153;;18207:74::o;18286:127::-;18347:10;18342:3;18338:20;18335:1;18328:31;18378:4;18375:1;18368:15;18402:4;18399:1;18392:15;18418:127;18479:10;18474:3;18470:20;18467:1;18460:31;18510:4;18507:1;18500:15;18534:4;18531:1;18524:15;18550:127;18611:10;18606:3;18602:20;18599:1;18592:31;18642:4;18639:1;18632:15;18666:4;18663:1;18656:15;18682:131;-1:-1:-1;;;;;;18756:32:153;;18746:43;;18736:2;;18803:1;18800;18793:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2656400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "372",
            "MATIC_ROLE()": "241",
            "MINTER_ROLE()": "infinite",
            "ZKSYNC_ROLE()": "416",
            "_tokenURIs(uint256)": "infinite",
            "_votesById(uint256)": "1293",
            "addressByNFTId(uint256)": "1266",
            "advanceGame()": "4459",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "1510",
            "determineBracketWinners(uint256)": "431",
            "determineBrackets()": "infinite",
            "determineGameRounds(uint256)": "infinite",
            "donationAddressByNftId(uint256)": "1332",
            "g_rounds()": "1193",
            "gameByBracketByRound(uint256,uint256,uint256,uint256)": "1420",
            "getApproved(uint256)": "2221",
            "getBracketEntropy(uint256)": "infinite",
            "getRoleAdmin(bytes32)": "1344",
            "grantRole(bytes32,address)": "infinite",
            "hasRole(bytes32,address)": "1443",
            "isApprovedForAll(address,address)": "infinite",
            "log2(uint256)": "infinite",
            "mint(address,string)": "infinite",
            "mintNFTAndDeployDonationAddress(string,address)": "infinite",
            "name()": "infinite",
            "nftIdByDonationAddress(address)": "1264",
            "notEliminated(address)": "1287",
            "ownerOf(uint256)": "1433",
            "renounceRole(bytes32,address)": "24346",
            "revokeRole(bytes32,address)": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "23448",
            "startGame()": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "votesPerNftId(uint256)": "1271",
            "withdrawlFromDonationProxyToSelf(address)": "infinite"
          },
          "internal": {
            "changeTime(uint256,uint256)": "infinite",
            "fillBracket(uint256,uint256[2] memory)": "infinite",
            "incrementVotes(address,uint256)": "21884",
            "isBetweenRounds()": "4263",
            "setGameParams(uint256)": "infinite",
            "setupNewGame(uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "MATIC_ROLE()": "056524ea",
          "MINTER_ROLE()": "d5391393",
          "ZKSYNC_ROLE()": "b55b8ceb",
          "_tokenURIs(uint256)": "0bb78ec1",
          "_votesById(uint256)": "5e6894fc",
          "addressByNFTId(uint256)": "48b336cb",
          "advanceGame()": "75b5e924",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "determineBracketWinners(uint256)": "de5912bd",
          "determineBrackets()": "6b4d1f0c",
          "determineGameRounds(uint256)": "1095b4df",
          "donationAddressByNftId(uint256)": "9ce9c7b6",
          "g_rounds()": "dc31beb6",
          "gameByBracketByRound(uint256,uint256,uint256,uint256)": "bd2f135a",
          "getApproved(uint256)": "081812fc",
          "getBracketEntropy(uint256)": "272264d3",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "isApprovedForAll(address,address)": "e985e9c5",
          "log2(uint256)": "5456bf13",
          "mint(address,string)": "d0def521",
          "mintNFTAndDeployDonationAddress(string,address)": "59360c04",
          "name()": "06fdde03",
          "nftIdByDonationAddress(address)": "7d659a48",
          "notEliminated(address)": "8eb80eb5",
          "ownerOf(uint256)": "6352211e",
          "renounceRole(bytes32,address)": "36568abe",
          "revokeRole(bytes32,address)": "d547741f",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "startGame()": "d65ab5f2",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "votesPerNftId(uint256)": "98b9b236",
          "withdrawlFromDonationProxyToSelf(address)": "c892fffc"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num_dancers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundTimeInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dai_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftid\",\"type\":\"uint256\"}],\"name\":\"DancerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bracket\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"GotBracketParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"log\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKSYNC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressByNFTId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bracketNumber\",\"type\":\"uint256\"}],\"name\":\"determineBracketWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"determineBrackets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num_dancers\",\"type\":\"uint256\"}],\"name\":\"determineGameRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donationAddressByNftId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameByBracketByRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unfilled_brackets\",\"type\":\"uint256\"}],\"name\":\"getBracketEntropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bracketNo\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"mintNFTAndDeployDonationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft_donation_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftIdByDonationAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notEliminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesPerNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"donation_proxy\",\"type\":\"address\"}],\"name\":\"withdrawlFromDonationProxyToSelf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zksync/Game.sol\":\"Game\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/oz/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"contracts/oz/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty \\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0xb0134987d9a8b4dca0c4cc0abc13e9bdd68b37771cdb87381b93cf53f5aaccfa\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"contracts/oz/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"contracts/oz/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/oz/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/oz/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/oz/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"contracts/oz/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"contracts/oz/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/oz/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x807ee684a7a893654d9d454c8c27b1c8994891402c5bfb6864c62edcb1425b1c\",\"license\":\"MIT\"},\"contracts/zksync/DancerProxy.sol\":{\"content\":\"pragma solidity  ^0.8.0;\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"./Game.sol\\\";\\n\\ncontract DancerProxy is AccessControl{\\n    bytes32 public constant GAME_LOGIC_ROLE = keccak256(\\\"GAME_LOGIC_ROLE\\\");\\n    IERC20 public dai;\\n    //this is the Voting Logic contract\\n    Game public game;\\n\\n    event WithdrawlToGameLogic(address indexed game);\\n\\n    constructor(address _game_contract, address daiAddress){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        game = Game(_game_contract);\\n        dai = IERC20(daiAddress);\\n    }\\n\\n    function withdrawlDAI() public returns (uint256 bal){\\n        uint256 bal = dai.balanceOf((address (this)));\\n        require(dai.approve(address(game), dai.balanceOf(address(this))));\\n        dai.transfer(address(game), dai.balanceOf(address(this)));\\n\\n        emit WithdrawlToGameLogic(address(game));\\n        return bal;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xccc4f0bda60f586968e3c3d6fd6c2078a5ab89064ea9f87ff64310ead0af2a89\"},\"contracts/zksync/ERC721Mintable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../oz/token/ERC721/ERC721.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/utils/Counters.sol\\\";\\nimport \\\"../oz/utils/Strings.sol\\\";\\n\\ncontract ERC721Mintable is ERC721, AccessControl{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant MATIC_ROLE = keccak256(\\\"MATIC_ROLE\\\");\\n    bytes32 public constant ZKSYNC_ROLE = keccak256(\\\"ZKSYNC_ROLE\\\");\\n\\n//    string private baseURI = \\\"https://gitcoin.dance/\\\";\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    using Strings for uint256;\\n    mapping(uint256=>string) public _tokenURIs;\\n\\n    mapping(uint256=>uint256) public _votesById;\\n\\n    event NFTMinted(uint256 nftId, string uri);\\n\\n    constructor() public ERC721(\\\"Gitcoin Dance NFT\\\", \\\"GITD\\\"){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n//    function resetBaseURI(string memory newBaseURI) external{\\n//        require(\\n//            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n//            \\\"Cant reset URI not admin\\\"\\n//        );\\n//        baseURI = newBaseURI;\\n//\\n//    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal virtual{\\n        require(hasRole(MINTER_ROLE,msg.sender), \\\"Not Minter Role\\\");\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        return _tokenURI;\\n    }\\n\\n    function mint(address to, string memory tokenURI) public returns (uint256 tokenID){\\n        require(\\n            hasRole(MINTER_ROLE, msg.sender),\\n            \\\"721Mint: account isnt Minter role\\\"\\n        );\\n\\n        _mint(to, _tokenIds.current());\\n        _setTokenURI(_tokenIds.current(), tokenURI);\\n\\n        uint mintedId = _tokenIds.current();\\n        _tokenIds.increment();\\n\\n        emit NFTMinted(mintedId, tokenURI);\\n        return mintedId;\\n\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xfac1a0def03bb6ab3f922775741318343180a264585fa70779e2ac8d486baccf\"},\"contracts/zksync/Game.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../oz/utils/math/SafeMath.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/MathLog.sol\\\";\\nimport \\\"./ERC721Mintable.sol\\\";\\nimport \\\"./DancerProxy.sol\\\";\\n\\n\\n//Each \\\"danceoff\\\"\\ncontract Game is MathLog, ERC721Mintable{\\n    using SafeMath for uint;\\n    event DancerCreated(address indexed a, uint indexed nftid);\\n    event GotBracketParticipants(uint bracket, address indexed a, address indexed b);\\n\\n//    address dai_address = 0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa;\\n    IERC20 dai;\\n\\n    mapping(uint=>bool) nftIdHasBeenPlaced;\\n    mapping(uint=>address) public donationAddressByNftId;\\n    mapping(address=>uint) public nftIdByDonationAddress;\\n    mapping(uint=>uint) public votesPerNftId;\\n\\n\\n    //number of the current game\\n    uint g_game_number = 0;\\n    uint public g_rounds = 0;\\n    uint g_current_round;\\n\\n    uint g_start_block;\\n    uint g_round_blocktime = 2000;\\n    uint g_intermission_blocktime = 100;\\n\\n\\n    uint g_number_dancers;\\n    uint g_current_number_dancers = 0;\\n    bool g_game_started = false;\\n    //game_no->round->bracketnumber->addresses in bracket(competetors)\\n    mapping(uint=>mapping(uint=>mapping(uint=>uint[2]))) public gameByBracketByRound;\\n    mapping(address=>bool) public notEliminated;\\n    mapping(uint=>address) public addressByNFTId;\\n\\n\\n    function isBetweenRounds() internal returns (bool isBetweenRounds){\\n        require(g_game_started);\\n        uint gameClock = block.number - g_start_block;\\n\\n        if(gameClock >= g_round_blocktime){\\n            uint blocks_past_round = (gameClock % g_round_blocktime);\\n\\n            if(blocks_past_round <= g_intermission_blocktime){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    function startGame() public {\\n        require(!g_game_started);\\n        g_start_block = block.number;\\n        g_game_started = true;\\n        determineBrackets();\\n\\n    }\\n    function advanceGame() public{\\n        require(isBetweenRounds());\\n        determineBracketWinners(g_current_round);\\n    }\\n    constructor (uint num_dancers, uint roundTimeInBlocks, address dai_address){\\n        dai = IERC20(dai_address);\\n        setGameParams(num_dancers);\\n        setupNewGame(num_dancers);\\n//        contestants = new address[](num_dancers);\\n    }\\n    function setGameParams(uint _num_dancers) internal {\\n        require(_num_dancers % 2 == 0, \\\"this isnt a power of 2\\\");\\n        require(!g_game_started, \\\"game cant be started already\\\");\\n        require(gameByBracketByRound[g_game_number + 1][0][0][1] == 0,\\\"This looks like a round exists here\\\");\\n    }\\n\\n    function setupNewGame(uint _num_dancers) internal {\\n        setGameParams(_num_dancers);\\n        g_game_number ++;\\n        g_current_round = 1;\\n        g_number_dancers = _num_dancers;\\n        g_current_number_dancers = _num_dancers;\\n\\n        determineGameRounds(g_number_dancers);\\n        determineBrackets();\\n\\n    }\\n\\n    function changeTime(uint round_time, uint intermission_time) internal{\\n//        require(hasRole(ADMIN))\\n        g_round_blocktime = round_time;\\n        g_intermission_blocktime = intermission_time;\\n    }\\n\\n    function getBracketEntropy(uint unfilled_brackets) public returns(uint bracketNo){\\n        uint hash = uint(blockhash(block.number -1));\\n        return hash.mod(unfilled_brackets);\\n    }\\n\\n    function determineBracketWinners(uint bracketNumber) public {\\n        //require(bracket number exists in the current round\\n//        address [2] contestants = gameByBracketByRound[g_game_number][g_current_round][bracket];\\n//        address winner = dai.balanceOf(contestants[1]) > dai.balanceOf(contestants[2])? contestants[1] : contestants[2];\\n        //need data structure for winners and loosers;\\n    }\\n\\n    function fillBracket(uint bracket, uint[2] memory dancerIndex) internal {\\n        gameByBracketByRound[g_game_number][g_current_round][bracket] = dancerIndex;\\n    }\\n    function determineBrackets() public {\\n        uint bracketsToMake = g_current_number_dancers.div(g_current_round).div(2);\\n        uint remainingDancersToPlace = g_current_number_dancers;\\n\\n        uint index_a = 0;\\n        uint index_b = 1;\\n\\n        for(uint i = 0; i <= bracketsToMake; i++){\\n            fillBracket(i, [index_a, index_b]);\\n            emit GotBracketParticipants(i, donationAddressByNftId[index_a], donationAddressByNftId[index_b]);\\n            index_a = index_b + 1;\\n            index_b = index_a + 1;\\n        }\\n    }\\n    function determineGameRounds(uint _num_dancers) public returns (uint n) {\\n        uint rounds = log2(_num_dancers);\\n        g_rounds = rounds;\\n        return rounds;\\n    }\\n\\n    function mintNFTAndDeployDonationAddress(string memory nftURI, address creator) public returns (address nft_donation_address){\\n            require(hasRole(DEFAULT_ADMIN_ROLE,msg.sender), \\\"Not default admin\\\");\\n            uint nftId = mint(address(this), nftURI);\\n            //require dai address set\\n            DancerProxy dancer = new DancerProxy(address(this), address(dai));\\n\\n            emit DancerCreated(address(dancer), nftId);\\n\\n        //ghetto linkedlist\\n            donationAddressByNftId[nftId] = address(dancer);\\n            nftIdByDonationAddress[address(dancer)] = nftId;\\n\\n\\n            return donationAddressByNftId[nftId];\\n        }\\n\\n\\n    function incrementVotes(address dancer, uint amount) internal {\\n        uint256 nftId = nftIdByDonationAddress[dancer];\\n        votesPerNftId[nftId] += amount;\\n    }\\n\\n    function withdrawlFromDonationProxyToSelf(address donation_proxy) public returns (bool success){\\n        require(isBetweenRounds());\\n        (bool success, bytes memory returnData) = address(donation_proxy).call(abi.encodeWithSignature(\\\"withdrawlDAI()\\\"));\\n\\n        if(success) {\\n        uint votes = abi.decode(returnData, (uint));\\n        incrementVotes(donation_proxy, votes);\\n        }\\n\\n       return success;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xf830b27086cad571c7e69640a5dae98a717864c38a28ac2b2ea08702ab7ea629\"},\"contracts/zksync/lib/MathLog.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"../../oz/utils/math/SafeMath.sol\\\";\\n\\ncontract MathLog {\\n    using SafeMath for uint;\\n\\n    event Log(uint indexed log);\\n\\n    function  log2(uint x) public returns (uint n){\\n        uint n;\\n        if (x >= 2**128) { x >>= 128; n += 128; }\\n        if (x >= 2**64) { x >>= 64; n += 64; }\\n        if (x >= 2**32) { x >>= 32; n += 32; }\\n        if (x >= 2**16) { x >>= 16; n += 16; }\\n        if (x >= 2**8) { x >>= 8; n += 8; }\\n        if (x >= 2**4) { x >>= 4; n += 4; }\\n        if (x >= 2**2) { x >>= 2; n += 2; }\\n        if (x >= 2**1) {x >>=1; n+=1;}\\n        emit Log(n);\\n        return n;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xd5bde9ded503cd1f65e6afe8ad9e58b7b0ecc4cef2fe86e28ac55ecb41dd79c6\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 12927,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 12929,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 12933,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 12937,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 12941,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 12947,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 62,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_roles",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
          },
          {
            "astId": 19917,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_tokenIds",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Counter)16440_storage"
          },
          {
            "astId": 19924,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 19928,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "_votesById",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20108,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "dai",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IERC20)10799"
          },
          {
            "astId": 20112,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "nftIdHasBeenPlaced",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 20116,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "donationAddressByNftId",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20120,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "nftIdByDonationAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20124,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "votesPerNftId",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20127,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_game_number",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 20130,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_rounds",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 20132,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_current_round",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 20134,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_start_block",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 20137,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_round_blocktime",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 20140,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_intermission_blocktime",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 20142,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_number_dancers",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 20145,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_current_number_dancers",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 20148,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "g_game_started",
            "offset": 0,
            "slot": "23",
            "type": "t_bool"
          },
          {
            "astId": 20158,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "gameByBracketByRound",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage)))"
          },
          {
            "astId": 20162,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "notEliminated",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20166,
            "contract": "contracts/zksync/Game.sol:Game",
            "label": "addressByNFTId",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_address)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)2_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[2]",
            "numberOfBytes": "64"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)10799": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)57_storage"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256[2])",
            "numberOfBytes": "32",
            "value": "t_array(t_uint256)2_storage"
          },
          "t_mapping(t_uint256,t_bool)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(uint256 => uint256[2]))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage)))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256[2])))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)2_storage))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)16440_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 16439,
                "contract": "contracts/zksync/Game.sol:Game",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)57_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 54,
                "contract": "contracts/zksync/Game.sol:Game",
                "label": "members",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 56,
                "contract": "contracts/zksync/Game.sol:Game",
                "label": "adminRole",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/oz/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/zksync/ERC721Mintable.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"../oz/token/ERC721/ERC721.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/utils/Counters.sol\\\";\\nimport \\\"../oz/utils/Strings.sol\\\";\\n\\ncontract ERC721Mintable is ERC721, AccessControl{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant MATIC_ROLE = keccak256(\\\"MATIC_ROLE\\\");\\n    bytes32 public constant ZKSYNC_ROLE = keccak256(\\\"ZKSYNC_ROLE\\\");\\n\\n//    string private baseURI = \\\"https://gitcoin.dance/\\\";\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    using Strings for uint256;\\n    mapping(uint256=>string) public _tokenURIs;\\n\\n    mapping(uint256=>uint256) public _votesById;\\n\\n    event NFTMinted(uint256 nftId, string uri);\\n\\n    constructor() public ERC721(\\\"Gitcoin Dance NFT\\\", \\\"GITD\\\"){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n//    function resetBaseURI(string memory newBaseURI) external{\\n//        require(\\n//            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n//            \\\"Cant reset URI not admin\\\"\\n//        );\\n//        baseURI = newBaseURI;\\n//\\n//    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal virtual{\\n        require(hasRole(MINTER_ROLE,msg.sender), \\\"Not Minter Role\\\");\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        require(_exists(tokenId), \\\"NFT id dosent exist\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        return _tokenURI;\\n    }\\n\\n    function mint(address to, string memory tokenURI) public returns (uint256 tokenID){\\n        require(\\n            hasRole(MINTER_ROLE, msg.sender),\\n            \\\"721Mint: account isnt Minter role\\\"\\n        );\\n\\n        _mint(to, _tokenIds.current());\\n        _setTokenURI(_tokenIds.current(), tokenURI);\\n\\n        uint mintedId = _tokenIds.current();\\n        _tokenIds.increment();\\n\\n        emit NFTMinted(mintedId, tokenURI);\\n        return mintedId;\\n\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty \\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/oz/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/oz/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/StringsMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Strings.sol\\\";\\n\\ncontract StringsMock {\\n    function fromUint256(uint256 value) public pure returns (string memory) {\\n        return Strings.toString(value);\\n    }\\n    function fromUint256Hex(uint256 value) public pure returns (string memory) {\\n        return Strings.toHexString(value);\\n    }\\n    function fromUint256HexFixed(uint256 value, uint256 length) public pure returns (string memory) {\\n        return Strings.toHexString(value, length);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../extensions/ERC721Burnable.sol\\\";\\nimport \\\"../extensions/ERC721Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(string memory name, string memory symbol, string memory baseTokenURI) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/ERC721Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/access/AccessControlEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/oz/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20Snapshot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping (address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns(uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n      super._beforeTokenTransfer(from, to, amount);\\n\\n      if (from == address(0)) {\\n        // mint\\n        _updateAccountSnapshot(to);\\n        _updateTotalSupplySnapshot();\\n      } else if (to == address(0)) {\\n        // burn\\n        _updateAccountSnapshot(from);\\n        _updateTotalSupplySnapshot();\\n      } else {\\n        // transfer\\n        _updateAccountSnapshot(from);\\n        _updateAccountSnapshot(to);\\n      }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\\n        private view returns (bool, uint256)\\n    {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/oz/utils/Arrays.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/oz/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/MathMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/math/Math.sol\\\";\\n\\ncontract MathMock {\\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\\n        return Math.max(a, b);\\n    }\\n\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\n        return Math.min(a, b);\\n    }\\n\\n    function average(uint256 a, uint256 b) public pure returns (uint256) {\\n        return Math.average(a, b);\\n    }\\n\\n    function ceilDiv(uint256 a, uint256 b) public pure returns (uint256) {\\n        return Math.ceilDiv(a, b);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20Votes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"./IERC20Votes.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of the ERC20 token contract to support Compound's voting and delegation.\\n *\\n * This extensions keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getCurrentVotes} and {getPriorVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IERC20Votes, ERC20Permit {\\n    bytes32 private constant _DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping (address => address) private _delegates;\\n    mapping (address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) external view virtual override returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) external view virtual override returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getCurrentVotes(address account) external view override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPriorTotalSupply(uint256 blockNumber) external view override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\\n        public virtual override\\n    {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(\\n                _DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            ))),\\n            v, r, s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        return _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev snapshot the totalSupply after it has been increassed.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= type(uint224).max, \\\"ERC20Votes: total supply exceeds 2**224\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, add, amount);\\n    }\\n\\n    /**\\n     * @dev snapshot the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, subtract, amount);\\n    }\\n\\n    /**\\n     * @dev move voting power when tokens are transferred.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function (uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    )\\n        private returns (uint256 oldWeight, uint256 newWeight)\\n    {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({\\n                fromBlock: SafeCast.toUint32(block.number),\\n                votes: SafeCast.toUint224(newWeight)\\n            }));\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/draft-ERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping (address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                _useNonce(owner),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/IERC20Votes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\ninterface IERC20Votes is IERC20 {\\n    struct Checkpoint {\\n        uint32  fromBlock;\\n        uint224 votes;\\n    }\\n\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    function delegates(address owner) external view returns (address);\\n    function checkpoints(address account, uint32 pos) external view returns (Checkpoint memory);\\n    function numCheckpoints(address account) external view returns (uint32);\\n    function getCurrentVotes(address account) external view returns (uint256);\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\\n    function getPriorTotalSupply(uint256 blockNumber) external view returns(uint256);\\n    function delegate(address delegatee) external;\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\n    },\n    \"contracts/oz/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value < 2**224, \\\"SafeCast: value doesn\\\\'t fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/oz/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/cryptography/SignatureChecker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract sigantures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        if (Address.isContract(signer)) {\\n            try IERC1271(signer).isValidSignature(hash, signature) returns (bytes4 magicValue) {\\n                return magicValue == IERC1271(signer).isValidSignature.selector;\\n            } catch {\\n                return false;\\n            }\\n        } else {\\n            return ECDSA.recover(hash, signature) == signer;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/interfaces/IERC1271.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n  /**\\n   * @dev Should return whether the signature provided is valid for the provided data\\n   * @param hash      Hash of the data to be signed\\n   * @param signature Signature byte array associated with _data\\n   */\\n  function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1271WalletMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\n\\ncontract ERC1271WalletMock is Ownable, IERC1271 {\\n    constructor(address originalOwner) {\\n        transferOwnership(originalOwner);\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes memory signature) public view override returns (bytes4 magicValue) {\\n        return ECDSA.recover(hash, signature) == owner() ? this.isValidSignature.selector : bytes4(0);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/transparent/ProxyAdmin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/transparent/TransparentUpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/ERC1967/ERC1967Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/ERC1967/ERC1967Upgrade.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            Address.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/oz/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/beacon/BeaconProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/beacon/UpgradeableBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/utils/TokenTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 immutable private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address immutable private _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 immutable private _releaseTime;\\n\\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(releaseTime_ > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view virtual returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view virtual returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= releaseTime(), \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = token().balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        token().safeTransfer(beneficiary(), amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/zksync/Game.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"../oz/utils/math/SafeMath.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/MathLog.sol\\\";\\nimport \\\"./ERC721Mintable.sol\\\";\\nimport \\\"./DancerProxy.sol\\\";\\n\\n\\n//Each \\\"danceoff\\\"\\ncontract Game is MathLog, ERC721Mintable{\\n    using SafeMath for uint;\\n    event DancerCreated(address indexed a, uint indexed nftid);\\n    event GotBracketParticipants(uint bracket, address indexed a, address indexed b);\\n\\n//    address dai_address = 0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa;\\n    IERC20 dai;\\n\\n    mapping(uint=>bool) nftIdHasBeenPlaced;\\n    mapping(uint=>address) public donationAddressByNftId;\\n    mapping(address=>uint) public nftIdByDonationAddress;\\n    mapping(uint=>uint) public votesPerNftId;\\n\\n\\n    //number of the current game\\n    uint g_game_number = 0;\\n    uint public g_rounds = 0;\\n    uint g_current_round;\\n\\n    uint g_start_block;\\n    uint g_round_blocktime = 2000;\\n    uint g_intermission_blocktime = 100;\\n\\n\\n    uint g_number_dancers;\\n    uint g_current_number_dancers = 0;\\n    bool g_game_started = false;\\n    //game_no->round->bracketnumber->addresses in bracket(competetors)\\n    mapping(uint=>mapping(uint=>mapping(uint=>uint[2]))) public gameByBracketByRound;\\n    mapping(address=>bool) public notEliminated;\\n    mapping(uint=>address) public addressByNFTId;\\n\\n\\n    function isBetweenRounds() internal returns (bool isBetweenRounds){\\n        require(g_game_started);\\n        uint gameClock = block.number - g_start_block;\\n\\n        if(gameClock >= g_round_blocktime){\\n            uint blocks_past_round = (gameClock % g_round_blocktime);\\n\\n            if(blocks_past_round <= g_intermission_blocktime){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    function startGame() public {\\n        require(!g_game_started);\\n        g_start_block = block.number;\\n        g_game_started = true;\\n        determineBrackets();\\n\\n    }\\n    function advanceGame() public{\\n        require(isBetweenRounds());\\n        determineBracketWinners(g_current_round);\\n    }\\n    constructor (uint num_dancers, uint roundTimeInBlocks, address dai_address){\\n        dai = IERC20(dai_address);\\n        setGameParams(num_dancers);\\n        setupNewGame(num_dancers);\\n//        contestants = new address[](num_dancers);\\n    }\\n    function setGameParams(uint _num_dancers) internal {\\n        require(_num_dancers % 2 == 0, \\\"this isnt a power of 2\\\");\\n        require(!g_game_started, \\\"game cant be started already\\\");\\n        require(gameByBracketByRound[g_game_number + 1][0][0][1] == 0,\\\"This looks like a round exists here\\\");\\n    }\\n\\n    function setupNewGame(uint _num_dancers) internal {\\n        setGameParams(_num_dancers);\\n        g_game_number ++;\\n        g_current_round = 1;\\n        g_number_dancers = _num_dancers;\\n        g_current_number_dancers = _num_dancers;\\n\\n        determineGameRounds(g_number_dancers);\\n        determineBrackets();\\n\\n    }\\n\\n    function changeTime(uint round_time, uint intermission_time) internal{\\n//        require(hasRole(ADMIN))\\n        g_round_blocktime = round_time;\\n        g_intermission_blocktime = intermission_time;\\n    }\\n\\n    function getBracketEntropy(uint unfilled_brackets) public returns(uint bracketNo){\\n        uint hash = uint(blockhash(block.number -1));\\n        return hash.mod(unfilled_brackets);\\n    }\\n\\n    function determineBracketWinners(uint bracketNumber) public {\\n        //require(bracket number exists in the current round\\n//        address [2] contestants = gameByBracketByRound[g_game_number][g_current_round][bracket];\\n//        address winner = dai.balanceOf(contestants[1]) > dai.balanceOf(contestants[2])? contestants[1] : contestants[2];\\n        //need data structure for winners and loosers;\\n    }\\n\\n    function fillBracket(uint bracket, uint[2] memory dancerIndex) internal {\\n        gameByBracketByRound[g_game_number][g_current_round][bracket] = dancerIndex;\\n    }\\n    function determineBrackets() public {\\n        uint bracketsToMake = g_current_number_dancers.div(g_current_round).div(2);\\n        uint remainingDancersToPlace = g_current_number_dancers;\\n\\n        uint index_a = 0;\\n        uint index_b = 1;\\n\\n        for(uint i = 0; i <= bracketsToMake; i++){\\n            fillBracket(i, [index_a, index_b]);\\n            emit GotBracketParticipants(i, donationAddressByNftId[index_a], donationAddressByNftId[index_b]);\\n            index_a = index_b + 1;\\n            index_b = index_a + 1;\\n        }\\n    }\\n    function determineGameRounds(uint _num_dancers) public returns (uint n) {\\n        uint rounds = log2(_num_dancers);\\n        g_rounds = rounds;\\n        return rounds;\\n    }\\n\\n    function mintNFTAndDeployDonationAddress(string memory nftURI, address creator) public returns (address nft_donation_address){\\n            require(hasRole(DEFAULT_ADMIN_ROLE,msg.sender), \\\"Not default admin\\\");\\n            uint nftId = mint(address(this), nftURI);\\n            //require dai address set\\n            DancerProxy dancer = new DancerProxy(address(this), address(dai));\\n\\n            emit DancerCreated(address(dancer), nftId);\\n\\n        //ghetto linkedlist\\n            donationAddressByNftId[nftId] = address(dancer);\\n            nftIdByDonationAddress[address(dancer)] = nftId;\\n\\n\\n            return donationAddressByNftId[nftId];\\n        }\\n\\n\\n    function incrementVotes(address dancer, uint amount) internal {\\n        uint256 nftId = nftIdByDonationAddress[dancer];\\n        votesPerNftId[nftId] += amount;\\n    }\\n\\n    function withdrawlFromDonationProxyToSelf(address donation_proxy) public returns (bool success){\\n        require(isBetweenRounds());\\n        (bool success, bytes memory returnData) = address(donation_proxy).call(abi.encodeWithSignature(\\\"withdrawlDAI()\\\"));\\n\\n        if(success) {\\n        uint votes = abi.decode(returnData, (uint));\\n        incrementVotes(donation_proxy, votes);\\n        }\\n\\n       return success;\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/oz/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/zksync/lib/MathLog.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"../../oz/utils/math/SafeMath.sol\\\";\\n\\ncontract MathLog {\\n    using SafeMath for uint;\\n\\n    event Log(uint indexed log);\\n\\n    function  log2(uint x) public returns (uint n){\\n        uint n;\\n        if (x >= 2**128) { x >>= 128; n += 128; }\\n        if (x >= 2**64) { x >>= 64; n += 64; }\\n        if (x >= 2**32) { x >>= 32; n += 32; }\\n        if (x >= 2**16) { x >>= 16; n += 16; }\\n        if (x >= 2**8) { x >>= 8; n += 8; }\\n        if (x >= 2**4) { x >>= 4; n += 4; }\\n        if (x >= 2**2) { x >>= 2; n += 2; }\\n        if (x >= 2**1) {x >>=1; n+=1;}\\n        emit Log(n);\\n        return n;\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/zksync/DancerProxy.sol\": {\n      \"content\": \"pragma solidity  ^0.8.0;\\nimport \\\"../oz/token/ERC20/IERC20.sol\\\";\\nimport \\\"../oz/access/AccessControl.sol\\\";\\nimport \\\"./Game.sol\\\";\\n\\ncontract DancerProxy is AccessControl{\\n    bytes32 public constant GAME_LOGIC_ROLE = keccak256(\\\"GAME_LOGIC_ROLE\\\");\\n    IERC20 public dai;\\n    //this is the Voting Logic contract\\n    Game public game;\\n\\n    event WithdrawlToGameLogic(address indexed game);\\n\\n    constructor(address _game_contract, address daiAddress){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        game = Game(_game_contract);\\n        dai = IERC20(daiAddress);\\n    }\\n\\n    function withdrawlDAI() public returns (uint256 bal){\\n        uint256 bal = dai.balanceOf((address (this)));\\n        require(dai.approve(address(game), dai.balanceOf(address(this))));\\n        dai.transfer(address(game), dai.balanceOf(address(this)));\\n\\n        emit WithdrawlToGameLogic(address(game));\\n        return bal;\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/oz/mocks/SafeMathMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\ncontract SafeMathMock {\\n    function tryAdd(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\\n        return SafeMath.tryAdd(a, b);\\n    }\\n\\n    function trySub(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\\n        return SafeMath.trySub(a, b);\\n    }\\n\\n    function tryMul(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\\n        return SafeMath.tryMul(a, b);\\n    }\\n\\n    function tryDiv(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\\n        return SafeMath.tryDiv(a, b);\\n    }\\n\\n    function tryMod(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\\n        return SafeMath.tryMod(a, b);\\n    }\\n\\n    // using the do* naming convention to avoid warnings due to clashing opcode names\\n\\n    function doAdd(uint256 a, uint256 b) public pure returns (uint256) {\\n        return SafeMath.add(a, b);\\n    }\\n\\n    function doSub(uint256 a, uint256 b) public pure returns (uint256) {\\n        return SafeMath.sub(a, b);\\n    }\\n\\n    function doMul(uint256 a, uint256 b) public pure returns (uint256) {\\n        return SafeMath.mul(a, b);\\n    }\\n\\n    function doDiv(uint256 a, uint256 b) public pure returns (uint256) {\\n        return SafeMath.div(a, b);\\n    }\\n\\n    function doMod(uint256 a, uint256 b) public pure returns (uint256) {\\n        return SafeMath.mod(a, b);\\n    }\\n\\n    function subWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\n        return SafeMath.sub(a, b, errorMessage);\\n    }\\n\\n    function divWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\n        return SafeMath.div(a, b, errorMessage);\\n    }\\n\\n    function modWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\n        return SafeMath.mod(a, b, errorMessage);\\n    }\\n\\n    function addMemoryCheck() public pure returns (uint256 mem) {\\n        uint256 length = 32;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := mload(0x40) }\\n        for (uint256 i = 0; i < length; ++i) { SafeMath.add(1, 1); }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := sub(mload(0x40), mem) }\\n    }\\n\\n    function subMemoryCheck() public pure returns (uint256 mem) {\\n        uint256 length = 32;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := mload(0x40) }\\n        for (uint256 i = 0; i < length; ++i) { SafeMath.sub(1, 1); }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := sub(mload(0x40), mem) }\\n    }\\n\\n    function mulMemoryCheck() public pure returns (uint256 mem) {\\n        uint256 length = 32;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := mload(0x40) }\\n        for (uint256 i = 0; i < length; ++i) { SafeMath.mul(1, 1); }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := sub(mload(0x40), mem) }\\n    }\\n\\n    function divMemoryCheck() public pure returns (uint256 mem) {\\n        uint256 length = 32;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := mload(0x40) }\\n        for (uint256 i = 0; i < length; ++i) { SafeMath.div(1, 1); }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := sub(mload(0x40), mem) }\\n    }\\n\\n    function modMemoryCheck() public pure returns (uint256 mem) {\\n        uint256 length = 32;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := mload(0x40) }\\n        for (uint256 i = 0; i < length; ++i) { SafeMath.mod(1, 1); }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { mem := sub(mload(0x40), mem) }\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/oz/finance/PaymentSplitter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor (address[] memory payees, uint256[] memory shares_) payable {\\n        // solhint-disable-next-line max-line-length\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive () external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/presets/ERC20PresetMinterPauser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../extensions/ERC1155Burnable.sol\\\";\\nimport \\\"../extensions/ERC1155Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC1155} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC1155PresetMinterPauser is Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\n     * deploys the contract.\\n     */\\n    constructor(string memory uri) ERC1155(uri) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC1155) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal virtual override(ERC1155, ERC1155Pausable)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/extensions/ERC1155Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/extensions/ERC1155Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/oz/mocks/PausableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../security/Pausable.sol\\\";\\n\\ncontract PausableMock is Pausable {\\n    bool public drasticMeasureTaken;\\n    uint256 public count;\\n\\n    constructor () {\\n        drasticMeasureTaken = false;\\n        count = 0;\\n    }\\n\\n    function normalProcess() external whenNotPaused {\\n        count++;\\n    }\\n\\n    function drasticMeasure() external whenPaused {\\n        drasticMeasureTaken = true;\\n    }\\n\\n    function pause() external {\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _unpause();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721PausableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/ERC721Pausable.sol\\\";\\n\\n/**\\n * @title ERC721PausableMock\\n * This mock just provides a public mint, burn and exists functions for testing purposes\\n */\\ncontract ERC721PausableMock is ERC721Pausable {\\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\\n\\n    function pause() external {\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _unpause();\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\\n        _safeMint(to, tokenId, _data);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/zksync/TestDAI.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"../oz/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestDAI is ERC20{\\n    constructor(string memory name, string memory symbol)ERC20(name,symbol){\\n        _mint(msg.sender, 100 * 10 ** uint(decimals()));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/EIP712External.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\n\\ncontract EIP712External is EIP712 {\\n    constructor(string memory name, string memory version) EIP712(name, version) {}\\n\\n    function domainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function verify(bytes memory signature, address signer, address mailTo, string memory mailContents) external view {\\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n            keccak256(\\\"Mail(address to,string contents)\\\"),\\n            mailTo,\\n            keccak256(bytes(mailContents))\\n        )));\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        require(recoveredSigner == signer);\\n    }\\n\\n    function getChainId() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/metatx/MinimalForwarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\n\\n/*\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant TYPEHASH = keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(keccak256(abi.encode(\\n            TYPEHASH,\\n            req.from,\\n            req.to,\\n            req.value,\\n            req.gas,\\n            req.nonce,\\n            keccak256(req.data)\\n        ))).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature) public payable returns (bool, bytes memory) {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(abi.encodePacked(req.data, req.from));\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20PermitMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract ERC20PermitMock is ERC20Permit {\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) payable ERC20(name, symbol) ERC20Permit(name) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n\\n    function getChainId() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\n\\n// mock class using ERC20\\ncontract ERC20Mock is ERC20 {\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) payable ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function transferInternal(address from, address to, uint256 value) public {\\n        _transfer(from, to, value);\\n    }\\n\\n    function approveInternal(address owner, address spender, uint256 value) public {\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/MulticallTokenMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Multicall.sol\\\";\\nimport \\\"./ERC20Mock.sol\\\";\\n\\ncontract MulticallTokenMock is ERC20Mock, Multicall {\\n    constructor (uint256 initialBalance) ERC20Mock(\\\"MulticallToken\\\", \\\"BCT\\\", msg.sender, initialBalance) {}\\n}\\n\"\n    },\n    \"contracts/oz/utils/Multicall.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n    * @dev Receives and executes a batch of function calls on this contract.\\n    */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/MulticallTest.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MulticallTokenMock.sol\\\";\\n\\ncontract MulticallTest {\\n    function testReturnValues(MulticallTokenMock multicallToken, address[] calldata recipients, uint256[] calldata amounts) external {\\n        bytes[] memory calls = new bytes[](recipients.length);\\n        for (uint i = 0; i < recipients.length; i++) {\\n            calls[i] = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", recipients[i], amounts[i]);\\n        }\\n\\n        bytes[] memory results = multicallToken.multicall(calls);\\n        for (uint i = 0; i < results.length; i++) {\\n            require(abi.decode(results[i], (bool)));\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20FlashMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/IERC3156.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\\n    bytes32 constant private RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token) public view override returns (uint256) {\\n        return token == address(this) ? type(uint256).max - ERC20.totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param amount The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 amount) public view virtual override returns (uint256) {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n        // silence warning about unused variable without the addition of bytecode.\\n        amount;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * amount + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param amount The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` is the flash loan was successfull.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        public virtual override returns (bool)\\n    {\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n        require(receiver.onFlashLoan(msg.sender, token, amount, fee, data) == RETURN_VALUE, \\\"ERC20FlashMint: invalid return value\\\");\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(currentAllowance >= amount + fee, \\\"ERC20FlashMint: allowance does not allow refund\\\");\\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\\n        _burn(address(receiver), amount + fee);\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/interfaces/IERC3156.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n }\\n\"\n    },\n    \"contracts/oz/mocks/ERC3156FlashBorrowerMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC3156.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev WARNING: this IERC3156FlashBorrower mock implementation is for testing purposes ONLY.\\n * Writing a secure flash lock borrower is not an easy task, and should be done with the utmost care.\\n * This is not an example of how it should be done, and no pattern present in this mock should be considered secure.\\n * Following best practices, always have your contract properly audited before using them to manipulate important funds on\\n * live networks.\\n */\\ncontract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {\\n    bytes32 constant internal RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    bool immutable _enableApprove;\\n    bool immutable _enableReturn;\\n\\n    event BalanceOf(address token, address account, uint256 value);\\n    event TotalSupply(address token, uint256 value);\\n\\n    constructor(bool enableReturn, bool enableApprove) {\\n        _enableApprove = enableApprove;\\n        _enableReturn = enableReturn;\\n    }\\n\\n    function onFlashLoan(\\n        address /*initiator*/,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) public override returns (bytes32) {\\n        require(msg.sender == token);\\n\\n        emit BalanceOf(token, address(this), IERC20(token).balanceOf(address(this)));\\n        emit TotalSupply(token, IERC20(token).totalSupply());\\n\\n        if (data.length > 0) {\\n            // WARNING: This code is for testing purposes only! Do not use.\\n            Address.functionCall(token, data);\\n        }\\n\\n        if (_enableApprove) {\\n            IERC20(token).approve(token, amount + fee);\\n        }\\n\\n        return _enableReturn ? RETURN_VALUE : bytes32(0);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20FlashMintMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../token/ERC20/extensions/ERC20FlashMint.sol\\\";\\n\\ncontract ERC20FlashMintMock is ERC20FlashMint {\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20DecimalsMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20DecimalsMock is ERC20 {\\n    uint8 immutable private _decimals;\\n\\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/extensions/ERC20Capped.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 immutable private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20CappedMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/ERC20Capped.sol\\\";\\n\\ncontract ERC20CappedMock is ERC20Capped {\\n    constructor (string memory name, string memory symbol, uint256 cap)\\n        ERC20(name, symbol) ERC20Capped(cap)\\n    { }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC20/presets/ERC20PresetFixedSupply.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - Preminted initial supply\\n *  - Ability for holders to burn (destroy) their tokens\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\n * its documentation for details.\\n *\\n * _Available since v3.4._\\n */\\ncontract ERC20PresetFixedSupply is ERC20Burnable {\\n    /**\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        _mint(owner, initialSupply);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20BurnableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract ERC20BurnableMock is ERC20Burnable {\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20PausableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/ERC20Pausable.sol\\\";\\n\\n// mock class using ERC20Pausable\\ncontract ERC20PausableMock is ERC20Pausable {\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n\\n    function pause() external {\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) public {\\n        _burn(from, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/extensions/ERC1155Supply.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping (uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns(bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1155SupplyMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Mock.sol\\\";\\nimport \\\"../token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\ncontract ERC1155SupplyMock is ERC1155Mock, ERC1155Supply {\\n    constructor(string memory uri) ERC1155Mock(uri) { }\\n\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burnBatch(account, ids, amounts);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1155Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/ERC1155.sol\\\";\\n\\n/**\\n * @title ERC1155Mock\\n * This mock just publicizes internal functions for testing purposes\\n */\\ncontract ERC1155Mock is ERC1155 {\\n    constructor (string memory uri) ERC1155(uri) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function setURI(string memory newuri) public {\\n        _setURI(newuri);\\n    }\\n\\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\\n        _mint(to, id, value, data);\\n    }\\n\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) public {\\n        _mintBatch(to, ids, values, data);\\n    }\\n\\n    function burn(address owner, uint256 id, uint256 value) public {\\n        _burn(owner, id, value);\\n    }\\n\\n    function burnBatch(address owner, uint256[] memory ids, uint256[] memory values) public {\\n        _burnBatch(owner, ids, values);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1155PausableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Mock.sol\\\";\\nimport \\\"../token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\n\\ncontract ERC1155PausableMock is ERC1155Mock, ERC1155Pausable {\\n    constructor(string memory uri) ERC1155Mock(uri) { }\\n\\n    function pause() external {\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal virtual override(ERC1155, ERC1155Pausable)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/utils/ERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1155ReceiverMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\ncontract ERC1155ReceiverMock is IERC1155Receiver, ERC165 {\\n    bytes4 private _recRetval;\\n    bool private _recReverts;\\n    bytes4 private _batRetval;\\n    bool private _batReverts;\\n\\n    event Received(address operator, address from, uint256 id, uint256 value, bytes data, uint256 gas);\\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data, uint256 gas);\\n\\n    constructor (\\n        bytes4 recRetval,\\n        bool recReverts,\\n        bytes4 batRetval,\\n        bool batReverts\\n    )\\n    {\\n        _recRetval = recRetval;\\n        _recReverts = recReverts;\\n        _batRetval = batRetval;\\n        _batReverts = batReverts;\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        require(!_recReverts, \\\"ERC1155ReceiverMock: reverting on receive\\\");\\n        emit Received(operator, from, id, value, data, gasleft());\\n        return _recRetval;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        require(!_batReverts, \\\"ERC1155ReceiverMock: reverting on batch receive\\\");\\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\\n        return _batRetval;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721EnumerableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n/**\\n * @title ERC721Mock\\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\\n */\\ncontract ERC721EnumerableMock is ERC721Enumerable {\\n    string private _baseTokenURI;\\n\\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseURI(string calldata newBaseTokenURI) public {\\n        _baseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\\n        _safeMint(to, tokenId, _data);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC165CheckerMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract ERC165CheckerMock {\\n    using ERC165Checker for address;\\n\\n    function supportsERC165(address account) public view returns (bool) {\\n        return account.supportsERC165();\\n    }\\n\\n    function supportsInterface(address account, bytes4 interfaceId) public view returns (bool) {\\n        return account.supportsInterface(interfaceId);\\n    }\\n\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool) {\\n        return account.supportsAllInterfaces(interfaceIds);\\n    }\\n\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool[] memory) {\\n        return account.getSupportedInterfaces(interfaceIds);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC165/ERC165InterfacesSupported.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * https://eips.ethereum.org/EIPS/eip-214#specification\\n * From the specification:\\n * > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead\\n * throw an exception.\\n * > These operations include [...], LOG0, LOG1, LOG2, [...]\\n *\\n * therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works)\\n * solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it\\n */\\ncontract SupportsInterfaceWithLookupMock is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 public constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev A mapping of interface id to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev A contract implementing SupportsInterfaceWithLookup\\n     * implement ERC165 itself.\\n     */\\n    constructor () {\\n        _registerInterface(INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Private method for registering an interface.\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165InterfacesSupported: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\ncontract ERC165InterfacesSupported is SupportsInterfaceWithLookupMock {\\n    constructor (bytes4[] memory interfaceIds) {\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            _registerInterface(interfaceIds[i]);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC1155/utils/ERC1155Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/ERC165Storage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC165StorageMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Storage.sol\\\";\\n\\ncontract ERC165StorageMock is ERC165Storage {\\n    function registerInterface(bytes4 interfaceId) public {\\n        _registerInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC165Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\ncontract ERC165Mock is ERC165 {\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1155BurnableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\n\\ncontract ERC1155BurnableMock is ERC1155Burnable {\\n    constructor(string memory uri) ERC1155(uri) { }\\n\\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\\n        _mint(to, id, value, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/AccessControlEnumerableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControlEnumerable.sol\\\";\\n\\ncontract AccessControlEnumerableMock is AccessControlEnumerable {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\\n        _setRoleAdmin(roleId, adminRoleId);\\n    }\\n\\n    function senderProtected(bytes32 roleId) public onlyRole(roleId) {}\\n}\\n\"\n    },\n    \"contracts/oz/mocks/EnumerableSetMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n// Bytes32Set\\ncontract EnumerableBytes32SetMock {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    event OperationResult(bool result);\\n\\n    EnumerableSet.Bytes32Set private _set;\\n\\n    function contains(bytes32 value) public view returns (bool) {\\n        return _set.contains(value);\\n    }\\n\\n    function add(bytes32 value) public {\\n        bool result = _set.add(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function remove(bytes32 value) public {\\n        bool result = _set.remove(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function length() public view returns (uint256) {\\n        return _set.length();\\n    }\\n\\n    function at(uint256 index) public view returns (bytes32) {\\n        return _set.at(index);\\n    }\\n}\\n\\n// AddressSet\\ncontract EnumerableAddressSetMock {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event OperationResult(bool result);\\n\\n    EnumerableSet.AddressSet private _set;\\n\\n    function contains(address value) public view returns (bool) {\\n        return _set.contains(value);\\n    }\\n\\n    function add(address value) public {\\n        bool result = _set.add(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function remove(address value) public {\\n        bool result = _set.remove(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function length() public view returns (uint256) {\\n        return _set.length();\\n    }\\n\\n    function at(uint256 index) public view returns (address) {\\n        return _set.at(index);\\n    }\\n}\\n\\n// UintSet\\ncontract EnumerableUintSetMock {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    event OperationResult(bool result);\\n\\n    EnumerableSet.UintSet private _set;\\n\\n    function contains(uint256 value) public view returns (bool) {\\n        return _set.contains(value);\\n    }\\n\\n    function add(uint256 value) public {\\n        bool result = _set.add(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function remove(uint256 value) public {\\n        bool result = _set.remove(value);\\n        emit OperationResult(result);\\n    }\\n\\n    function length() public view returns (uint256) {\\n        return _set.length();\\n    }\\n\\n    function at(uint256 index) public view returns (uint256) {\\n        return _set.at(index);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/structs/EnumerableMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n\\n        mapping (bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/EnumerableMapMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/structs/EnumerableMap.sol\\\";\\n\\ncontract EnumerableMapMock {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    event OperationResult(bool result);\\n\\n    EnumerableMap.UintToAddressMap private _map;\\n\\n    function contains(uint256 key) public view returns (bool) {\\n        return _map.contains(key);\\n    }\\n\\n    function set(uint256 key, address value) public {\\n        bool result = _map.set(key, value);\\n        emit OperationResult(result);\\n    }\\n\\n    function remove(uint256 key) public {\\n        bool result = _map.remove(key);\\n        emit OperationResult(result);\\n    }\\n\\n    function length() public view returns (uint256) {\\n        return _map.length();\\n    }\\n\\n    function at(uint256 index) public view returns (uint256 key, address value) {\\n        return _map.at(index);\\n    }\\n\\n\\n    function tryGet(uint256 key) public view returns (bool, address) {\\n        return _map.tryGet(key);\\n    }\\n\\n    function get(uint256 key) public view returns (address) {\\n        return _map.get(key);\\n    }\\n\\n    function getWithMessage(uint256 key, string calldata errorMessage) public view returns (address) {\\n        return _map.get(key, errorMessage);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/SafeERC20Helper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ERC20ReturnFalseMock is Context {\\n    uint256 private _allowance;\\n\\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\\n    // we write to a dummy state variable.\\n    uint256 private _dummy;\\n\\n    function transfer(address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return false;\\n    }\\n\\n    function transferFrom(address, address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return false;\\n    }\\n\\n    function approve(address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return false;\\n    }\\n\\n    function allowance(address, address) public view returns (uint256) {\\n        require(_dummy == 0); // Duummy read from a state variable so that the function is view\\n        return 0;\\n    }\\n}\\n\\ncontract ERC20ReturnTrueMock is Context {\\n    mapping (address => uint256) private _allowances;\\n\\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\\n    // we write to a dummy state variable.\\n    uint256 private _dummy;\\n\\n    function transfer(address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return true;\\n    }\\n\\n    function transferFrom(address, address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return true;\\n    }\\n\\n    function approve(address, uint256) public returns (bool) {\\n        _dummy = 0;\\n        return true;\\n    }\\n\\n    function setAllowance(uint256 allowance_) public {\\n        _allowances[_msgSender()] = allowance_;\\n    }\\n\\n    function allowance(address owner, address) public view returns (uint256) {\\n        return _allowances[owner];\\n    }\\n}\\n\\ncontract ERC20NoReturnMock is Context {\\n    mapping (address => uint256) private _allowances;\\n\\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\\n    // we write to a dummy state variable.\\n    uint256 private _dummy;\\n\\n    function transfer(address, uint256) public {\\n        _dummy = 0;\\n    }\\n\\n    function transferFrom(address, address, uint256) public {\\n        _dummy = 0;\\n    }\\n\\n    function approve(address, uint256) public {\\n        _dummy = 0;\\n    }\\n\\n    function setAllowance(uint256 allowance_) public {\\n        _allowances[_msgSender()] = allowance_;\\n    }\\n\\n    function allowance(address owner, address) public view returns (uint256) {\\n        return _allowances[owner];\\n    }\\n}\\n\\ncontract SafeERC20Wrapper is Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private _token;\\n\\n    constructor (IERC20 token) {\\n        _token = token;\\n    }\\n\\n    function transfer() public {\\n        _token.safeTransfer(address(0), 0);\\n    }\\n\\n    function transferFrom() public {\\n        _token.safeTransferFrom(address(0), address(0), 0);\\n    }\\n\\n    function approve(uint256 amount) public {\\n        _token.safeApprove(address(0), amount);\\n    }\\n\\n    function increaseAllowance(uint256 amount) public {\\n        _token.safeIncreaseAllowance(address(0), amount);\\n    }\\n\\n    function decreaseAllowance(uint256 amount) public {\\n        _token.safeDecreaseAllowance(address(0), amount);\\n    }\\n\\n    function setAllowance(uint256 allowance_) public {\\n        ERC20ReturnTrueMock(address(_token)).setAllowance(allowance_);\\n    }\\n\\n    function allowance() public view returns (uint256) {\\n        return _token.allowance(address(0), address(0));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ReentrancyAttack.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\ncontract ReentrancyAttack is Context {\\n    function callSender(bytes4 data) public {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = _msgSender().call(abi.encodeWithSelector(data));\\n        require(success, \\\"ReentrancyAttack: failed call\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ReentrancyMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../security/ReentrancyGuard.sol\\\";\\nimport \\\"./ReentrancyAttack.sol\\\";\\n\\ncontract ReentrancyMock is ReentrancyGuard {\\n    uint256 public counter;\\n\\n    constructor () {\\n        counter = 0;\\n    }\\n\\n    function callback() external nonReentrant {\\n        _count();\\n    }\\n\\n    function countLocalRecursive(uint256 n) public nonReentrant {\\n        if (n > 0) {\\n            _count();\\n            countLocalRecursive(n - 1);\\n        }\\n    }\\n\\n    function countThisRecursive(uint256 n) public nonReentrant {\\n        if (n > 0) {\\n            _count();\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = address(this).call(abi.encodeWithSignature(\\\"countThisRecursive(uint256)\\\", n - 1));\\n            require(success, \\\"ReentrancyMock: failed call\\\");\\n        }\\n    }\\n\\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\\n        _count();\\n        bytes4 func = bytes4(keccak256(\\\"callback()\\\"));\\n        attacker.callSender(func);\\n    }\\n\\n    function _count() private {\\n        counter += 1;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC777SenderRecipientMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC777/IERC777.sol\\\";\\nimport \\\"../token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"../token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"../utils/introspection/ERC1820Implementer.sol\\\";\\n\\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\\n    event TokensToSendCalled(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData,\\n        address token,\\n        uint256 fromBalance,\\n        uint256 toBalance\\n    );\\n\\n    event TokensReceivedCalled(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData,\\n        address token,\\n        uint256 fromBalance,\\n        uint256 toBalance\\n    );\\n\\n    // Emitted in ERC777Mock. Here for easier decoding\\n    event BeforeTokenTransfer();\\n\\n    bool private _shouldRevertSend;\\n    bool private _shouldRevertReceive;\\n\\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external override {\\n        if (_shouldRevertSend) {\\n            revert();\\n        }\\n\\n        IERC777 token = IERC777(_msgSender());\\n\\n        uint256 fromBalance = token.balanceOf(from);\\n        // when called due to burn, to will be the zero address, which will have a balance of 0\\n        uint256 toBalance = token.balanceOf(to);\\n\\n        emit TokensToSendCalled(\\n            operator,\\n            from,\\n            to,\\n            amount,\\n            userData,\\n            operatorData,\\n            address(token),\\n            fromBalance,\\n            toBalance\\n        );\\n    }\\n\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external override {\\n        if (_shouldRevertReceive) {\\n            revert();\\n        }\\n\\n        IERC777 token = IERC777(_msgSender());\\n\\n        uint256 fromBalance = token.balanceOf(from);\\n        // when called due to burn, to will be the zero address, which will have a balance of 0\\n        uint256 toBalance = token.balanceOf(to);\\n\\n        emit TokensReceivedCalled(\\n            operator,\\n            from,\\n            to,\\n            amount,\\n            userData,\\n            operatorData,\\n            address(token),\\n            fromBalance,\\n            toBalance\\n        );\\n    }\\n\\n    function senderFor(address account) public {\\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\\n\\n        address self = address(this);\\n        if (account == self) {\\n            registerSender(self);\\n        }\\n    }\\n\\n    function registerSender(address sender) public {\\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\\n    }\\n\\n    function recipientFor(address account) public {\\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\\n\\n        address self = address(this);\\n        if (account == self) {\\n            registerRecipient(self);\\n        }\\n    }\\n\\n    function registerRecipient(address recipient) public {\\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\\n    }\\n\\n    function setShouldRevertSend(bool shouldRevert) public {\\n        _shouldRevertSend = shouldRevert;\\n    }\\n\\n    function setShouldRevertReceive(bool shouldRevert) public {\\n        _shouldRevertReceive = shouldRevert;\\n    }\\n\\n    function send(IERC777 token, address to, uint256 amount, bytes memory data) public {\\n        // This is 777's send function, not the Solidity send function\\n        token.send(to, amount, data); // solhint-disable-line check-send-result\\n    }\\n\\n    function burn(IERC777 token, uint256 amount, bytes memory data) public {\\n        token.burn(amount, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC777/IERC777.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC777/IERC777Sender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC777/IERC777Recipient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/IERC1820Registry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/ERC1820Implementer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820Implementer.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820Implementer is IERC1820Implementer {\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view virtual override returns (bytes32) {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/introspection/IERC1820Implementer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC1820ImplementerMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC1820Implementer.sol\\\";\\n\\ncontract ERC1820ImplementerMock is ERC1820Implementer {\\n    function registerInterfaceForAddress(bytes32 interfaceHash, address account) public {\\n        _registerInterfaceForAddress(interfaceHash, account);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/Create2Impl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Create2.sol\\\";\\nimport \\\"../utils/introspection/ERC1820Implementer.sol\\\";\\n\\ncontract Create2Impl {\\n    function deploy(uint256 value, bytes32 salt, bytes memory code) public {\\n        Create2.deploy(value, salt, code);\\n    }\\n\\n    function deployERC1820Implementer(uint256 value, bytes32 salt) public {\\n        // solhint-disable-next-line indent\\n        Create2.deploy(value, salt, type(ERC1820Implementer).creationCode);\\n    }\\n\\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\\n        return Create2.computeAddress(salt, codeHash);\\n    }\\n\\n    function computeAddressWithDeployer(bytes32 salt, bytes32 codeHash, address deployer) public pure returns (address) {\\n        return Create2.computeAddress(salt, codeHash, deployer);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/oz/utils/Create2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC777/ERC777.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override  {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override  {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        uint256 currentAllowance = _allowances[holder][spender];\\n        require(currentAllowance >= amount, \\\"ERC777: transfer amount exceeds allowance\\\");\\n        _approve(holder, spender, currentAllowance - amount);\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n        virtual\\n    {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC777/presets/ERC777PresetFixedSupply.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC777.sol\\\";\\n\\n/**\\n * @dev {ERC777} token, including:\\n *\\n *  - Preminted initial supply\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * _Available since v3.4._\\n */\\ncontract ERC777PresetFixedSupply is ERC777 {\\n    /**\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\n     *\\n     * See {ERC777-constructor}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC777(name, symbol, defaultOperators) {\\n        _mint(owner, initialSupply, \\\"\\\", \\\"\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC777Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC777/ERC777.sol\\\";\\n\\ncontract ERC777Mock is Context, ERC777 {\\n    event BeforeTokenTransfer();\\n\\n    constructor(\\n        address initialHolder,\\n        uint256 initialBalance,\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators\\n    ) ERC777(name, symbol, defaultOperators) {\\n        _mint(initialHolder, initialBalance, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function mintInternal (\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) public {\\n        _mint(to, amount, userData, operatorData);\\n    }\\n\\n    function mintInternalExtended (\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) public {\\n        _mint(to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    function approveInternal(address holder, address spender, uint256 value) public {\\n        _approve(holder, spender, value);\\n    }\\n\\n    function _beforeTokenTransfer(address, address, address, uint256) internal override {\\n        emit BeforeTokenTransfer();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721BurnableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\ncontract ERC721BurnableMock is ERC721Burnable {\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\\n        _safeMint(to, tokenId, _data);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ContextMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\ncontract ContextMock is Context {\\n    event Sender(address sender);\\n\\n    function msgSender() public {\\n        emit Sender(_msgSender());\\n    }\\n\\n    event Data(bytes data, uint256 integerValue, string stringValue);\\n\\n    function msgData(uint256 integerValue, string memory stringValue) public {\\n        emit Data(_msgData(), integerValue, stringValue);\\n    }\\n}\\n\\ncontract ContextMockCaller {\\n    function callSender(ContextMock context) public {\\n        context.msgSender();\\n    }\\n\\n    function callData(ContextMock context, uint256 integerValue, string memory stringValue) public {\\n        context.msgData(integerValue, stringValue);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC2771ContextMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextMock.sol\\\";\\nimport \\\"../metatx/ERC2771Context.sol\\\";\\n\\n// By inheriting from ERC2771Context, Context's internal functions are overridden automatically\\ncontract ERC2771ContextMock is ContextMock, ERC2771Context {\\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\\n\\n    function _msgSender() internal override(Context, ERC2771Context) view virtual returns (address) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal override(Context, ERC2771Context) view virtual returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/metatx/ERC2771Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/*\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address immutable _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly { sender := shr(96, calldataload(sub(calldatasize(), 20))) }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length-20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/escrow/Escrow.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n /**\\n  * @title Escrow\\n  * @dev Base escrow contract, holds funds designated for a payee until they\\n  * withdraw them.\\n  *\\n  * Intended usage: This contract (and derived escrow contracts) should be a\\n  * standalone contract, that only interacts with the contract that instantiated\\n  * it. That way, it is guaranteed that all Ether will be handled according to\\n  * the `Escrow` rules, and there is no need to check for payable functions or\\n  * transfers in the inheritance tree. The contract that uses the escrow as its\\n  * payment method should be its owner, and provide public methods redirecting\\n  * to the escrow's deposit and withdraw.\\n  */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/security/PullPayment.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow immutable private _escrow;\\n\\n    constructor () {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{ value: amount }(dest);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/PullPaymentMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../security/PullPayment.sol\\\";\\n\\n// mock class using PullPayment\\ncontract PullPaymentMock is PullPayment {\\n    constructor () payable { }\\n\\n    // test helper function to call asyncTransfer\\n    function callTransfer(address dest, uint256 amount) public {\\n        _asyncTransfer(dest, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/escrow/ConditionalEscrow.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Escrow.sol\\\";\\n\\n/**\\n * @title ConditionalEscrow\\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\\n */\\nabstract contract ConditionalEscrow is Escrow {\\n    /**\\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\\n     * implemented by derived contracts.\\n     * @param payee The destination address of the funds.\\n     */\\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\\n\\n    function withdraw(address payable payee) public virtual override {\\n        require(withdrawalAllowed(payee), \\\"ConditionalEscrow: payee is not allowed to withdraw\\\");\\n        super.withdraw(payee);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/utils/escrow/RefundEscrow.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConditionalEscrow.sol\\\";\\n\\n/**\\n * @title RefundEscrow\\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\\n * parties.\\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\\n * @dev The owner account (that is, the contract that instantiates this\\n * contract) may deposit, close the deposit period, and allow for either\\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\\n * with `RefundEscrow` will be made through the owner contract.\\n */\\ncontract RefundEscrow is ConditionalEscrow {\\n    using Address for address payable;\\n\\n    enum State { Active, Refunding, Closed }\\n\\n    event RefundsClosed();\\n    event RefundsEnabled();\\n\\n    State private _state;\\n    address payable immutable private _beneficiary;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param beneficiary_ The beneficiary of the deposits.\\n     */\\n    constructor (address payable beneficiary_) {\\n        require(beneficiary_ != address(0), \\\"RefundEscrow: beneficiary is the zero address\\\");\\n        _beneficiary = beneficiary_;\\n        _state = State.Active;\\n    }\\n\\n    /**\\n     * @return The current state of the escrow.\\n     */\\n    function state() public view virtual returns (State) {\\n        return _state;\\n    }\\n\\n    /**\\n     * @return The beneficiary of the escrow.\\n     */\\n    function beneficiary() public view virtual returns (address payable) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Stores funds that may later be refunded.\\n     * @param refundee The address funds will be sent to if a refund occurs.\\n     */\\n    function deposit(address refundee) public payable virtual override {\\n        require(state() == State.Active, \\\"RefundEscrow: can only deposit while active\\\");\\n        super.deposit(refundee);\\n    }\\n\\n    /**\\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\\n     * further deposits.\\n     */\\n    function close() public virtual onlyOwner {\\n        require(state() == State.Active, \\\"RefundEscrow: can only close while active\\\");\\n        _state = State.Closed;\\n        emit RefundsClosed();\\n    }\\n\\n    /**\\n     * @dev Allows for refunds to take place, rejecting further deposits.\\n     */\\n    function enableRefunds() public onlyOwner virtual {\\n        require(state() == State.Active, \\\"RefundEscrow: can only enable refunds while active\\\");\\n        _state = State.Refunding;\\n        emit RefundsEnabled();\\n    }\\n\\n    /**\\n     * @dev Withdraws the beneficiary's funds.\\n     */\\n    function beneficiaryWithdraw() public virtual {\\n        require(state() == State.Closed, \\\"RefundEscrow: beneficiary can only withdraw while closed\\\");\\n        beneficiary().sendValue(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\\n     */\\n    function withdrawalAllowed(address) public view override returns (bool) {\\n        return state() == State.Refunding;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ConditionalEscrowMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/ConditionalEscrow.sol\\\";\\n\\n// mock class using ConditionalEscrow\\ncontract ConditionalEscrowMock is ConditionalEscrow {\\n    mapping(address => bool) private _allowed;\\n\\n    function setAllowed(address payee, bool allowed) public {\\n        _allowed[payee] = allowed;\\n    }\\n\\n    function withdrawalAllowed(address payee) public view override returns (bool) {\\n        return _allowed[payee];\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ClonesMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Clones.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\ncontract ClonesMock {\\n    using Address for address;\\n    using Clones for address;\\n\\n    event NewInstance(address instance);\\n\\n    function clone(address implementation, bytes calldata initdata) public payable {\\n        _initAndEmit(implementation.clone(), initdata);\\n    }\\n\\n    function cloneDeterministic(address implementation, bytes32 salt, bytes calldata initdata) public payable {\\n        _initAndEmit(implementation.cloneDeterministic(salt), initdata);\\n    }\\n\\n    function predictDeterministicAddress(address implementation, bytes32 salt) public view returns (address predicted) {\\n        return implementation.predictDeterministicAddress(salt);\\n    }\\n\\n    function _initAndEmit(address instance, bytes memory initdata) private {\\n        if (initdata.length > 0) {\\n            instance.functionCallWithValue(initdata, msg.value);\\n        }\\n        emit NewInstance(instance);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/Clones.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/AddressImpl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\ncontract AddressImpl {\\n    string public sharedAnswer;\\n\\n    event CallReturnValue(string data);\\n\\n    function isContract(address account) external view returns (bool) {\\n        return Address.isContract(account);\\n    }\\n\\n    function sendValue(address payable receiver, uint256 amount) external {\\n        Address.sendValue(receiver, amount);\\n    }\\n\\n    function functionCall(address target, bytes calldata data) external {\\n        bytes memory returnData = Address.functionCall(target, data);\\n        emit CallReturnValue(abi.decode(returnData, (string)));\\n    }\\n\\n    function functionCallWithValue(address target, bytes calldata data, uint256 value) external payable {\\n        bytes memory returnData = Address.functionCallWithValue(target, data, value);\\n        emit CallReturnValue(abi.decode(returnData, (string)));\\n    }\\n\\n    function functionStaticCall(address target, bytes calldata data) external {\\n        bytes memory returnData = Address.functionStaticCall(target, data);\\n        emit CallReturnValue(abi.decode(returnData, (string)));\\n    }\\n\\n    function functionDelegateCall(address target, bytes calldata data) external {\\n        bytes memory returnData = Address.functionDelegateCall(target, data);\\n        emit CallReturnValue(abi.decode(returnData, (string)));\\n    }\\n\\n    // sendValue's tests require the contract to hold Ether\\n    receive () external payable { }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/StorageSlotMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/StorageSlot.sol\\\";\\n\\ncontract StorageSlotMock {\\n    using StorageSlot for bytes32;\\n    function setBoolean(bytes32 slot, bool value) public { slot.getBooleanSlot().value = value; }\\n    function setAddress(bytes32 slot, address value) public { slot.getAddressSlot().value = value; }\\n    function setBytes32(bytes32 slot, bytes32 value) public { slot.getBytes32Slot().value = value; }\\n    function setUint256(bytes32 slot, uint256 value) public { slot.getUint256Slot().value = value; }\\n    function getBoolean(bytes32 slot) public view returns (bool) { return slot.getBooleanSlot().value; }\\n    function getAddress(bytes32 slot) public view returns (address) { return slot.getAddressSlot().value; }\\n    function getBytes32(bytes32 slot) public view returns (bytes32) { return slot.getBytes32Slot().value; }\\n    function getUint256(bytes32 slot) public view returns (uint256) { return slot.getUint256Slot().value; }\\n}\\n\"\n    },\n    \"contracts/oz/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\n    },\n    \"contracts/oz/mocks/UUPS/TestInProd.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CountersImpl.sol\\\";\\nimport \\\"../../proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract UUPSUpgradeableMock is CountersImpl, UUPSUpgradeable {\\n    // Not having any checks in this function is dangerous! Do not do this outside tests!\\n    function _authorizeUpgrade(address) internal virtual override {}\\n}\\n\\ncontract UUPSUpgradeableUnsafeMock is UUPSUpgradeableMock {\\n    function upgradeTo(address newImplementation) external virtual override {\\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual override {\\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, data, false);\\n    }\\n}\\n\\ncontract UUPSUpgradeableBrokenMock is UUPSUpgradeableMock {\\n    function upgradeTo(address) external virtual override {\\n        // pass\\n    }\\n\\n    function upgradeToAndCall(address, bytes memory) external payable virtual override {\\n        // pass\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/oz/mocks/CountersImpl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Counters.sol\\\";\\n\\ncontract CountersImpl {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _counter;\\n\\n    function current() public view returns (uint256) {\\n        return _counter.current();\\n    }\\n\\n    function increment() public {\\n        _counter.increment();\\n    }\\n\\n    function decrement() public {\\n        _counter.decrement();\\n    }\\n\\n    function reset() public {\\n        _counter.reset();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/OwnableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\n\\ncontract OwnableMock is Ownable { }\\n\"\n    },\n    \"contracts/oz/mocks/SignatureCheckerMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/SignatureChecker.sol\\\";\\n\\ncontract SignatureCheckerMock {\\n    using SignatureChecker for address;\\n\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) public view returns (bool) {\\n        return signer.isValidSignatureNow(hash, signature);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ECDSAMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\n\\ncontract ECDSAMock {\\n    using ECDSA for bytes32;\\n\\n    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\\n        return hash.recover(signature);\\n    }\\n\\n    function toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\\n        return hash.toEthSignedMessageHash();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/SafeCastMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/math/SafeCast.sol\\\";\\n\\ncontract SafeCastMock {\\n    using SafeCast for uint;\\n    using SafeCast for int;\\n\\n    function toUint256(int a) public pure returns (uint256) {\\n        return a.toUint256();\\n    }\\n\\n    function toInt256(uint a) public pure returns (int256) {\\n        return a.toInt256();\\n    }\\n\\n    function toUint128(uint a) public pure returns (uint128) {\\n        return a.toUint128();\\n    }\\n\\n    function toUint64(uint a) public pure returns (uint64) {\\n        return a.toUint64();\\n    }\\n\\n    function toUint32(uint a) public pure returns (uint32) {\\n        return a.toUint32();\\n    }\\n\\n    function toUint16(uint a) public pure returns (uint16) {\\n        return a.toUint16();\\n    }\\n\\n    function toUint8(uint a) public pure returns (uint8) {\\n        return a.toUint8();\\n    }\\n\\n    function toInt128(int a) public pure returns (int128) {\\n        return a.toInt128();\\n    }\\n\\n    function toInt64(int a) public pure returns (int64) {\\n        return a.toInt64();\\n    }\\n\\n    function toInt32(int a) public pure returns (int32) {\\n        return a.toInt32();\\n    }\\n\\n    function toInt16(int a) public pure returns (int16) {\\n        return a.toInt16();\\n    }\\n\\n    function toInt8(int a) public pure returns (int8) {\\n        return a.toInt8();\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20VotesMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\ncontract ERC20VotesMock is ERC20Votes {\\n    constructor (string memory name, string memory symbol)\\n    ERC20(name, symbol)\\n    ERC20Permit(name)\\n    {}\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function getChainId() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ArraysImpl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Arrays.sol\\\";\\n\\ncontract ArraysImpl {\\n    using Arrays for uint256[];\\n\\n    uint256[] private _array;\\n\\n    constructor (uint256[] memory array) {\\n        _array = array;\\n    }\\n\\n    function findUpperBound(uint256 element) external view returns (uint256) {\\n        return _array.findUpperBound(element);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC20SnapshotMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/ERC20Snapshot.sol\\\";\\n\\n\\ncontract ERC20SnapshotMock is ERC20Snapshot {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n\\n    function snapshot() public {\\n        _snapshot();\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721URIStorageMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\n/**\\n * @title ERC721Mock\\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\\n */\\ncontract ERC721URIStorageMock is ERC721URIStorage {\\n    string private _baseTokenURI;\\n\\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseURI(string calldata newBaseTokenURI) public {\\n        _baseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\\n        _safeMint(to, tokenId, _data);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @title ERC721Mock\\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\\n */\\ncontract ERC721Mock is ERC721 {\\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\\n\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\\n        _safeMint(to, tokenId, _data);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/token/ERC721/utils/ERC721Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/ERC721ReceiverMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ERC721ReceiverMock is IERC721Receiver {\\n    enum Error {\\n        None,\\n        RevertWithMessage,\\n        RevertWithoutMessage,\\n        Panic\\n    }\\n\\n    bytes4 private immutable _retval;\\n    Error private immutable _error;\\n\\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\\n\\n    constructor (bytes4 retval, Error error) {\\n        _retval = retval;\\n        _error = error;\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n        public override returns (bytes4)\\n    {\\n        if (_error == Error.RevertWithMessage) {\\n            revert(\\\"ERC721ReceiverMock: reverting\\\");\\n        } else if (_error == Error.RevertWithoutMessage) {\\n            revert();\\n        } else if (_error == Error.Panic) {\\n            uint256 a = uint256(0) / uint256(0);\\n            a;\\n        }\\n        emit Received(operator, from, tokenId, data, gasleft());\\n        return _retval;\\n    }\\n}\\n\"\n    },\n    \"contracts/oz/mocks/AccessControlMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\n\\ncontract AccessControlMock is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\\n        _setRoleAdmin(roleId, adminRoleId);\\n    }\\n\\n    function senderProtected(bytes32 roleId) public onlyRole(roleId) {}\\n}\\n\"\n    },\n    \"contracts/oz/governance/TimelockController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        // solhint-disable-next-line not-rely-on-time\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 predecessor) private view {\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(bytes32 id, uint256 index, address target, uint256 value, bytes calldata data) private {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 50\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "6304be5f99538150120d66af4566b217",
      "transactionHash": "0xfb98db34a210f4c087bd31bf59930419da80e4f3493cf98cca2371bd5700c700",
      "args": [
        16,
        150,
        "0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa"
      ]
    },
    "decoded": {
      "from": "0xc2f461aA826c64b93666A6C7f56F632f200fC0E1",
      "gasPrice": "8000000000",
      "gasLimit": "3668976",
      "to": null,
      "value": "0",
      "nonce": 0,
      "data": "0x60806040526000600f81905560108190556107d060135560646014556016556017805460ff191690553480156200003557600080fd5b5060405162003c0838038062003c08833981016040819052620000589162000700565b604080518082018252601181527011da5d18dbda5b8811185b98d948139195607a1b60208083019182528351808501909452600484526311d2551160e21b908401528151919291620000ad916000916200062a565b508051620000c39060019060208401906200062a565b50620000d5915060009050336200013b565b620001017f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200013b565b600a80546001600160a01b0319166001600160a01b03831617905562000127836200014b565b620001328362000299565b50505062000816565b620001478282620002e0565b5050565b62000158600282620007d3565b15620001ab5760405162461bcd60e51b815260206004820152601660248201527f746869732069736e74206120706f776572206f6620320000000000000000000060448201526064015b60405180910390fd5b60175460ff1615620002005760405162461bcd60e51b815260206004820152601c60248201527f67616d652063616e74206265207374617274656420616c7265616479000000006044820152606401620001a2565b60186000600f54600162000215919062000746565b815260208082019290925260409081016000908120818052835281812090925290206001015415620002965760405162461bcd60e51b815260206004820152602360248201527f54686973206c6f6f6b73206c696b65206120726f756e6420657869737473206860448201526265726560e81b6064820152608401620001a2565b50565b620002a4816200014b565b600f8054906000620002b683620007b5565b9091555050600160115560158190556016819055620002d58162000384565b50620002966200039e565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001475760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003403390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806200039283620004a6565b60108190559392505050565b6000620003d86002620003c4601154601654620005dc60201b620013e11790919060201c565b620005dc60201b620013e11790919060201c565b60165490915060006001815b8481116200049f576200041281604051806040016040528086815260200185815250620005f160201b60201c565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a36200047982600162000746565b92506200048883600162000746565b9150806200049681620007b5565b915050620003e4565b5050505050565b600080600160801b8310620004ca57608092831c92620004c7908262000746565b90505b680100000000000000008310620004f057604092831c92620004ed908262000746565b90505b64010000000083106200051257602092831c926200050f908262000746565b90505b6201000083106200053257601092831c926200052f908262000746565b90505b61010083106200055157600892831c926200054e908262000746565b90505b601083106200056f57600492831c926200056c908262000746565b90505b600483106200058d57600292831c926200058a908262000746565b90505b60028310620005ab57600192831c92620005a8908262000746565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b6000620005ea828462000761565b9392505050565b600f5460009081526018602090815260408083206011548452825280832085845290915290206200062590826002620006b9565b505050565b828054620006389062000778565b90600052602060002090601f0160209004810192826200065c5760008555620006a7565b82601f106200067757805160ff1916838001178555620006a7565b82800160010185558215620006a7579182015b82811115620006a75782518255916020019190600101906200068a565b50620006b5929150620006e9565b5090565b8260028101928215620006a75791602002820182811115620006a75782518255916020019190600101906200068a565b5b80821115620006b55760008155600101620006ea565b60008060006060848603121562000715578283fd5b83516020850151604086015191945092506001600160a01b03811681146200073b578182fd5b809150509250925092565b600082198211156200075c576200075c620007ea565b500190565b60008262000773576200077362000800565b500490565b6002810460018216806200078d57607f821691505b60208210811415620007af57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620007cc57620007cc620007ea565b5060010190565b600082620007e557620007e562000800565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6133e280620008266000396000f3fe60806040523480156200001157600080fd5b5060043610620002445760003560e01c806375b5e9241162000141578063b88d4fde11620000c3578063b88d4fde1462000595578063bd2f135a14620005ac578063c87b56dd14620005c3578063c892fffc14620005da578063d0def52114620005f1578063d53913931462000608578063d547741f146200061f578063d65ab5f21462000636578063dc31beb61462000640578063de5912bd146200064a578063e985e9c5146200065e5762000244565b806375b5e924146200048a5780637d659a4814620004945780638eb80eb514620004b757806391d1485414620004dd57806395d89b4114620004f457806398b9b23614620004fe5780639ce9c7b61462000521578063a217fddf146200054d578063a22cb4651462000556578063b55b8ceb146200056d5762000244565b80632f2ff15d11620001cb5780632f2ff15d146200039057806336568abe14620003a757806342842e0e14620003be57806348b336cb14620003d55780635456bf13146200040157806359360c0414620004185780635e6894fc146200042f5780636352211e14620004525780636b4d1f0c146200046957806370a0823114620004735762000244565b806301ffc9a71462000249578063056524ea146200027557806306fdde0314620002ac578063081812fc14620002c5578063095ea7b314620002f55780630bb78ec1146200030e5780631095b4df146200032557806323b872dd146200033c578063248a9ca31462000353578063272264d31462000379575b600080fd5b620002606200025a36600462002299565b62000675565b60405190151581526020015b60405180910390f35b6200029d7f2a0f2a070eb463d9807435b07a6dbfeede905dd039b03efc105c79daf0c8434881565b6040519081526020016200026c565b620002b66200068a565b6040516200026c919062002468565b620002dc620002d63660046200225b565b62000725565b6040516001600160a01b0390911681526020016200026c565b6200030c620003063660046200222f565b620007b5565b005b620002b66200031f3660046200225b565b620008d1565b6200029d620003363660046200225b565b62000973565b6200030c6200034d366004620020df565b6200098d565b6200029d620003643660046200225b565b60009081526006602052604090206001015490565b6200029d6200038a3660046200225b565b620009c5565b6200030c620003a136600462002274565b620009eb565b6200030c620003b836600462002274565b62000a16565b6200030c620003cf366004620020df565b62000a98565b620002dc620003e63660046200225b565b601a602052600090815260409020546001600160a01b031681565b6200029d620004123660046200225b565b62000ab5565b620002dc62000429366004620022d7565b62000be6565b6200029d620004403660046200225b565b60096020526000908152604090205481565b620002dc620004633660046200225b565b62000d1e565b6200030c62000d97565b6200029d620004843660046200208b565b62000e87565b6200030c62000f10565b6200029d620004a53660046200208b565b600d6020526000908152604090205481565b62000260620004c83660046200208b565b60196020526000908152604090205460ff1681565b62000260620004ee36600462002274565b62000f26565b620002b662000f51565b6200029d6200050f3660046200225b565b600e6020526000908152604090205481565b620002dc620005323660046200225b565b600c602052600090815260409020546001600160a01b031681565b6200029d600081565b6200030c62000567366004620021a0565b62000f62565b6200029d7fa9c8c3e87c79e0da85cf2d427e2102d48db1379529b967d6604d431f1437723f81565b6200030c620005a63660046200211f565b62001033565b6200029d620005bd36600462002338565b62001072565b620002b6620005d43660046200225b565b620010b2565b62000260620005eb3660046200208b565b62001185565b6200029d62000602366004620021de565b6200125f565b6200029d6000805160206200338d83398151915281565b6200030c6200063036600462002274565b6200135d565b6200030c62001387565b6200029d60105481565b6200030c6200065b3660046200225b565b50565b620002606200066f366004620020a8565b620013b3565b60006200068282620013ef565b90505b919050565b6060600080546200069b906200261f565b80601f0160208091040260200160405190810160405280929190818152602001828054620006c9906200261f565b80156200071a5780601f10620006ee576101008083540402835291602001916200071a565b820191906000526020600020905b815481529060010190602001808311620006fc57829003601f168201915b505050505090505b90565b6000620007328262001417565b620007995760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000620007c28262000d1e565b9050806001600160a01b0316836001600160a01b03161415620008325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840162000790565b336001600160a01b03821614806200085157506200085181336200066f565b620008c05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840162000790565b620008cc838362001434565b505050565b60086020526000908152604090208054620008ec906200261f565b80601f01602080910402602001604051908101604052809291908181526020018280546200091a906200261f565b80156200096b5780601f106200093f576101008083540402835291602001916200096b565b820191906000526020600020905b8154815290600101906020018083116200094d57829003601f168201915b505050505081565b600080620009818362000ab5565b60108190559392505050565b620009993382620014a4565b620009b85760405162461bcd60e51b81526004016200079090620024fc565b620008cc8383836200157a565b600080620009d5600143620025bc565b409050620009e4818462001726565b9392505050565b60008281526006602052604090206001015462000a0a81335b62001734565b620008cc8383620017a3565b6001600160a01b038116331462000a885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000790565b62000a9482826200182d565b5050565b620008cc8383836040518060200160405280600081525062001033565b600080600160801b831062000ad957608092831c9262000ad6908262002568565b90505b600160401b831062000afa57604092831c9262000af7908262002568565b90505b640100000000831062000b1c57602092831c9262000b19908262002568565b90505b62010000831062000b3c57601092831c9262000b39908262002568565b90505b610100831062000b5b57600892831c9262000b58908262002568565b90505b6010831062000b7957600492831c9262000b76908262002568565b90505b6004831062000b9757600292831c9262000b94908262002568565b90505b6002831062000bb557600192831c9262000bb2908262002568565b90505b60405181907f909c57d5c6ac08245cf2a6de3900e2b868513fa59099b92b27d8db823d92df9c90600090a292915050565b600062000bf4813362000f26565b62000c365760405162461bcd60e51b81526020600482015260116024820152702737ba103232b330bab63a1030b236b4b760791b604482015260640162000790565b600062000c4430856200125f565b600a5460405191925060009130916001600160a01b03169062000c679062001ef1565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000c9b573d6000803e3d6000fd5b50905081816001600160a01b03167fef9c0462f3702100d0fe56e120e5d1bad81b72afa45ef3a6fcd7b40e4e6d8b0660405160405180910390a36000828152600c6020818152604080842080546001600160a01b0319166001600160a01b0396871690811782558552600d83529084208690559490925290529054169392505050565b6000818152600260205260408120546001600160a01b031680620006825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840162000790565b600062000dbf600262000db8601154601654620013e190919063ffffffff16565b90620013e1565b60165490915060006001815b84811162000e805762000df38160405180604001604052808681526020018581525062001897565b6000828152600c6020908152604080832054868452928190205490518481526001600160a01b0393841693909116917fbbcbae1c475b8de12a83d866f05a6c253f2af9b5a7e299aa0d6f9fc50fb66e1e910160405180910390a362000e5a82600162002568565b925062000e6983600162002568565b91508062000e77816200265c565b91505062000dcb565b5050505050565b60006001600160a01b03821662000ef45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000790565b506001600160a01b031660009081526003602052604090205490565b62000f1a620018cb565b62000f2457600080fd5b565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546200069b906200261f565b6001600160a01b03821633141562000fb95760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640162000790565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405162001027911515815260200190565b60405180910390a35050565b6200103f3383620014a4565b6200105e5760405162461bcd60e51b81526004016200079090620024fc565b6200106c8484848462001930565b50505050565b60186020528360005260406000206020528260005260406000206020528160005260406000208160028110620010a757600080fd5b015493508492505050565b6060620010bf8262001417565b620010de5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602052604081208054620010f9906200261f565b80601f016020809104026020016040519081016040528092919081815260200182805462001127906200261f565b8015620011785780601f106200114c5761010080835404028352916020019162001178565b820191906000526020600020905b8154815290600101906020018083116200115a57829003601f168201915b5093979650505050505050565b600062001191620018cb565b6200119b57600080fd5b60408051600481526024810182526020810180516001600160e01b031663bbf6061b60e01b179052905160009182916001600160a01b03861691620011e09162002398565b6000604051808303816000865af19150503d80600081146200121f576040519150601f19603f3d011682016040523d82523d6000602084013e62001224565b606091505b5091509150811562001258576000818060200190518101906200124891906200231f565b90506200125685826200196a565b505b5092915050565b60006200127c6000805160206200338d8339815191523362000f26565b620012d45760405162461bcd60e51b815260206004820152602160248201527f3732314d696e743a206163636f756e742069736e74204d696e74657220726f6c6044820152606560f81b606482015260840162000790565b620012e983620012e360075490565b620019ad565b620012fe620012f760075490565b8362001ae8565b60006200130a60075490565b90506200131b600780546001019055565b7f9e0bfaf38878aad3ebd19b8c8065288eb130f0499a7378363d4652515588ac9681846040516200134e9291906200254d565b60405180910390a19392505050565b6000828152600660205260409020600101546200137b813362000a04565b620008cc83836200182d565b60175460ff16156200139857600080fd5b436012556017805460ff1916600117905562000f2462000d97565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000620009e4828462002583565b60006001600160e01b03198216637965db0b60e01b1480620006825750620006828262001b8e565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906200146b8262000d1e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000620014b18262001417565b620015145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840162000790565b6000620015218362000d1e565b9050806001600160a01b0316846001600160a01b031614806200155f5750836001600160a01b0316620015548462000725565b6001600160a01b0316145b80620015725750620015728185620013b3565b949350505050565b826001600160a01b03166200158f8262000d1e565b6001600160a01b031614620015f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840162000790565b6001600160a01b0382166200165d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840162000790565b6200166a60008262001434565b6001600160a01b038316600090815260036020526040812080546001929062001695908490620025bc565b90915550506001600160a01b0382166000908152600360205260408120805460019290620016c590849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000620009e482846200267a565b62001740828262000f26565b62000a94576200175b816001600160a01b0316601462001be1565b6200176883602062001be1565b6040516020016200177b929190620023b6565b60408051601f198184030181529082905262461bcd60e51b8252620007909160040162002468565b620017af828262000f26565b62000a945760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620017e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001839828262000f26565b1562000a945760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600f546000908152601860209081526040808320601154845282528083208584529091529020620008cc9082600262001eff565b60175460009060ff16620018de57600080fd5b600060125443620018f09190620025bc565b9050601354811062001928576000601354826200190e91906200267a565b90506014548111620019265760019250505062000722565b505b600091505090565b6200193d8484846200157a565b6200194b8484848462001dd6565b6200106c5760405162461bcd60e51b815260040162000790906200247d565b6001600160a01b0382166000908152600d6020908152604080832054808452600e9092528220805491928492620019a390849062002568565b9091555050505050565b6001600160a01b03821662001a055760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000790565b62001a108162001417565b1562001a5f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000790565b6001600160a01b038216600090815260036020526040812080546001929062001a8a90849062002568565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b62001b036000805160206200338d8339815191523362000f26565b62001b435760405162461bcd60e51b815260206004820152600f60248201526e4e6f74204d696e74657220526f6c6560881b604482015260640162000790565b62001b4e8262001417565b62001b6d5760405162461bcd60e51b81526004016200079090620024cf565b60008281526008602090815260409091208251620008cc9284019062001f42565b60006001600160e01b031982166380ac58cd60e01b148062001bc057506001600160e01b03198216635b5e139f60e01b145b806200068257506301ffc9a760e01b6001600160e01b031983161462000682565b6060600062001bf28360026200259a565b62001bff90600262002568565b6001600160401b0381111562001c2557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562001c50576020820181803683370190505b509050600360fc1b8160008151811062001c7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001cb857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062001cde8460026200259a565b62001ceb90600162002568565b90505b600181111562001d85576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001d2f57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811062001d5457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362001d7d8162002605565b905062001cee565b508315620009e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000790565b60006001600160a01b0384163b1562001ee657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029062001e1d90339089908890889060040162002429565b602060405180830381600087803b15801562001e3857600080fd5b505af192505050801562001e6b575060408051601f3d908101601f1916820190925262001e6891810190620022b8565b60015b62001ecb573d80801562001e9c576040519150601f19603f3d011682016040523d82523d6000602084013e62001ea1565b606091505b50805162001ec35760405162461bcd60e51b815260040162000790906200247d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062001572565b506001949350505050565b610ca280620026eb83390190565b826002810192821562001f30579160200282015b8281111562001f3057825182559160200191906001019062001f13565b5062001f3e92915062001fbe565b5090565b82805462001f50906200261f565b90600052602060002090601f01602090048101928262001f74576000855562001f30565b82601f1062001f8f57805160ff191683800117855562001f30565b8280016001018555821562001f30579182018281111562001f3057825182559160200191906001019062001f13565b5b8082111562001f3e576000815560010162001fbf565b60006001600160401b038084111562001ff25762001ff2620026bd565b604051601f8501601f19908116603f011681019082821181831017156200201d576200201d620026bd565b816040528093508581528686860111156200203757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146200068557600080fd5b600082601f8301126200207a578081fd5b620009e48383356020850162001fd5565b6000602082840312156200209d578081fd5b620009e48262002051565b60008060408385031215620020bb578081fd5b620020c68362002051565b9150620020d66020840162002051565b90509250929050565b600080600060608486031215620020f4578081fd5b620020ff8462002051565b92506200210f6020850162002051565b9150604084013590509250925092565b6000806000806080858703121562002135578081fd5b620021408562002051565b9350620021506020860162002051565b92506040850135915060608501356001600160401b0381111562002172578182fd5b8501601f8101871362002183578182fd5b620021948782356020840162001fd5565b91505092959194509250565b60008060408385031215620021b3578182fd5b620021be8362002051565b915060208301358015158114620021d3578182fd5b809150509250929050565b60008060408385031215620021f1578182fd5b620021fc8362002051565b915060208301356001600160401b0381111562002217578182fd5b620022258582860162002069565b9150509250929050565b6000806040838503121562002242578182fd5b6200224d8362002051565b946020939093013593505050565b6000602082840312156200226d578081fd5b5035919050565b6000806040838503121562002287578182fd5b82359150620020d66020840162002051565b600060208284031215620022ab578081fd5b8135620009e481620026d3565b600060208284031215620022ca578081fd5b8151620009e481620026d3565b60008060408385031215620022ea578182fd5b82356001600160401b0381111562002300578283fd5b6200230e8582860162002069565b925050620020d66020840162002051565b60006020828403121562002331578081fd5b5051919050565b600080600080608085870312156200234e578182fd5b5050823594602084013594506040840135936060013592509050565b6000815180845262002384816020860160208601620025d6565b601f01601f19169290920160200192915050565b60008251620023ac818460208701620025d6565b9190910192915050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b82528351620023ea816017850160208801620025d6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200241d816028840160208801620025d6565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906200245e908301846200236a565b9695505050505050565b600060208252620009e460208301846200236a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260139082015272139195081a5908191bdcd95b9d08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000838252604060208301526200157260408301846200236a565b600082198211156200257e576200257e62002691565b500190565b600082620025955762002595620026a7565b500490565b6000816000190483118215151615620025b757620025b762002691565b500290565b600082821015620025d157620025d162002691565b500390565b60005b83811015620025f3578181015183820152602001620025d9565b838111156200106c5750506000910152565b60008162002617576200261762002691565b506000190190565b6002810460018216806200263457607f821691505b602082108114156200265657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562002673576200267362002691565b5060010190565b6000826200268c576200268c620026a7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146200065b57600080fdfe608060405234801561001057600080fd5b50604051610ca2380380610ca283398101604081905261002f91610133565b61003a60003361006b565b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055610165565b6100758282610079565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610075576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b038116811461012e57600080fd5b919050565b60008060408385031215610145578182fd5b61014e83610117565b915061015c60208401610117565b90509250929050565b610b2e806101746000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806301ffc9a71461009e578063248a9ca3146100c65780632a3ac08c146100f75780632f2ff15d1461011e57806336568abe1461013357806391d1485414610146578063a217fddf14610159578063bbf6061b14610161578063c3fe3e2814610169578063d547741f14610189578063f4b9fa751461019c575b600080fd5b6100b16100ac366004610955565b6101af565b60405190151581526020015b60405180910390f35b6100e96100d4366004610903565b60009081526020819052604090206001015490565b6040519081526020016100bd565b6100e97fe39604301a5df21de489c846135593d1f32826f514afa2544bdbe9ace2bfae4a81565b61013161012c36600461091b565b6101e6565b005b61013161014136600461091b565b610212565b6100b161015436600461091b565b610295565b6100e9600081565b6100e96102be565b60025461017c906001600160a01b031681565b6040516100bd9190610a04565b61013161019736600461091b565b610587565b60015461017c906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806101e057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461020381335b6105ad565b61020d8383610611565b505050565b6001600160a01b03811633146102875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102918282610695565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906102f3903090600401610a04565b60206040518083038186803b15801561030b57600080fd5b505afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061097d565b6001546002546040516370a0823160e01b81529293506001600160a01b039182169263095ea7b3929091169083906370a0823190610385903090600401610a04565b60206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d5919061097d565b6040518363ffffffff1660e01b81526004016103f2929190610a18565b602060405180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044491906108e3565b61044d57600080fd5b6001546002546040516370a0823160e01b81526001600160a01b039283169263a9059cbb92169083906370a082319061048a903090600401610a04565b60206040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da919061097d565b6040518363ffffffff1660e01b81526004016104f7929190610a18565b602060405180830381600087803b15801561051157600080fd5b505af1158015610525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054991906108e3565b506002546040516001600160a01b03909116907fbdd983d6baf07aab2a84779f0fc201c6bf84ab638ad825fa90e0e370f04c39df90600090a2905090565b6000828152602081905260409020600101546105a381336101fe565b61020d8383610695565b6105b78282610295565b610291576105cf816001600160a01b031660146106fa565b6105da8360206106fa565b6040516020016105eb929190610995565b60408051601f198184030181529082905262461bcd60e51b825261027e91600401610a31565b61061b8282610295565b610291576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61069f8282610295565b15610291576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610709836002610a7c565b610714906002610a64565b67ffffffffffffffff81111561073a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610764576020820181803683370190505b509050600360fc1b8160008151811061078d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107ca57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006107ee846002610a7c565b6107f9906001610a64565b90505b600181111561088d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083b57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061085f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361088681610acb565b90506107fc565b5083156108dc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161027e565b9392505050565b6000602082840312156108f4578081fd5b815180151581146108dc578182fd5b600060208284031215610914578081fd5b5035919050565b6000806040838503121561092d578081fd5b8235915060208301356001600160a01b038116811461094a578182fd5b809150509250929050565b600060208284031215610966578081fd5b81356001600160e01b0319811681146108dc578182fd5b60006020828403121561098e578081fd5b5051919050565b600076020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b825283516109c7816017850160208801610a9b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516109f8816028840160208801610a9b565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610a50816040850160208701610a9b565b601f01601f19169190910160400192915050565b60008219821115610a7757610a77610ae2565b500190565b6000816000190483118215151615610a9657610a96610ae2565b500290565b60005b83811015610ab6578181015183820152602001610a9e565b83811115610ac5576000848401525b50505050565b600081610ada57610ada610ae2565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206a635ba3c15021e4b36dbf267f0d30ead7bde5f793d2f5eee41a499435a1038264736f6c634300080200339f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122064a4253755f81690a72d99ad9a07ee9f1fad8c0233f330c178ec25529533e95c64736f6c63430008020033000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000960000000000000000000000005592ec0cfb4dbc12d3ab100b257153436a1f0fea",
      "r": "0x35c49582132b3650a641afbaf1482c1f7b995033609afdc9f4145ef4ddcebdf5",
      "s": "0x5209c387a211a92e5927369c5207afb2f21dab7af81e7ab35fb0dc58a944dcbf",
      "v": 45,
      "chainId": 5
    }
  }
}