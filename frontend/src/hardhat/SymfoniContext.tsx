/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import { DancerProxy } from "./typechain/DancerProxy";
import { DancerProxy__factory } from "./typechain/factories/DancerProxy__factory";
import { ERC721Mintable } from "./typechain/ERC721Mintable";
import { ERC721Mintable__factory } from "./typechain/factories/ERC721Mintable__factory";
import GameDeployment from "./deployments/rinkeby/Game.json";
import { Game } from "./typechain/Game";
import { Game__factory } from "./typechain/factories/Game__factory";
import { TestDAI } from "./typechain/TestDAI";
import { TestDAI__factory } from "./typechain/factories/TestDAI__factory";
import { TimelockController } from "./typechain/TimelockController";
import { TimelockController__factory } from "./typechain/factories/TimelockController__factory";
import { PaymentSplitter } from "./typechain/PaymentSplitter";
import { PaymentSplitter__factory } from "./typechain/factories/PaymentSplitter__factory";
import { MinimalForwarder } from "./typechain/MinimalForwarder";
import { MinimalForwarder__factory } from "./typechain/factories/MinimalForwarder__factory";
import { AccessControlMock } from "./typechain/AccessControlMock";
import { AccessControlMock__factory } from "./typechain/factories/AccessControlMock__factory";
import { ArraysImpl } from "./typechain/ArraysImpl";
import { ArraysImpl__factory } from "./typechain/factories/ArraysImpl__factory";
import { AccessControlEnumerableMock } from "./typechain/AccessControlEnumerableMock";
import { AccessControlEnumerableMock__factory } from "./typechain/factories/AccessControlEnumerableMock__factory";
import { AddressImpl } from "./typechain/AddressImpl";
import { AddressImpl__factory } from "./typechain/factories/AddressImpl__factory";
import { BadBeaconNotContract } from "./typechain/BadBeaconNotContract";
import { BadBeaconNotContract__factory } from "./typechain/factories/BadBeaconNotContract__factory";
import { ClonesMock } from "./typechain/ClonesMock";
import { ClonesMock__factory } from "./typechain/factories/ClonesMock__factory";
import { ConditionalEscrowMock } from "./typechain/ConditionalEscrowMock";
import { ConditionalEscrowMock__factory } from "./typechain/factories/ConditionalEscrowMock__factory";
import { CallReceiverMock } from "./typechain/CallReceiverMock";
import { CallReceiverMock__factory } from "./typechain/factories/CallReceiverMock__factory";
import { ClashingImplementation } from "./typechain/ClashingImplementation";
import { ClashingImplementation__factory } from "./typechain/factories/ClashingImplementation__factory";
import { ContextMock } from "./typechain/ContextMock";
import { ContextMock__factory } from "./typechain/factories/ContextMock__factory";
import { CountersImpl } from "./typechain/CountersImpl";
import { CountersImpl__factory } from "./typechain/factories/CountersImpl__factory";
import { ContextMockCaller } from "./typechain/ContextMockCaller";
import { ContextMockCaller__factory } from "./typechain/factories/ContextMockCaller__factory";
import { DummyImplementationV2 } from "./typechain/DummyImplementationV2";
import { DummyImplementationV2__factory } from "./typechain/factories/DummyImplementationV2__factory";
import { Create2Impl } from "./typechain/Create2Impl";
import { Create2Impl__factory } from "./typechain/factories/Create2Impl__factory";
import { ERC1155BurnableMock } from "./typechain/ERC1155BurnableMock";
import { ERC1155BurnableMock__factory } from "./typechain/factories/ERC1155BurnableMock__factory";
import { DummyImplementation } from "./typechain/DummyImplementation";
import { DummyImplementation__factory } from "./typechain/factories/DummyImplementation__factory";
import { EIP712External } from "./typechain/EIP712External";
import { EIP712External__factory } from "./typechain/factories/EIP712External__factory";
import { ECDSAMock } from "./typechain/ECDSAMock";
import { ECDSAMock__factory } from "./typechain/factories/ECDSAMock__factory";
import { ERC1155Mock } from "./typechain/ERC1155Mock";
import { ERC1155Mock__factory } from "./typechain/factories/ERC1155Mock__factory";
import { ERC1155PausableMock } from "./typechain/ERC1155PausableMock";
import { ERC1155PausableMock__factory } from "./typechain/factories/ERC1155PausableMock__factory";
import { ERC1155ReceiverMock } from "./typechain/ERC1155ReceiverMock";
import { ERC1155ReceiverMock__factory } from "./typechain/factories/ERC1155ReceiverMock__factory";
import { ERC1271WalletMock } from "./typechain/ERC1271WalletMock";
import { ERC1271WalletMock__factory } from "./typechain/factories/ERC1271WalletMock__factory";
import { ERC165CheckerMock } from "./typechain/ERC165CheckerMock";
import { ERC165CheckerMock__factory } from "./typechain/factories/ERC165CheckerMock__factory";
import { ERC1155SupplyMock } from "./typechain/ERC1155SupplyMock";
import { ERC1155SupplyMock__factory } from "./typechain/factories/ERC1155SupplyMock__factory";
import { ERC165Mock } from "./typechain/ERC165Mock";
import { ERC165Mock__factory } from "./typechain/factories/ERC165Mock__factory";
import { ERC165StorageMock } from "./typechain/ERC165StorageMock";
import { ERC165StorageMock__factory } from "./typechain/factories/ERC165StorageMock__factory";
import { ERC20CappedMock } from "./typechain/ERC20CappedMock";
import { ERC20CappedMock__factory } from "./typechain/factories/ERC20CappedMock__factory";
import { ERC1820ImplementerMock } from "./typechain/ERC1820ImplementerMock";
import { ERC1820ImplementerMock__factory } from "./typechain/factories/ERC1820ImplementerMock__factory";
import { ERC20BurnableMock } from "./typechain/ERC20BurnableMock";
import { ERC20BurnableMock__factory } from "./typechain/factories/ERC20BurnableMock__factory";
import { ERC20DecimalsMock } from "./typechain/ERC20DecimalsMock";
import { ERC20DecimalsMock__factory } from "./typechain/factories/ERC20DecimalsMock__factory";
import { ERC20FlashMintMock } from "./typechain/ERC20FlashMintMock";
import { ERC20FlashMintMock__factory } from "./typechain/factories/ERC20FlashMintMock__factory";
import { ERC20Mock } from "./typechain/ERC20Mock";
import { ERC20Mock__factory } from "./typechain/factories/ERC20Mock__factory";
import { ERC20SnapshotMock } from "./typechain/ERC20SnapshotMock";
import { ERC20SnapshotMock__factory } from "./typechain/factories/ERC20SnapshotMock__factory";
import { ERC20PausableMock } from "./typechain/ERC20PausableMock";
import { ERC20PausableMock__factory } from "./typechain/factories/ERC20PausableMock__factory";
import { ERC20PermitMock } from "./typechain/ERC20PermitMock";
import { ERC20PermitMock__factory } from "./typechain/factories/ERC20PermitMock__factory";
import { ERC2771ContextMock } from "./typechain/ERC2771ContextMock";
import { ERC2771ContextMock__factory } from "./typechain/factories/ERC2771ContextMock__factory";
import { ERC20VotesMock } from "./typechain/ERC20VotesMock";
import { ERC20VotesMock__factory } from "./typechain/factories/ERC20VotesMock__factory";
import { ERC3156FlashBorrowerMock } from "./typechain/ERC3156FlashBorrowerMock";
import { ERC3156FlashBorrowerMock__factory } from "./typechain/factories/ERC3156FlashBorrowerMock__factory";
import { ERC721EnumerableMock } from "./typechain/ERC721EnumerableMock";
import { ERC721EnumerableMock__factory } from "./typechain/factories/ERC721EnumerableMock__factory";
import { ERC721PausableMock } from "./typechain/ERC721PausableMock";
import { ERC721PausableMock__factory } from "./typechain/factories/ERC721PausableMock__factory";
import { ERC721BurnableMock } from "./typechain/ERC721BurnableMock";
import { ERC721BurnableMock__factory } from "./typechain/factories/ERC721BurnableMock__factory";
import { ERC721Mock } from "./typechain/ERC721Mock";
import { ERC721Mock__factory } from "./typechain/factories/ERC721Mock__factory";
import { ERC721ReceiverMock } from "./typechain/ERC721ReceiverMock";
import { ERC721ReceiverMock__factory } from "./typechain/factories/ERC721ReceiverMock__factory";
import { ERC777SenderRecipientMock } from "./typechain/ERC777SenderRecipientMock";
import { ERC777SenderRecipientMock__factory } from "./typechain/factories/ERC777SenderRecipientMock__factory";
import { EnumerableAddressSetMock } from "./typechain/EnumerableAddressSetMock";
import { EnumerableAddressSetMock__factory } from "./typechain/factories/EnumerableAddressSetMock__factory";
import { EnumerableBytes32SetMock } from "./typechain/EnumerableBytes32SetMock";
import { EnumerableBytes32SetMock__factory } from "./typechain/factories/EnumerableBytes32SetMock__factory";
import { ERC721URIStorageMock } from "./typechain/ERC721URIStorageMock";
import { ERC721URIStorageMock__factory } from "./typechain/factories/ERC721URIStorageMock__factory";
import { ERC777Mock } from "./typechain/ERC777Mock";
import { ERC777Mock__factory } from "./typechain/factories/ERC777Mock__factory";
import { EnumerableMapMock } from "./typechain/EnumerableMapMock";
import { EnumerableMapMock__factory } from "./typechain/factories/EnumerableMapMock__factory";
import { InitializableMock } from "./typechain/InitializableMock";
import { InitializableMock__factory } from "./typechain/factories/InitializableMock__factory";
import { EtherReceiverMock } from "./typechain/EtherReceiverMock";
import { EtherReceiverMock__factory } from "./typechain/factories/EtherReceiverMock__factory";
import { EnumerableUintSetMock } from "./typechain/EnumerableUintSetMock";
import { EnumerableUintSetMock__factory } from "./typechain/factories/EnumerableUintSetMock__factory";
import { MathMock } from "./typechain/MathMock";
import { MathMock__factory } from "./typechain/factories/MathMock__factory";
import { MerkleProofWrapper } from "./typechain/MerkleProofWrapper";
import { MerkleProofWrapper__factory } from "./typechain/factories/MerkleProofWrapper__factory";
import { MulticallTest } from "./typechain/MulticallTest";
import { MulticallTest__factory } from "./typechain/factories/MulticallTest__factory";
import { SampleFather } from "./typechain/SampleFather";
import { SampleFather__factory } from "./typechain/factories/SampleFather__factory";
import { SampleGramps } from "./typechain/SampleGramps";
import { SampleGramps__factory } from "./typechain/factories/SampleGramps__factory";
import { SampleChild } from "./typechain/SampleChild";
import { SampleChild__factory } from "./typechain/factories/SampleChild__factory";
import { SampleHuman } from "./typechain/SampleHuman";
import { SampleHuman__factory } from "./typechain/factories/SampleHuman__factory";
import { MulticallTokenMock } from "./typechain/MulticallTokenMock";
import { MulticallTokenMock__factory } from "./typechain/factories/MulticallTokenMock__factory";
import { PullPaymentMock } from "./typechain/PullPaymentMock";
import { PullPaymentMock__factory } from "./typechain/factories/PullPaymentMock__factory";
import { OwnableMock } from "./typechain/OwnableMock";
import { OwnableMock__factory } from "./typechain/factories/OwnableMock__factory";
import { SampleMother } from "./typechain/SampleMother";
import { SampleMother__factory } from "./typechain/factories/SampleMother__factory";
import { PausableMock } from "./typechain/PausableMock";
import { PausableMock__factory } from "./typechain/factories/PausableMock__factory";
import { ReentrancyMock } from "./typechain/ReentrancyMock";
import { ReentrancyMock__factory } from "./typechain/factories/ReentrancyMock__factory";
import { ReentrancyAttack } from "./typechain/ReentrancyAttack";
import { ReentrancyAttack__factory } from "./typechain/factories/ReentrancyAttack__factory";
import { Implementation1 } from "./typechain/Implementation1";
import { Implementation1__factory } from "./typechain/factories/Implementation1__factory";
import { Implementation3 } from "./typechain/Implementation3";
import { Implementation3__factory } from "./typechain/factories/Implementation3__factory";
import { Implementation2 } from "./typechain/Implementation2";
import { Implementation2__factory } from "./typechain/factories/Implementation2__factory";
import { Implementation4 } from "./typechain/Implementation4";
import { Implementation4__factory } from "./typechain/factories/Implementation4__factory";
import { SafeCastMock } from "./typechain/SafeCastMock";
import { SafeCastMock__factory } from "./typechain/factories/SafeCastMock__factory";
import { SignatureCheckerMock } from "./typechain/SignatureCheckerMock";
import { SignatureCheckerMock__factory } from "./typechain/factories/SignatureCheckerMock__factory";
import { ERC20NoReturnMock } from "./typechain/ERC20NoReturnMock";
import { ERC20NoReturnMock__factory } from "./typechain/factories/ERC20NoReturnMock__factory";
import { ERC20ReturnTrueMock } from "./typechain/ERC20ReturnTrueMock";
import { ERC20ReturnTrueMock__factory } from "./typechain/factories/ERC20ReturnTrueMock__factory";
import { SafeERC20Wrapper } from "./typechain/SafeERC20Wrapper";
import { SafeERC20Wrapper__factory } from "./typechain/factories/SafeERC20Wrapper__factory";
import { ERC20ReturnFalseMock } from "./typechain/ERC20ReturnFalseMock";
import { ERC20ReturnFalseMock__factory } from "./typechain/factories/ERC20ReturnFalseMock__factory";
import { SignedSafeMathMock } from "./typechain/SignedSafeMathMock";
import { SignedSafeMathMock__factory } from "./typechain/factories/SignedSafeMathMock__factory";
import { MigratableMockV1 } from "./typechain/MigratableMockV1";
import { MigratableMockV1__factory } from "./typechain/factories/MigratableMockV1__factory";
import { MigratableMockV2 } from "./typechain/MigratableMockV2";
import { MigratableMockV2__factory } from "./typechain/factories/MigratableMockV2__factory";
import { MigratableMockV3 } from "./typechain/MigratableMockV3";
import { MigratableMockV3__factory } from "./typechain/factories/MigratableMockV3__factory";
import { SafeMathMock } from "./typechain/SafeMathMock";
import { SafeMathMock__factory } from "./typechain/factories/SafeMathMock__factory";
import { StorageSlotMock } from "./typechain/StorageSlotMock";
import { StorageSlotMock__factory } from "./typechain/factories/StorageSlotMock__factory";
import { StringsMock } from "./typechain/StringsMock";
import { StringsMock__factory } from "./typechain/factories/StringsMock__factory";
import { MathLog } from "./typechain/MathLog";
import { MathLog__factory } from "./typechain/factories/MathLog__factory";
import { ERC165InterfacesSupported } from "./typechain/ERC165InterfacesSupported";
import { ERC165InterfacesSupported__factory } from "./typechain/factories/ERC165InterfacesSupported__factory";
import { SupportsInterfaceWithLookupMock } from "./typechain/SupportsInterfaceWithLookupMock";
import { SupportsInterfaceWithLookupMock__factory } from "./typechain/factories/SupportsInterfaceWithLookupMock__factory";
import { ERC165MissingData } from "./typechain/ERC165MissingData";
import { ERC165MissingData__factory } from "./typechain/factories/ERC165MissingData__factory";
import { ERC1967Proxy } from "./typechain/ERC1967Proxy";
import { ERC1967Proxy__factory } from "./typechain/factories/ERC1967Proxy__factory";
import { UUPSUpgradeableBrokenMock } from "./typechain/UUPSUpgradeableBrokenMock";
import { UUPSUpgradeableBrokenMock__factory } from "./typechain/factories/UUPSUpgradeableBrokenMock__factory";
import { UUPSUpgradeableUnsafeMock } from "./typechain/UUPSUpgradeableUnsafeMock";
import { UUPSUpgradeableUnsafeMock__factory } from "./typechain/factories/UUPSUpgradeableUnsafeMock__factory";
import { BeaconProxy } from "./typechain/BeaconProxy";
import { BeaconProxy__factory } from "./typechain/factories/BeaconProxy__factory";
import { UpgradeableBeacon } from "./typechain/UpgradeableBeacon";
import { UpgradeableBeacon__factory } from "./typechain/factories/UpgradeableBeacon__factory";
import { ProxyAdmin } from "./typechain/ProxyAdmin";
import { ProxyAdmin__factory } from "./typechain/factories/ProxyAdmin__factory";
import { UUPSUpgradeableMock } from "./typechain/UUPSUpgradeableMock";
import { UUPSUpgradeableMock__factory } from "./typechain/factories/UUPSUpgradeableMock__factory";
import { TransparentUpgradeableProxy } from "./typechain/TransparentUpgradeableProxy";
import { TransparentUpgradeableProxy__factory } from "./typechain/factories/TransparentUpgradeableProxy__factory";
import { ERC1155 } from "./typechain/ERC1155";
import { ERC1155__factory } from "./typechain/factories/ERC1155__factory";
import { ERC20 } from "./typechain/ERC20";
import { ERC20__factory } from "./typechain/factories/ERC20__factory";
import { ERC721 } from "./typechain/ERC721";
import { ERC721__factory } from "./typechain/factories/ERC721__factory";
import { ERC777 } from "./typechain/ERC777";
import { ERC777__factory } from "./typechain/factories/ERC777__factory";
import { Escrow } from "./typechain/Escrow";
import { Escrow__factory } from "./typechain/factories/Escrow__factory";
import { RefundEscrow } from "./typechain/RefundEscrow";
import { RefundEscrow__factory } from "./typechain/factories/RefundEscrow__factory";
import { ERC1820Implementer } from "./typechain/ERC1820Implementer";
import { ERC1820Implementer__factory } from "./typechain/factories/ERC1820Implementer__factory";
import { ERC1155Holder } from "./typechain/ERC1155Holder";
import { ERC1155Holder__factory } from "./typechain/factories/ERC1155Holder__factory";
import { ERC1155PresetMinterPauser } from "./typechain/ERC1155PresetMinterPauser";
import { ERC1155PresetMinterPauser__factory } from "./typechain/factories/ERC1155PresetMinterPauser__factory";
import { ERC20PresetFixedSupply } from "./typechain/ERC20PresetFixedSupply";
import { ERC20PresetFixedSupply__factory } from "./typechain/factories/ERC20PresetFixedSupply__factory";
import { TokenTimelock } from "./typechain/TokenTimelock";
import { TokenTimelock__factory } from "./typechain/factories/TokenTimelock__factory";
import { ERC20PresetMinterPauser } from "./typechain/ERC20PresetMinterPauser";
import { ERC20PresetMinterPauser__factory } from "./typechain/factories/ERC20PresetMinterPauser__factory";
import { ERC721Holder } from "./typechain/ERC721Holder";
import { ERC721Holder__factory } from "./typechain/factories/ERC721Holder__factory";
import { ERC721PresetMinterPauserAutoId } from "./typechain/ERC721PresetMinterPauserAutoId";
import { ERC721PresetMinterPauserAutoId__factory } from "./typechain/factories/ERC721PresetMinterPauserAutoId__factory";
import { ERC777PresetFixedSupply } from "./typechain/ERC777PresetFixedSupply";
import { ERC777PresetFixedSupply__factory } from "./typechain/factories/ERC777PresetFixedSupply__factory";

const emptyContract = {
    instance: undefined,
    factory: undefined
};
const defaultProvider: providers.Provider | undefined = undefined;
export const ProviderContext = React.createContext<[providers.Provider | undefined, React.Dispatch<React.SetStateAction<providers.Provider | undefined>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
const defaultSymfoniContext: SymfoniContextInterface = {
    currentHardhatProvider: "",
    init: () => { throw Error("Symfoni context not initialized") },
    loading: false,
    messages: [],
    providers: []
};
export const SymfoniContext = React.createContext<SymfoniContextInterface>(defaultSymfoniContext);
export const DancerProxyContext = React.createContext<SymfoniDancerProxy>(emptyContract);
export const ERC721MintableContext = React.createContext<SymfoniERC721Mintable>(emptyContract);
export const GameContext = React.createContext<SymfoniGame>(emptyContract);
export const TestDAIContext = React.createContext<SymfoniTestDAI>(emptyContract);
export const TimelockControllerContext = React.createContext<SymfoniTimelockController>(emptyContract);
export const PaymentSplitterContext = React.createContext<SymfoniPaymentSplitter>(emptyContract);
export const MinimalForwarderContext = React.createContext<SymfoniMinimalForwarder>(emptyContract);
export const AccessControlMockContext = React.createContext<SymfoniAccessControlMock>(emptyContract);
export const ArraysImplContext = React.createContext<SymfoniArraysImpl>(emptyContract);
export const AccessControlEnumerableMockContext = React.createContext<SymfoniAccessControlEnumerableMock>(emptyContract);
export const AddressImplContext = React.createContext<SymfoniAddressImpl>(emptyContract);
export const BadBeaconNotContractContext = React.createContext<SymfoniBadBeaconNotContract>(emptyContract);
export const ClonesMockContext = React.createContext<SymfoniClonesMock>(emptyContract);
export const ConditionalEscrowMockContext = React.createContext<SymfoniConditionalEscrowMock>(emptyContract);
export const CallReceiverMockContext = React.createContext<SymfoniCallReceiverMock>(emptyContract);
export const ClashingImplementationContext = React.createContext<SymfoniClashingImplementation>(emptyContract);
export const ContextMockContext = React.createContext<SymfoniContextMock>(emptyContract);
export const CountersImplContext = React.createContext<SymfoniCountersImpl>(emptyContract);
export const ContextMockCallerContext = React.createContext<SymfoniContextMockCaller>(emptyContract);
export const DummyImplementationV2Context = React.createContext<SymfoniDummyImplementationV2>(emptyContract);
export const Create2ImplContext = React.createContext<SymfoniCreate2Impl>(emptyContract);
export const ERC1155BurnableMockContext = React.createContext<SymfoniERC1155BurnableMock>(emptyContract);
export const DummyImplementationContext = React.createContext<SymfoniDummyImplementation>(emptyContract);
export const EIP712ExternalContext = React.createContext<SymfoniEIP712External>(emptyContract);
export const ECDSAMockContext = React.createContext<SymfoniECDSAMock>(emptyContract);
export const ERC1155MockContext = React.createContext<SymfoniERC1155Mock>(emptyContract);
export const ERC1155PausableMockContext = React.createContext<SymfoniERC1155PausableMock>(emptyContract);
export const ERC1155ReceiverMockContext = React.createContext<SymfoniERC1155ReceiverMock>(emptyContract);
export const ERC1271WalletMockContext = React.createContext<SymfoniERC1271WalletMock>(emptyContract);
export const ERC165CheckerMockContext = React.createContext<SymfoniERC165CheckerMock>(emptyContract);
export const ERC1155SupplyMockContext = React.createContext<SymfoniERC1155SupplyMock>(emptyContract);
export const ERC165MockContext = React.createContext<SymfoniERC165Mock>(emptyContract);
export const ERC165StorageMockContext = React.createContext<SymfoniERC165StorageMock>(emptyContract);
export const ERC20CappedMockContext = React.createContext<SymfoniERC20CappedMock>(emptyContract);
export const ERC1820ImplementerMockContext = React.createContext<SymfoniERC1820ImplementerMock>(emptyContract);
export const ERC20BurnableMockContext = React.createContext<SymfoniERC20BurnableMock>(emptyContract);
export const ERC20DecimalsMockContext = React.createContext<SymfoniERC20DecimalsMock>(emptyContract);
export const ERC20FlashMintMockContext = React.createContext<SymfoniERC20FlashMintMock>(emptyContract);
export const ERC20MockContext = React.createContext<SymfoniERC20Mock>(emptyContract);
export const ERC20SnapshotMockContext = React.createContext<SymfoniERC20SnapshotMock>(emptyContract);
export const ERC20PausableMockContext = React.createContext<SymfoniERC20PausableMock>(emptyContract);
export const ERC20PermitMockContext = React.createContext<SymfoniERC20PermitMock>(emptyContract);
export const ERC2771ContextMockContext = React.createContext<SymfoniERC2771ContextMock>(emptyContract);
export const ERC20VotesMockContext = React.createContext<SymfoniERC20VotesMock>(emptyContract);
export const ERC3156FlashBorrowerMockContext = React.createContext<SymfoniERC3156FlashBorrowerMock>(emptyContract);
export const ERC721EnumerableMockContext = React.createContext<SymfoniERC721EnumerableMock>(emptyContract);
export const ERC721PausableMockContext = React.createContext<SymfoniERC721PausableMock>(emptyContract);
export const ERC721BurnableMockContext = React.createContext<SymfoniERC721BurnableMock>(emptyContract);
export const ERC721MockContext = React.createContext<SymfoniERC721Mock>(emptyContract);
export const ERC721ReceiverMockContext = React.createContext<SymfoniERC721ReceiverMock>(emptyContract);
export const ERC777SenderRecipientMockContext = React.createContext<SymfoniERC777SenderRecipientMock>(emptyContract);
export const EnumerableAddressSetMockContext = React.createContext<SymfoniEnumerableAddressSetMock>(emptyContract);
export const EnumerableBytes32SetMockContext = React.createContext<SymfoniEnumerableBytes32SetMock>(emptyContract);
export const ERC721URIStorageMockContext = React.createContext<SymfoniERC721URIStorageMock>(emptyContract);
export const ERC777MockContext = React.createContext<SymfoniERC777Mock>(emptyContract);
export const EnumerableMapMockContext = React.createContext<SymfoniEnumerableMapMock>(emptyContract);
export const InitializableMockContext = React.createContext<SymfoniInitializableMock>(emptyContract);
export const EtherReceiverMockContext = React.createContext<SymfoniEtherReceiverMock>(emptyContract);
export const EnumerableUintSetMockContext = React.createContext<SymfoniEnumerableUintSetMock>(emptyContract);
export const MathMockContext = React.createContext<SymfoniMathMock>(emptyContract);
export const MerkleProofWrapperContext = React.createContext<SymfoniMerkleProofWrapper>(emptyContract);
export const MulticallTestContext = React.createContext<SymfoniMulticallTest>(emptyContract);
export const SampleFatherContext = React.createContext<SymfoniSampleFather>(emptyContract);
export const SampleGrampsContext = React.createContext<SymfoniSampleGramps>(emptyContract);
export const SampleChildContext = React.createContext<SymfoniSampleChild>(emptyContract);
export const SampleHumanContext = React.createContext<SymfoniSampleHuman>(emptyContract);
export const MulticallTokenMockContext = React.createContext<SymfoniMulticallTokenMock>(emptyContract);
export const PullPaymentMockContext = React.createContext<SymfoniPullPaymentMock>(emptyContract);
export const OwnableMockContext = React.createContext<SymfoniOwnableMock>(emptyContract);
export const SampleMotherContext = React.createContext<SymfoniSampleMother>(emptyContract);
export const PausableMockContext = React.createContext<SymfoniPausableMock>(emptyContract);
export const ReentrancyMockContext = React.createContext<SymfoniReentrancyMock>(emptyContract);
export const ReentrancyAttackContext = React.createContext<SymfoniReentrancyAttack>(emptyContract);
export const Implementation1Context = React.createContext<SymfoniImplementation1>(emptyContract);
export const Implementation3Context = React.createContext<SymfoniImplementation3>(emptyContract);
export const Implementation2Context = React.createContext<SymfoniImplementation2>(emptyContract);
export const Implementation4Context = React.createContext<SymfoniImplementation4>(emptyContract);
export const SafeCastMockContext = React.createContext<SymfoniSafeCastMock>(emptyContract);
export const SignatureCheckerMockContext = React.createContext<SymfoniSignatureCheckerMock>(emptyContract);
export const ERC20NoReturnMockContext = React.createContext<SymfoniERC20NoReturnMock>(emptyContract);
export const ERC20ReturnTrueMockContext = React.createContext<SymfoniERC20ReturnTrueMock>(emptyContract);
export const SafeERC20WrapperContext = React.createContext<SymfoniSafeERC20Wrapper>(emptyContract);
export const ERC20ReturnFalseMockContext = React.createContext<SymfoniERC20ReturnFalseMock>(emptyContract);
export const SignedSafeMathMockContext = React.createContext<SymfoniSignedSafeMathMock>(emptyContract);
export const MigratableMockV1Context = React.createContext<SymfoniMigratableMockV1>(emptyContract);
export const MigratableMockV2Context = React.createContext<SymfoniMigratableMockV2>(emptyContract);
export const MigratableMockV3Context = React.createContext<SymfoniMigratableMockV3>(emptyContract);
export const SafeMathMockContext = React.createContext<SymfoniSafeMathMock>(emptyContract);
export const StorageSlotMockContext = React.createContext<SymfoniStorageSlotMock>(emptyContract);
export const StringsMockContext = React.createContext<SymfoniStringsMock>(emptyContract);
export const MathLogContext = React.createContext<SymfoniMathLog>(emptyContract);
export const ERC165InterfacesSupportedContext = React.createContext<SymfoniERC165InterfacesSupported>(emptyContract);
export const SupportsInterfaceWithLookupMockContext = React.createContext<SymfoniSupportsInterfaceWithLookupMock>(emptyContract);
export const ERC165MissingDataContext = React.createContext<SymfoniERC165MissingData>(emptyContract);
export const ERC1967ProxyContext = React.createContext<SymfoniERC1967Proxy>(emptyContract);
export const UUPSUpgradeableBrokenMockContext = React.createContext<SymfoniUUPSUpgradeableBrokenMock>(emptyContract);
export const UUPSUpgradeableUnsafeMockContext = React.createContext<SymfoniUUPSUpgradeableUnsafeMock>(emptyContract);
export const BeaconProxyContext = React.createContext<SymfoniBeaconProxy>(emptyContract);
export const UpgradeableBeaconContext = React.createContext<SymfoniUpgradeableBeacon>(emptyContract);
export const ProxyAdminContext = React.createContext<SymfoniProxyAdmin>(emptyContract);
export const UUPSUpgradeableMockContext = React.createContext<SymfoniUUPSUpgradeableMock>(emptyContract);
export const TransparentUpgradeableProxyContext = React.createContext<SymfoniTransparentUpgradeableProxy>(emptyContract);
export const ERC1155Context = React.createContext<SymfoniERC1155>(emptyContract);
export const ERC20Context = React.createContext<SymfoniERC20>(emptyContract);
export const ERC721Context = React.createContext<SymfoniERC721>(emptyContract);
export const ERC777Context = React.createContext<SymfoniERC777>(emptyContract);
export const EscrowContext = React.createContext<SymfoniEscrow>(emptyContract);
export const RefundEscrowContext = React.createContext<SymfoniRefundEscrow>(emptyContract);
export const ERC1820ImplementerContext = React.createContext<SymfoniERC1820Implementer>(emptyContract);
export const ERC1155HolderContext = React.createContext<SymfoniERC1155Holder>(emptyContract);
export const ERC1155PresetMinterPauserContext = React.createContext<SymfoniERC1155PresetMinterPauser>(emptyContract);
export const ERC20PresetFixedSupplyContext = React.createContext<SymfoniERC20PresetFixedSupply>(emptyContract);
export const TokenTimelockContext = React.createContext<SymfoniTokenTimelock>(emptyContract);
export const ERC20PresetMinterPauserContext = React.createContext<SymfoniERC20PresetMinterPauser>(emptyContract);
export const ERC721HolderContext = React.createContext<SymfoniERC721Holder>(emptyContract);
export const ERC721PresetMinterPauserAutoIdContext = React.createContext<SymfoniERC721PresetMinterPauserAutoId>(emptyContract);
export const ERC777PresetFixedSupplyContext = React.createContext<SymfoniERC777PresetFixedSupply>(emptyContract);

export interface SymfoniContextInterface {
    init: (provider?: string) => void;
    loading: boolean;
    messages: string[];
    currentHardhatProvider: string;
    providers: string[];
}

export interface SymfoniProps {
    autoInit?: boolean;
    showLoading?: boolean;
    loadingComponent?: React.ReactNode;
}

export interface SymfoniDancerProxy {
    instance?: DancerProxy;
    factory?: DancerProxy__factory;
}

export interface SymfoniERC721Mintable {
    instance?: ERC721Mintable;
    factory?: ERC721Mintable__factory;
}

export interface SymfoniGame {
    instance?: Game;
    factory?: Game__factory;
}

export interface SymfoniTestDAI {
    instance?: TestDAI;
    factory?: TestDAI__factory;
}

export interface SymfoniTimelockController {
    instance?: TimelockController;
    factory?: TimelockController__factory;
}

export interface SymfoniPaymentSplitter {
    instance?: PaymentSplitter;
    factory?: PaymentSplitter__factory;
}

export interface SymfoniMinimalForwarder {
    instance?: MinimalForwarder;
    factory?: MinimalForwarder__factory;
}

export interface SymfoniAccessControlMock {
    instance?: AccessControlMock;
    factory?: AccessControlMock__factory;
}

export interface SymfoniArraysImpl {
    instance?: ArraysImpl;
    factory?: ArraysImpl__factory;
}

export interface SymfoniAccessControlEnumerableMock {
    instance?: AccessControlEnumerableMock;
    factory?: AccessControlEnumerableMock__factory;
}

export interface SymfoniAddressImpl {
    instance?: AddressImpl;
    factory?: AddressImpl__factory;
}

export interface SymfoniBadBeaconNotContract {
    instance?: BadBeaconNotContract;
    factory?: BadBeaconNotContract__factory;
}

export interface SymfoniClonesMock {
    instance?: ClonesMock;
    factory?: ClonesMock__factory;
}

export interface SymfoniConditionalEscrowMock {
    instance?: ConditionalEscrowMock;
    factory?: ConditionalEscrowMock__factory;
}

export interface SymfoniCallReceiverMock {
    instance?: CallReceiverMock;
    factory?: CallReceiverMock__factory;
}

export interface SymfoniClashingImplementation {
    instance?: ClashingImplementation;
    factory?: ClashingImplementation__factory;
}

export interface SymfoniContextMock {
    instance?: ContextMock;
    factory?: ContextMock__factory;
}

export interface SymfoniCountersImpl {
    instance?: CountersImpl;
    factory?: CountersImpl__factory;
}

export interface SymfoniContextMockCaller {
    instance?: ContextMockCaller;
    factory?: ContextMockCaller__factory;
}

export interface SymfoniDummyImplementationV2 {
    instance?: DummyImplementationV2;
    factory?: DummyImplementationV2__factory;
}

export interface SymfoniCreate2Impl {
    instance?: Create2Impl;
    factory?: Create2Impl__factory;
}

export interface SymfoniERC1155BurnableMock {
    instance?: ERC1155BurnableMock;
    factory?: ERC1155BurnableMock__factory;
}

export interface SymfoniDummyImplementation {
    instance?: DummyImplementation;
    factory?: DummyImplementation__factory;
}

export interface SymfoniEIP712External {
    instance?: EIP712External;
    factory?: EIP712External__factory;
}

export interface SymfoniECDSAMock {
    instance?: ECDSAMock;
    factory?: ECDSAMock__factory;
}

export interface SymfoniERC1155Mock {
    instance?: ERC1155Mock;
    factory?: ERC1155Mock__factory;
}

export interface SymfoniERC1155PausableMock {
    instance?: ERC1155PausableMock;
    factory?: ERC1155PausableMock__factory;
}

export interface SymfoniERC1155ReceiverMock {
    instance?: ERC1155ReceiverMock;
    factory?: ERC1155ReceiverMock__factory;
}

export interface SymfoniERC1271WalletMock {
    instance?: ERC1271WalletMock;
    factory?: ERC1271WalletMock__factory;
}

export interface SymfoniERC165CheckerMock {
    instance?: ERC165CheckerMock;
    factory?: ERC165CheckerMock__factory;
}

export interface SymfoniERC1155SupplyMock {
    instance?: ERC1155SupplyMock;
    factory?: ERC1155SupplyMock__factory;
}

export interface SymfoniERC165Mock {
    instance?: ERC165Mock;
    factory?: ERC165Mock__factory;
}

export interface SymfoniERC165StorageMock {
    instance?: ERC165StorageMock;
    factory?: ERC165StorageMock__factory;
}

export interface SymfoniERC20CappedMock {
    instance?: ERC20CappedMock;
    factory?: ERC20CappedMock__factory;
}

export interface SymfoniERC1820ImplementerMock {
    instance?: ERC1820ImplementerMock;
    factory?: ERC1820ImplementerMock__factory;
}

export interface SymfoniERC20BurnableMock {
    instance?: ERC20BurnableMock;
    factory?: ERC20BurnableMock__factory;
}

export interface SymfoniERC20DecimalsMock {
    instance?: ERC20DecimalsMock;
    factory?: ERC20DecimalsMock__factory;
}

export interface SymfoniERC20FlashMintMock {
    instance?: ERC20FlashMintMock;
    factory?: ERC20FlashMintMock__factory;
}

export interface SymfoniERC20Mock {
    instance?: ERC20Mock;
    factory?: ERC20Mock__factory;
}

export interface SymfoniERC20SnapshotMock {
    instance?: ERC20SnapshotMock;
    factory?: ERC20SnapshotMock__factory;
}

export interface SymfoniERC20PausableMock {
    instance?: ERC20PausableMock;
    factory?: ERC20PausableMock__factory;
}

export interface SymfoniERC20PermitMock {
    instance?: ERC20PermitMock;
    factory?: ERC20PermitMock__factory;
}

export interface SymfoniERC2771ContextMock {
    instance?: ERC2771ContextMock;
    factory?: ERC2771ContextMock__factory;
}

export interface SymfoniERC20VotesMock {
    instance?: ERC20VotesMock;
    factory?: ERC20VotesMock__factory;
}

export interface SymfoniERC3156FlashBorrowerMock {
    instance?: ERC3156FlashBorrowerMock;
    factory?: ERC3156FlashBorrowerMock__factory;
}

export interface SymfoniERC721EnumerableMock {
    instance?: ERC721EnumerableMock;
    factory?: ERC721EnumerableMock__factory;
}

export interface SymfoniERC721PausableMock {
    instance?: ERC721PausableMock;
    factory?: ERC721PausableMock__factory;
}

export interface SymfoniERC721BurnableMock {
    instance?: ERC721BurnableMock;
    factory?: ERC721BurnableMock__factory;
}

export interface SymfoniERC721Mock {
    instance?: ERC721Mock;
    factory?: ERC721Mock__factory;
}

export interface SymfoniERC721ReceiverMock {
    instance?: ERC721ReceiverMock;
    factory?: ERC721ReceiverMock__factory;
}

export interface SymfoniERC777SenderRecipientMock {
    instance?: ERC777SenderRecipientMock;
    factory?: ERC777SenderRecipientMock__factory;
}

export interface SymfoniEnumerableAddressSetMock {
    instance?: EnumerableAddressSetMock;
    factory?: EnumerableAddressSetMock__factory;
}

export interface SymfoniEnumerableBytes32SetMock {
    instance?: EnumerableBytes32SetMock;
    factory?: EnumerableBytes32SetMock__factory;
}

export interface SymfoniERC721URIStorageMock {
    instance?: ERC721URIStorageMock;
    factory?: ERC721URIStorageMock__factory;
}

export interface SymfoniERC777Mock {
    instance?: ERC777Mock;
    factory?: ERC777Mock__factory;
}

export interface SymfoniEnumerableMapMock {
    instance?: EnumerableMapMock;
    factory?: EnumerableMapMock__factory;
}

export interface SymfoniInitializableMock {
    instance?: InitializableMock;
    factory?: InitializableMock__factory;
}

export interface SymfoniEtherReceiverMock {
    instance?: EtherReceiverMock;
    factory?: EtherReceiverMock__factory;
}

export interface SymfoniEnumerableUintSetMock {
    instance?: EnumerableUintSetMock;
    factory?: EnumerableUintSetMock__factory;
}

export interface SymfoniMathMock {
    instance?: MathMock;
    factory?: MathMock__factory;
}

export interface SymfoniMerkleProofWrapper {
    instance?: MerkleProofWrapper;
    factory?: MerkleProofWrapper__factory;
}

export interface SymfoniMulticallTest {
    instance?: MulticallTest;
    factory?: MulticallTest__factory;
}

export interface SymfoniSampleFather {
    instance?: SampleFather;
    factory?: SampleFather__factory;
}

export interface SymfoniSampleGramps {
    instance?: SampleGramps;
    factory?: SampleGramps__factory;
}

export interface SymfoniSampleChild {
    instance?: SampleChild;
    factory?: SampleChild__factory;
}

export interface SymfoniSampleHuman {
    instance?: SampleHuman;
    factory?: SampleHuman__factory;
}

export interface SymfoniMulticallTokenMock {
    instance?: MulticallTokenMock;
    factory?: MulticallTokenMock__factory;
}

export interface SymfoniPullPaymentMock {
    instance?: PullPaymentMock;
    factory?: PullPaymentMock__factory;
}

export interface SymfoniOwnableMock {
    instance?: OwnableMock;
    factory?: OwnableMock__factory;
}

export interface SymfoniSampleMother {
    instance?: SampleMother;
    factory?: SampleMother__factory;
}

export interface SymfoniPausableMock {
    instance?: PausableMock;
    factory?: PausableMock__factory;
}

export interface SymfoniReentrancyMock {
    instance?: ReentrancyMock;
    factory?: ReentrancyMock__factory;
}

export interface SymfoniReentrancyAttack {
    instance?: ReentrancyAttack;
    factory?: ReentrancyAttack__factory;
}

export interface SymfoniImplementation1 {
    instance?: Implementation1;
    factory?: Implementation1__factory;
}

export interface SymfoniImplementation3 {
    instance?: Implementation3;
    factory?: Implementation3__factory;
}

export interface SymfoniImplementation2 {
    instance?: Implementation2;
    factory?: Implementation2__factory;
}

export interface SymfoniImplementation4 {
    instance?: Implementation4;
    factory?: Implementation4__factory;
}

export interface SymfoniSafeCastMock {
    instance?: SafeCastMock;
    factory?: SafeCastMock__factory;
}

export interface SymfoniSignatureCheckerMock {
    instance?: SignatureCheckerMock;
    factory?: SignatureCheckerMock__factory;
}

export interface SymfoniERC20NoReturnMock {
    instance?: ERC20NoReturnMock;
    factory?: ERC20NoReturnMock__factory;
}

export interface SymfoniERC20ReturnTrueMock {
    instance?: ERC20ReturnTrueMock;
    factory?: ERC20ReturnTrueMock__factory;
}

export interface SymfoniSafeERC20Wrapper {
    instance?: SafeERC20Wrapper;
    factory?: SafeERC20Wrapper__factory;
}

export interface SymfoniERC20ReturnFalseMock {
    instance?: ERC20ReturnFalseMock;
    factory?: ERC20ReturnFalseMock__factory;
}

export interface SymfoniSignedSafeMathMock {
    instance?: SignedSafeMathMock;
    factory?: SignedSafeMathMock__factory;
}

export interface SymfoniMigratableMockV1 {
    instance?: MigratableMockV1;
    factory?: MigratableMockV1__factory;
}

export interface SymfoniMigratableMockV2 {
    instance?: MigratableMockV2;
    factory?: MigratableMockV2__factory;
}

export interface SymfoniMigratableMockV3 {
    instance?: MigratableMockV3;
    factory?: MigratableMockV3__factory;
}

export interface SymfoniSafeMathMock {
    instance?: SafeMathMock;
    factory?: SafeMathMock__factory;
}

export interface SymfoniStorageSlotMock {
    instance?: StorageSlotMock;
    factory?: StorageSlotMock__factory;
}

export interface SymfoniStringsMock {
    instance?: StringsMock;
    factory?: StringsMock__factory;
}

export interface SymfoniMathLog {
    instance?: MathLog;
    factory?: MathLog__factory;
}

export interface SymfoniERC165InterfacesSupported {
    instance?: ERC165InterfacesSupported;
    factory?: ERC165InterfacesSupported__factory;
}

export interface SymfoniSupportsInterfaceWithLookupMock {
    instance?: SupportsInterfaceWithLookupMock;
    factory?: SupportsInterfaceWithLookupMock__factory;
}

export interface SymfoniERC165MissingData {
    instance?: ERC165MissingData;
    factory?: ERC165MissingData__factory;
}

export interface SymfoniERC1967Proxy {
    instance?: ERC1967Proxy;
    factory?: ERC1967Proxy__factory;
}

export interface SymfoniUUPSUpgradeableBrokenMock {
    instance?: UUPSUpgradeableBrokenMock;
    factory?: UUPSUpgradeableBrokenMock__factory;
}

export interface SymfoniUUPSUpgradeableUnsafeMock {
    instance?: UUPSUpgradeableUnsafeMock;
    factory?: UUPSUpgradeableUnsafeMock__factory;
}

export interface SymfoniBeaconProxy {
    instance?: BeaconProxy;
    factory?: BeaconProxy__factory;
}

export interface SymfoniUpgradeableBeacon {
    instance?: UpgradeableBeacon;
    factory?: UpgradeableBeacon__factory;
}

export interface SymfoniProxyAdmin {
    instance?: ProxyAdmin;
    factory?: ProxyAdmin__factory;
}

export interface SymfoniUUPSUpgradeableMock {
    instance?: UUPSUpgradeableMock;
    factory?: UUPSUpgradeableMock__factory;
}

export interface SymfoniTransparentUpgradeableProxy {
    instance?: TransparentUpgradeableProxy;
    factory?: TransparentUpgradeableProxy__factory;
}

export interface SymfoniERC1155 {
    instance?: ERC1155;
    factory?: ERC1155__factory;
}

export interface SymfoniERC20 {
    instance?: ERC20;
    factory?: ERC20__factory;
}

export interface SymfoniERC721 {
    instance?: ERC721;
    factory?: ERC721__factory;
}

export interface SymfoniERC777 {
    instance?: ERC777;
    factory?: ERC777__factory;
}

export interface SymfoniEscrow {
    instance?: Escrow;
    factory?: Escrow__factory;
}

export interface SymfoniRefundEscrow {
    instance?: RefundEscrow;
    factory?: RefundEscrow__factory;
}

export interface SymfoniERC1820Implementer {
    instance?: ERC1820Implementer;
    factory?: ERC1820Implementer__factory;
}

export interface SymfoniERC1155Holder {
    instance?: ERC1155Holder;
    factory?: ERC1155Holder__factory;
}

export interface SymfoniERC1155PresetMinterPauser {
    instance?: ERC1155PresetMinterPauser;
    factory?: ERC1155PresetMinterPauser__factory;
}

export interface SymfoniERC20PresetFixedSupply {
    instance?: ERC20PresetFixedSupply;
    factory?: ERC20PresetFixedSupply__factory;
}

export interface SymfoniTokenTimelock {
    instance?: TokenTimelock;
    factory?: TokenTimelock__factory;
}

export interface SymfoniERC20PresetMinterPauser {
    instance?: ERC20PresetMinterPauser;
    factory?: ERC20PresetMinterPauser__factory;
}

export interface SymfoniERC721Holder {
    instance?: ERC721Holder;
    factory?: ERC721Holder__factory;
}

export interface SymfoniERC721PresetMinterPauserAutoId {
    instance?: ERC721PresetMinterPauserAutoId;
    factory?: ERC721PresetMinterPauserAutoId__factory;
}

export interface SymfoniERC777PresetFixedSupply {
    instance?: ERC777PresetFixedSupply;
    factory?: ERC777PresetFixedSupply__factory;
}

export const Symfoni: React.FC<SymfoniProps> = ({
    showLoading = true,
    autoInit = true,
    ...props
}) => {
    const [initializeCounter, setInitializeCounter] = useState(0);
    const [currentHardhatProvider, setCurrentHardhatProvider] = useState("");
    const [loading, setLoading] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider | undefined>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const [fallbackProvider] = useState<string | undefined>(undefined);
    const [providerPriority, setProviderPriority] = useState<string[]>(["web3modal", "hardhat"]);
    const [DancerProxy, setDancerProxy] = useState<SymfoniDancerProxy>(emptyContract);
    const [ERC721Mintable, setERC721Mintable] = useState<SymfoniERC721Mintable>(emptyContract);
    const [Game, setGame] = useState<SymfoniGame>(emptyContract);
    const [TestDAI, setTestDAI] = useState<SymfoniTestDAI>(emptyContract);
    const [TimelockController, setTimelockController] = useState<SymfoniTimelockController>(emptyContract);
    const [PaymentSplitter, setPaymentSplitter] = useState<SymfoniPaymentSplitter>(emptyContract);
    const [MinimalForwarder, setMinimalForwarder] = useState<SymfoniMinimalForwarder>(emptyContract);
    const [AccessControlMock, setAccessControlMock] = useState<SymfoniAccessControlMock>(emptyContract);
    const [ArraysImpl, setArraysImpl] = useState<SymfoniArraysImpl>(emptyContract);
    const [AccessControlEnumerableMock, setAccessControlEnumerableMock] = useState<SymfoniAccessControlEnumerableMock>(emptyContract);
    const [AddressImpl, setAddressImpl] = useState<SymfoniAddressImpl>(emptyContract);
    const [BadBeaconNotContract, setBadBeaconNotContract] = useState<SymfoniBadBeaconNotContract>(emptyContract);
    const [ClonesMock, setClonesMock] = useState<SymfoniClonesMock>(emptyContract);
    const [ConditionalEscrowMock, setConditionalEscrowMock] = useState<SymfoniConditionalEscrowMock>(emptyContract);
    const [CallReceiverMock, setCallReceiverMock] = useState<SymfoniCallReceiverMock>(emptyContract);
    const [ClashingImplementation, setClashingImplementation] = useState<SymfoniClashingImplementation>(emptyContract);
    const [ContextMock, setContextMock] = useState<SymfoniContextMock>(emptyContract);
    const [CountersImpl, setCountersImpl] = useState<SymfoniCountersImpl>(emptyContract);
    const [ContextMockCaller, setContextMockCaller] = useState<SymfoniContextMockCaller>(emptyContract);
    const [DummyImplementationV2, setDummyImplementationV2] = useState<SymfoniDummyImplementationV2>(emptyContract);
    const [Create2Impl, setCreate2Impl] = useState<SymfoniCreate2Impl>(emptyContract);
    const [ERC1155BurnableMock, setERC1155BurnableMock] = useState<SymfoniERC1155BurnableMock>(emptyContract);
    const [DummyImplementation, setDummyImplementation] = useState<SymfoniDummyImplementation>(emptyContract);
    const [EIP712External, setEIP712External] = useState<SymfoniEIP712External>(emptyContract);
    const [ECDSAMock, setECDSAMock] = useState<SymfoniECDSAMock>(emptyContract);
    const [ERC1155Mock, setERC1155Mock] = useState<SymfoniERC1155Mock>(emptyContract);
    const [ERC1155PausableMock, setERC1155PausableMock] = useState<SymfoniERC1155PausableMock>(emptyContract);
    const [ERC1155ReceiverMock, setERC1155ReceiverMock] = useState<SymfoniERC1155ReceiverMock>(emptyContract);
    const [ERC1271WalletMock, setERC1271WalletMock] = useState<SymfoniERC1271WalletMock>(emptyContract);
    const [ERC165CheckerMock, setERC165CheckerMock] = useState<SymfoniERC165CheckerMock>(emptyContract);
    const [ERC1155SupplyMock, setERC1155SupplyMock] = useState<SymfoniERC1155SupplyMock>(emptyContract);
    const [ERC165Mock, setERC165Mock] = useState<SymfoniERC165Mock>(emptyContract);
    const [ERC165StorageMock, setERC165StorageMock] = useState<SymfoniERC165StorageMock>(emptyContract);
    const [ERC20CappedMock, setERC20CappedMock] = useState<SymfoniERC20CappedMock>(emptyContract);
    const [ERC1820ImplementerMock, setERC1820ImplementerMock] = useState<SymfoniERC1820ImplementerMock>(emptyContract);
    const [ERC20BurnableMock, setERC20BurnableMock] = useState<SymfoniERC20BurnableMock>(emptyContract);
    const [ERC20DecimalsMock, setERC20DecimalsMock] = useState<SymfoniERC20DecimalsMock>(emptyContract);
    const [ERC20FlashMintMock, setERC20FlashMintMock] = useState<SymfoniERC20FlashMintMock>(emptyContract);
    const [ERC20Mock, setERC20Mock] = useState<SymfoniERC20Mock>(emptyContract);
    const [ERC20SnapshotMock, setERC20SnapshotMock] = useState<SymfoniERC20SnapshotMock>(emptyContract);
    const [ERC20PausableMock, setERC20PausableMock] = useState<SymfoniERC20PausableMock>(emptyContract);
    const [ERC20PermitMock, setERC20PermitMock] = useState<SymfoniERC20PermitMock>(emptyContract);
    const [ERC2771ContextMock, setERC2771ContextMock] = useState<SymfoniERC2771ContextMock>(emptyContract);
    const [ERC20VotesMock, setERC20VotesMock] = useState<SymfoniERC20VotesMock>(emptyContract);
    const [ERC3156FlashBorrowerMock, setERC3156FlashBorrowerMock] = useState<SymfoniERC3156FlashBorrowerMock>(emptyContract);
    const [ERC721EnumerableMock, setERC721EnumerableMock] = useState<SymfoniERC721EnumerableMock>(emptyContract);
    const [ERC721PausableMock, setERC721PausableMock] = useState<SymfoniERC721PausableMock>(emptyContract);
    const [ERC721BurnableMock, setERC721BurnableMock] = useState<SymfoniERC721BurnableMock>(emptyContract);
    const [ERC721Mock, setERC721Mock] = useState<SymfoniERC721Mock>(emptyContract);
    const [ERC721ReceiverMock, setERC721ReceiverMock] = useState<SymfoniERC721ReceiverMock>(emptyContract);
    const [ERC777SenderRecipientMock, setERC777SenderRecipientMock] = useState<SymfoniERC777SenderRecipientMock>(emptyContract);
    const [EnumerableAddressSetMock, setEnumerableAddressSetMock] = useState<SymfoniEnumerableAddressSetMock>(emptyContract);
    const [EnumerableBytes32SetMock, setEnumerableBytes32SetMock] = useState<SymfoniEnumerableBytes32SetMock>(emptyContract);
    const [ERC721URIStorageMock, setERC721URIStorageMock] = useState<SymfoniERC721URIStorageMock>(emptyContract);
    const [ERC777Mock, setERC777Mock] = useState<SymfoniERC777Mock>(emptyContract);
    const [EnumerableMapMock, setEnumerableMapMock] = useState<SymfoniEnumerableMapMock>(emptyContract);
    const [InitializableMock, setInitializableMock] = useState<SymfoniInitializableMock>(emptyContract);
    const [EtherReceiverMock, setEtherReceiverMock] = useState<SymfoniEtherReceiverMock>(emptyContract);
    const [EnumerableUintSetMock, setEnumerableUintSetMock] = useState<SymfoniEnumerableUintSetMock>(emptyContract);
    const [MathMock, setMathMock] = useState<SymfoniMathMock>(emptyContract);
    const [MerkleProofWrapper, setMerkleProofWrapper] = useState<SymfoniMerkleProofWrapper>(emptyContract);
    const [MulticallTest, setMulticallTest] = useState<SymfoniMulticallTest>(emptyContract);
    const [SampleFather, setSampleFather] = useState<SymfoniSampleFather>(emptyContract);
    const [SampleGramps, setSampleGramps] = useState<SymfoniSampleGramps>(emptyContract);
    const [SampleChild, setSampleChild] = useState<SymfoniSampleChild>(emptyContract);
    const [SampleHuman, setSampleHuman] = useState<SymfoniSampleHuman>(emptyContract);
    const [MulticallTokenMock, setMulticallTokenMock] = useState<SymfoniMulticallTokenMock>(emptyContract);
    const [PullPaymentMock, setPullPaymentMock] = useState<SymfoniPullPaymentMock>(emptyContract);
    const [OwnableMock, setOwnableMock] = useState<SymfoniOwnableMock>(emptyContract);
    const [SampleMother, setSampleMother] = useState<SymfoniSampleMother>(emptyContract);
    const [PausableMock, setPausableMock] = useState<SymfoniPausableMock>(emptyContract);
    const [ReentrancyMock, setReentrancyMock] = useState<SymfoniReentrancyMock>(emptyContract);
    const [ReentrancyAttack, setReentrancyAttack] = useState<SymfoniReentrancyAttack>(emptyContract);
    const [Implementation1, setImplementation1] = useState<SymfoniImplementation1>(emptyContract);
    const [Implementation3, setImplementation3] = useState<SymfoniImplementation3>(emptyContract);
    const [Implementation2, setImplementation2] = useState<SymfoniImplementation2>(emptyContract);
    const [Implementation4, setImplementation4] = useState<SymfoniImplementation4>(emptyContract);
    const [SafeCastMock, setSafeCastMock] = useState<SymfoniSafeCastMock>(emptyContract);
    const [SignatureCheckerMock, setSignatureCheckerMock] = useState<SymfoniSignatureCheckerMock>(emptyContract);
    const [ERC20NoReturnMock, setERC20NoReturnMock] = useState<SymfoniERC20NoReturnMock>(emptyContract);
    const [ERC20ReturnTrueMock, setERC20ReturnTrueMock] = useState<SymfoniERC20ReturnTrueMock>(emptyContract);
    const [SafeERC20Wrapper, setSafeERC20Wrapper] = useState<SymfoniSafeERC20Wrapper>(emptyContract);
    const [ERC20ReturnFalseMock, setERC20ReturnFalseMock] = useState<SymfoniERC20ReturnFalseMock>(emptyContract);
    const [SignedSafeMathMock, setSignedSafeMathMock] = useState<SymfoniSignedSafeMathMock>(emptyContract);
    const [MigratableMockV1, setMigratableMockV1] = useState<SymfoniMigratableMockV1>(emptyContract);
    const [MigratableMockV2, setMigratableMockV2] = useState<SymfoniMigratableMockV2>(emptyContract);
    const [MigratableMockV3, setMigratableMockV3] = useState<SymfoniMigratableMockV3>(emptyContract);
    const [SafeMathMock, setSafeMathMock] = useState<SymfoniSafeMathMock>(emptyContract);
    const [StorageSlotMock, setStorageSlotMock] = useState<SymfoniStorageSlotMock>(emptyContract);
    const [StringsMock, setStringsMock] = useState<SymfoniStringsMock>(emptyContract);
    const [MathLog, setMathLog] = useState<SymfoniMathLog>(emptyContract);
    const [ERC165InterfacesSupported, setERC165InterfacesSupported] = useState<SymfoniERC165InterfacesSupported>(emptyContract);
    const [SupportsInterfaceWithLookupMock, setSupportsInterfaceWithLookupMock] = useState<SymfoniSupportsInterfaceWithLookupMock>(emptyContract);
    const [ERC165MissingData, setERC165MissingData] = useState<SymfoniERC165MissingData>(emptyContract);
    const [ERC1967Proxy, setERC1967Proxy] = useState<SymfoniERC1967Proxy>(emptyContract);
    const [UUPSUpgradeableBrokenMock, setUUPSUpgradeableBrokenMock] = useState<SymfoniUUPSUpgradeableBrokenMock>(emptyContract);
    const [UUPSUpgradeableUnsafeMock, setUUPSUpgradeableUnsafeMock] = useState<SymfoniUUPSUpgradeableUnsafeMock>(emptyContract);
    const [BeaconProxy, setBeaconProxy] = useState<SymfoniBeaconProxy>(emptyContract);
    const [UpgradeableBeacon, setUpgradeableBeacon] = useState<SymfoniUpgradeableBeacon>(emptyContract);
    const [ProxyAdmin, setProxyAdmin] = useState<SymfoniProxyAdmin>(emptyContract);
    const [UUPSUpgradeableMock, setUUPSUpgradeableMock] = useState<SymfoniUUPSUpgradeableMock>(emptyContract);
    const [TransparentUpgradeableProxy, setTransparentUpgradeableProxy] = useState<SymfoniTransparentUpgradeableProxy>(emptyContract);
    const [ERC1155, setERC1155] = useState<SymfoniERC1155>(emptyContract);
    const [ERC20, setERC20] = useState<SymfoniERC20>(emptyContract);
    const [ERC721, setERC721] = useState<SymfoniERC721>(emptyContract);
    const [ERC777, setERC777] = useState<SymfoniERC777>(emptyContract);
    const [Escrow, setEscrow] = useState<SymfoniEscrow>(emptyContract);
    const [RefundEscrow, setRefundEscrow] = useState<SymfoniRefundEscrow>(emptyContract);
    const [ERC1820Implementer, setERC1820Implementer] = useState<SymfoniERC1820Implementer>(emptyContract);
    const [ERC1155Holder, setERC1155Holder] = useState<SymfoniERC1155Holder>(emptyContract);
    const [ERC1155PresetMinterPauser, setERC1155PresetMinterPauser] = useState<SymfoniERC1155PresetMinterPauser>(emptyContract);
    const [ERC20PresetFixedSupply, setERC20PresetFixedSupply] = useState<SymfoniERC20PresetFixedSupply>(emptyContract);
    const [TokenTimelock, setTokenTimelock] = useState<SymfoniTokenTimelock>(emptyContract);
    const [ERC20PresetMinterPauser, setERC20PresetMinterPauser] = useState<SymfoniERC20PresetMinterPauser>(emptyContract);
    const [ERC721Holder, setERC721Holder] = useState<SymfoniERC721Holder>(emptyContract);
    const [ERC721PresetMinterPauserAutoId, setERC721PresetMinterPauserAutoId] = useState<SymfoniERC721PresetMinterPauserAutoId>(emptyContract);
    const [ERC777PresetFixedSupply, setERC777PresetFixedSupply] = useState<SymfoniERC777PresetFixedSupply>(emptyContract);
    useEffect(() => {
        if (messages.length > 0)
            console.debug(messages.pop())
    }, [messages])

    const getProvider = async (): Promise<{ provider: providers.Provider, hardhatProviderName: string } | undefined> => {
        let hardhatProviderName = "Not set";
        let _providerPriority = [...providerPriority];
        // Fallback provider
        if (fallbackProvider && autoInit && initializeCounter === 0) {
            if (localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER") === null) {
                _providerPriority = _providerPriority.sort((a, b) => {
                    return a === fallbackProvider ? -1 : b === fallbackProvider ? 1 : 0;
                })
            }
        }
        const provider = await _providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            hardhatProviderName = "web3modal";
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    case "hardhat":
                        try {
                            const provider = new ethers.providers.JsonRpcProvider({
                                url: "http://localhost:8545",
                            });
                            hardhatProviderName = "hardhat";
                            return Promise.resolve(provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        } default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce
        return provider ? { provider, hardhatProviderName } : undefined
    };
    const getSigner = async (_provider: providers.Provider, hardhatProviderName: string): Promise<Signer | undefined> => {
        switch (hardhatProviderName) {
            case "web3modal":
                const web3provider = _provider as ethers.providers.Web3Provider
                return await web3provider.getSigner()
            case "hardhat":
                return ethers.Wallet.fromMnemonic("test test test test test test test test test test test junk").connect(_provider)
            default:
                return undefined
        }
    };
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {

        };
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: false,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };

    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            const finish = (text: string) => {
                setLoading(false)
                setMessages(old => [...old, text])
            }
            const finishWithContracts = (text: string) => {
                setDancerProxy(getDancerProxy(_provider, _signer))
                setERC721Mintable(getERC721Mintable(_provider, _signer))
                setGame(getGame(_provider, _signer))
                setTestDAI(getTestDAI(_provider, _signer))
                setTimelockController(getTimelockController(_provider, _signer))
                setPaymentSplitter(getPaymentSplitter(_provider, _signer))
                setMinimalForwarder(getMinimalForwarder(_provider, _signer))
                setAccessControlMock(getAccessControlMock(_provider, _signer))
                setArraysImpl(getArraysImpl(_provider, _signer))
                setAccessControlEnumerableMock(getAccessControlEnumerableMock(_provider, _signer))
                setAddressImpl(getAddressImpl(_provider, _signer))
                setBadBeaconNotContract(getBadBeaconNotContract(_provider, _signer))
                setClonesMock(getClonesMock(_provider, _signer))
                setConditionalEscrowMock(getConditionalEscrowMock(_provider, _signer))
                setCallReceiverMock(getCallReceiverMock(_provider, _signer))
                setClashingImplementation(getClashingImplementation(_provider, _signer))
                setContextMock(getContextMock(_provider, _signer))
                setCountersImpl(getCountersImpl(_provider, _signer))
                setContextMockCaller(getContextMockCaller(_provider, _signer))
                setDummyImplementationV2(getDummyImplementationV2(_provider, _signer))
                setCreate2Impl(getCreate2Impl(_provider, _signer))
                setERC1155BurnableMock(getERC1155BurnableMock(_provider, _signer))
                setDummyImplementation(getDummyImplementation(_provider, _signer))
                setEIP712External(getEIP712External(_provider, _signer))
                setECDSAMock(getECDSAMock(_provider, _signer))
                setERC1155Mock(getERC1155Mock(_provider, _signer))
                setERC1155PausableMock(getERC1155PausableMock(_provider, _signer))
                setERC1155ReceiverMock(getERC1155ReceiverMock(_provider, _signer))
                setERC1271WalletMock(getERC1271WalletMock(_provider, _signer))
                setERC165CheckerMock(getERC165CheckerMock(_provider, _signer))
                setERC1155SupplyMock(getERC1155SupplyMock(_provider, _signer))
                setERC165Mock(getERC165Mock(_provider, _signer))
                setERC165StorageMock(getERC165StorageMock(_provider, _signer))
                setERC20CappedMock(getERC20CappedMock(_provider, _signer))
                setERC1820ImplementerMock(getERC1820ImplementerMock(_provider, _signer))
                setERC20BurnableMock(getERC20BurnableMock(_provider, _signer))
                setERC20DecimalsMock(getERC20DecimalsMock(_provider, _signer))
                setERC20FlashMintMock(getERC20FlashMintMock(_provider, _signer))
                setERC20Mock(getERC20Mock(_provider, _signer))
                setERC20SnapshotMock(getERC20SnapshotMock(_provider, _signer))
                setERC20PausableMock(getERC20PausableMock(_provider, _signer))
                setERC20PermitMock(getERC20PermitMock(_provider, _signer))
                setERC2771ContextMock(getERC2771ContextMock(_provider, _signer))
                setERC20VotesMock(getERC20VotesMock(_provider, _signer))
                setERC3156FlashBorrowerMock(getERC3156FlashBorrowerMock(_provider, _signer))
                setERC721EnumerableMock(getERC721EnumerableMock(_provider, _signer))
                setERC721PausableMock(getERC721PausableMock(_provider, _signer))
                setERC721BurnableMock(getERC721BurnableMock(_provider, _signer))
                setERC721Mock(getERC721Mock(_provider, _signer))
                setERC721ReceiverMock(getERC721ReceiverMock(_provider, _signer))
                setERC777SenderRecipientMock(getERC777SenderRecipientMock(_provider, _signer))
                setEnumerableAddressSetMock(getEnumerableAddressSetMock(_provider, _signer))
                setEnumerableBytes32SetMock(getEnumerableBytes32SetMock(_provider, _signer))
                setERC721URIStorageMock(getERC721URIStorageMock(_provider, _signer))
                setERC777Mock(getERC777Mock(_provider, _signer))
                setEnumerableMapMock(getEnumerableMapMock(_provider, _signer))
                setInitializableMock(getInitializableMock(_provider, _signer))
                setEtherReceiverMock(getEtherReceiverMock(_provider, _signer))
                setEnumerableUintSetMock(getEnumerableUintSetMock(_provider, _signer))
                setMathMock(getMathMock(_provider, _signer))
                setMerkleProofWrapper(getMerkleProofWrapper(_provider, _signer))
                setMulticallTest(getMulticallTest(_provider, _signer))
                setSampleFather(getSampleFather(_provider, _signer))
                setSampleGramps(getSampleGramps(_provider, _signer))
                setSampleChild(getSampleChild(_provider, _signer))
                setSampleHuman(getSampleHuman(_provider, _signer))
                setMulticallTokenMock(getMulticallTokenMock(_provider, _signer))
                setPullPaymentMock(getPullPaymentMock(_provider, _signer))
                setOwnableMock(getOwnableMock(_provider, _signer))
                setSampleMother(getSampleMother(_provider, _signer))
                setPausableMock(getPausableMock(_provider, _signer))
                setReentrancyMock(getReentrancyMock(_provider, _signer))
                setReentrancyAttack(getReentrancyAttack(_provider, _signer))
                setImplementation1(getImplementation1(_provider, _signer))
                setImplementation3(getImplementation3(_provider, _signer))
                setImplementation2(getImplementation2(_provider, _signer))
                setImplementation4(getImplementation4(_provider, _signer))
                setSafeCastMock(getSafeCastMock(_provider, _signer))
                setSignatureCheckerMock(getSignatureCheckerMock(_provider, _signer))
                setERC20NoReturnMock(getERC20NoReturnMock(_provider, _signer))
                setERC20ReturnTrueMock(getERC20ReturnTrueMock(_provider, _signer))
                setSafeERC20Wrapper(getSafeERC20Wrapper(_provider, _signer))
                setERC20ReturnFalseMock(getERC20ReturnFalseMock(_provider, _signer))
                setSignedSafeMathMock(getSignedSafeMathMock(_provider, _signer))
                setMigratableMockV1(getMigratableMockV1(_provider, _signer))
                setMigratableMockV2(getMigratableMockV2(_provider, _signer))
                setMigratableMockV3(getMigratableMockV3(_provider, _signer))
                setSafeMathMock(getSafeMathMock(_provider, _signer))
                setStorageSlotMock(getStorageSlotMock(_provider, _signer))
                setStringsMock(getStringsMock(_provider, _signer))
                setMathLog(getMathLog(_provider, _signer))
                setERC165InterfacesSupported(getERC165InterfacesSupported(_provider, _signer))
                setSupportsInterfaceWithLookupMock(getSupportsInterfaceWithLookupMock(_provider, _signer))
                setERC165MissingData(getERC165MissingData(_provider, _signer))
                setERC1967Proxy(getERC1967Proxy(_provider, _signer))
                setUUPSUpgradeableBrokenMock(getUUPSUpgradeableBrokenMock(_provider, _signer))
                setUUPSUpgradeableUnsafeMock(getUUPSUpgradeableUnsafeMock(_provider, _signer))
                setBeaconProxy(getBeaconProxy(_provider, _signer))
                setUpgradeableBeacon(getUpgradeableBeacon(_provider, _signer))
                setProxyAdmin(getProxyAdmin(_provider, _signer))
                setUUPSUpgradeableMock(getUUPSUpgradeableMock(_provider, _signer))
                setTransparentUpgradeableProxy(getTransparentUpgradeableProxy(_provider, _signer))
                setERC1155(getERC1155(_provider, _signer))
                setERC20(getERC20(_provider, _signer))
                setERC721(getERC721(_provider, _signer))
                setERC777(getERC777(_provider, _signer))
                setEscrow(getEscrow(_provider, _signer))
                setRefundEscrow(getRefundEscrow(_provider, _signer))
                setERC1820Implementer(getERC1820Implementer(_provider, _signer))
                setERC1155Holder(getERC1155Holder(_provider, _signer))
                setERC1155PresetMinterPauser(getERC1155PresetMinterPauser(_provider, _signer))
                setERC20PresetFixedSupply(getERC20PresetFixedSupply(_provider, _signer))
                setTokenTimelock(getTokenTimelock(_provider, _signer))
                setERC20PresetMinterPauser(getERC20PresetMinterPauser(_provider, _signer))
                setERC721Holder(getERC721Holder(_provider, _signer))
                setERC721PresetMinterPauserAutoId(getERC721PresetMinterPauserAutoId(_provider, _signer))
                setERC777PresetFixedSupply(getERC777PresetFixedSupply(_provider, _signer))
                finish(text)
            }
            if (!autoInit && initializeCounter === 0) return finish("Auto init turned off.")
            setLoading(true)
            setMessages(old => [...old, "Initiating Symfoni React"])
            const providerObject = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094

            if (!subscribed || !providerObject) return finish("No provider or signer.")
            const _provider = providerObject.provider
            setProvider(_provider)
            setMessages(old => [...old, "Useing " + providerObject.hardhatProviderName])
            setCurrentHardhatProvider(providerObject.hardhatProviderName)
            const _signer = await getSigner(_provider, providerObject.hardhatProviderName);

            if (!subscribed || !_signer) return finishWithContracts("Provider, without signer.")
            setSigner(_signer)
            setMessages(old => [...old, "Useing signer"])
            const address = await _signer.getAddress()

            if (!subscribed || !address) return finishWithContracts("Provider and signer, without address.")
            setCurrentAddress(address)

            return finishWithContracts("Completed Symfoni context initialization.")
        };
        doAsync();
        return () => { subscribed = false }
    }, [initializeCounter])

    const getDancerProxy = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? DancerProxy__factory.connect(ethers.constants.AddressZero, _signer) : DancerProxy__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniDancerProxy = {
            instance: instance,
            factory: _signer ? new DancerProxy__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721Mintable = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721Mintable__factory.connect(ethers.constants.AddressZero, _signer) : ERC721Mintable__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721Mintable = {
            instance: instance,
            factory: _signer ? new ERC721Mintable__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getGame = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = GameDeployment.receipt.contractAddress
        const instance = _signer ? Game__factory.connect(contractAddress, _signer) : Game__factory.connect(contractAddress, _provider)
        const contract: SymfoniGame = {
            instance: instance,
            factory: _signer ? new Game__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getTestDAI = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? TestDAI__factory.connect(ethers.constants.AddressZero, _signer) : TestDAI__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniTestDAI = {
            instance: instance,
            factory: _signer ? new TestDAI__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getTimelockController = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? TimelockController__factory.connect(ethers.constants.AddressZero, _signer) : TimelockController__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniTimelockController = {
            instance: instance,
            factory: _signer ? new TimelockController__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getPaymentSplitter = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? PaymentSplitter__factory.connect(ethers.constants.AddressZero, _signer) : PaymentSplitter__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniPaymentSplitter = {
            instance: instance,
            factory: _signer ? new PaymentSplitter__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMinimalForwarder = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MinimalForwarder__factory.connect(ethers.constants.AddressZero, _signer) : MinimalForwarder__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMinimalForwarder = {
            instance: instance,
            factory: _signer ? new MinimalForwarder__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAccessControlMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? AccessControlMock__factory.connect(ethers.constants.AddressZero, _signer) : AccessControlMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniAccessControlMock = {
            instance: instance,
            factory: _signer ? new AccessControlMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getArraysImpl = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ArraysImpl__factory.connect(ethers.constants.AddressZero, _signer) : ArraysImpl__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniArraysImpl = {
            instance: instance,
            factory: _signer ? new ArraysImpl__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAccessControlEnumerableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? AccessControlEnumerableMock__factory.connect(ethers.constants.AddressZero, _signer) : AccessControlEnumerableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniAccessControlEnumerableMock = {
            instance: instance,
            factory: _signer ? new AccessControlEnumerableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAddressImpl = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? AddressImpl__factory.connect(ethers.constants.AddressZero, _signer) : AddressImpl__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniAddressImpl = {
            instance: instance,
            factory: _signer ? new AddressImpl__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getBadBeaconNotContract = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? BadBeaconNotContract__factory.connect(ethers.constants.AddressZero, _signer) : BadBeaconNotContract__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniBadBeaconNotContract = {
            instance: instance,
            factory: _signer ? new BadBeaconNotContract__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getClonesMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ClonesMock__factory.connect(ethers.constants.AddressZero, _signer) : ClonesMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniClonesMock = {
            instance: instance,
            factory: _signer ? new ClonesMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getConditionalEscrowMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ConditionalEscrowMock__factory.connect(ethers.constants.AddressZero, _signer) : ConditionalEscrowMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniConditionalEscrowMock = {
            instance: instance,
            factory: _signer ? new ConditionalEscrowMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getCallReceiverMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? CallReceiverMock__factory.connect(ethers.constants.AddressZero, _signer) : CallReceiverMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniCallReceiverMock = {
            instance: instance,
            factory: _signer ? new CallReceiverMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getClashingImplementation = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ClashingImplementation__factory.connect(ethers.constants.AddressZero, _signer) : ClashingImplementation__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniClashingImplementation = {
            instance: instance,
            factory: _signer ? new ClashingImplementation__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getContextMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ContextMock__factory.connect(ethers.constants.AddressZero, _signer) : ContextMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniContextMock = {
            instance: instance,
            factory: _signer ? new ContextMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getCountersImpl = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? CountersImpl__factory.connect(ethers.constants.AddressZero, _signer) : CountersImpl__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniCountersImpl = {
            instance: instance,
            factory: _signer ? new CountersImpl__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getContextMockCaller = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ContextMockCaller__factory.connect(ethers.constants.AddressZero, _signer) : ContextMockCaller__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniContextMockCaller = {
            instance: instance,
            factory: _signer ? new ContextMockCaller__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getDummyImplementationV2 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? DummyImplementationV2__factory.connect(ethers.constants.AddressZero, _signer) : DummyImplementationV2__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniDummyImplementationV2 = {
            instance: instance,
            factory: _signer ? new DummyImplementationV2__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getCreate2Impl = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Create2Impl__factory.connect(ethers.constants.AddressZero, _signer) : Create2Impl__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniCreate2Impl = {
            instance: instance,
            factory: _signer ? new Create2Impl__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155BurnableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155BurnableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155BurnableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155BurnableMock = {
            instance: instance,
            factory: _signer ? new ERC1155BurnableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getDummyImplementation = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? DummyImplementation__factory.connect(ethers.constants.AddressZero, _signer) : DummyImplementation__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniDummyImplementation = {
            instance: instance,
            factory: _signer ? new DummyImplementation__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEIP712External = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EIP712External__factory.connect(ethers.constants.AddressZero, _signer) : EIP712External__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEIP712External = {
            instance: instance,
            factory: _signer ? new EIP712External__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getECDSAMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ECDSAMock__factory.connect(ethers.constants.AddressZero, _signer) : ECDSAMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniECDSAMock = {
            instance: instance,
            factory: _signer ? new ECDSAMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155Mock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155Mock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155Mock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155Mock = {
            instance: instance,
            factory: _signer ? new ERC1155Mock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155PausableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155PausableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155PausableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155PausableMock = {
            instance: instance,
            factory: _signer ? new ERC1155PausableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155ReceiverMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155ReceiverMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155ReceiverMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155ReceiverMock = {
            instance: instance,
            factory: _signer ? new ERC1155ReceiverMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1271WalletMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1271WalletMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1271WalletMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1271WalletMock = {
            instance: instance,
            factory: _signer ? new ERC1271WalletMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC165CheckerMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC165CheckerMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC165CheckerMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC165CheckerMock = {
            instance: instance,
            factory: _signer ? new ERC165CheckerMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155SupplyMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155SupplyMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155SupplyMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155SupplyMock = {
            instance: instance,
            factory: _signer ? new ERC1155SupplyMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC165Mock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC165Mock__factory.connect(ethers.constants.AddressZero, _signer) : ERC165Mock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC165Mock = {
            instance: instance,
            factory: _signer ? new ERC165Mock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC165StorageMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC165StorageMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC165StorageMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC165StorageMock = {
            instance: instance,
            factory: _signer ? new ERC165StorageMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20CappedMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20CappedMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20CappedMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20CappedMock = {
            instance: instance,
            factory: _signer ? new ERC20CappedMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1820ImplementerMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1820ImplementerMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC1820ImplementerMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1820ImplementerMock = {
            instance: instance,
            factory: _signer ? new ERC1820ImplementerMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20BurnableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20BurnableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20BurnableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20BurnableMock = {
            instance: instance,
            factory: _signer ? new ERC20BurnableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20DecimalsMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20DecimalsMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20DecimalsMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20DecimalsMock = {
            instance: instance,
            factory: _signer ? new ERC20DecimalsMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20FlashMintMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20FlashMintMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20FlashMintMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20FlashMintMock = {
            instance: instance,
            factory: _signer ? new ERC20FlashMintMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20Mock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20Mock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20Mock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20Mock = {
            instance: instance,
            factory: _signer ? new ERC20Mock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20SnapshotMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20SnapshotMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20SnapshotMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20SnapshotMock = {
            instance: instance,
            factory: _signer ? new ERC20SnapshotMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20PausableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20PausableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20PausableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20PausableMock = {
            instance: instance,
            factory: _signer ? new ERC20PausableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20PermitMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20PermitMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20PermitMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20PermitMock = {
            instance: instance,
            factory: _signer ? new ERC20PermitMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC2771ContextMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC2771ContextMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC2771ContextMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC2771ContextMock = {
            instance: instance,
            factory: _signer ? new ERC2771ContextMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20VotesMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20VotesMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20VotesMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20VotesMock = {
            instance: instance,
            factory: _signer ? new ERC20VotesMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC3156FlashBorrowerMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC3156FlashBorrowerMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC3156FlashBorrowerMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC3156FlashBorrowerMock = {
            instance: instance,
            factory: _signer ? new ERC3156FlashBorrowerMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721EnumerableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721EnumerableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721EnumerableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721EnumerableMock = {
            instance: instance,
            factory: _signer ? new ERC721EnumerableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721PausableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721PausableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721PausableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721PausableMock = {
            instance: instance,
            factory: _signer ? new ERC721PausableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721BurnableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721BurnableMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721BurnableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721BurnableMock = {
            instance: instance,
            factory: _signer ? new ERC721BurnableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721Mock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721Mock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721Mock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721Mock = {
            instance: instance,
            factory: _signer ? new ERC721Mock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721ReceiverMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721ReceiverMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721ReceiverMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721ReceiverMock = {
            instance: instance,
            factory: _signer ? new ERC721ReceiverMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC777SenderRecipientMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC777SenderRecipientMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC777SenderRecipientMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC777SenderRecipientMock = {
            instance: instance,
            factory: _signer ? new ERC777SenderRecipientMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEnumerableAddressSetMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EnumerableAddressSetMock__factory.connect(ethers.constants.AddressZero, _signer) : EnumerableAddressSetMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEnumerableAddressSetMock = {
            instance: instance,
            factory: _signer ? new EnumerableAddressSetMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEnumerableBytes32SetMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EnumerableBytes32SetMock__factory.connect(ethers.constants.AddressZero, _signer) : EnumerableBytes32SetMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEnumerableBytes32SetMock = {
            instance: instance,
            factory: _signer ? new EnumerableBytes32SetMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721URIStorageMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721URIStorageMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC721URIStorageMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721URIStorageMock = {
            instance: instance,
            factory: _signer ? new ERC721URIStorageMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC777Mock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC777Mock__factory.connect(ethers.constants.AddressZero, _signer) : ERC777Mock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC777Mock = {
            instance: instance,
            factory: _signer ? new ERC777Mock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEnumerableMapMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EnumerableMapMock__factory.connect(ethers.constants.AddressZero, _signer) : EnumerableMapMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEnumerableMapMock = {
            instance: instance,
            factory: _signer ? new EnumerableMapMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getInitializableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? InitializableMock__factory.connect(ethers.constants.AddressZero, _signer) : InitializableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniInitializableMock = {
            instance: instance,
            factory: _signer ? new InitializableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEtherReceiverMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EtherReceiverMock__factory.connect(ethers.constants.AddressZero, _signer) : EtherReceiverMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEtherReceiverMock = {
            instance: instance,
            factory: _signer ? new EtherReceiverMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEnumerableUintSetMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? EnumerableUintSetMock__factory.connect(ethers.constants.AddressZero, _signer) : EnumerableUintSetMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEnumerableUintSetMock = {
            instance: instance,
            factory: _signer ? new EnumerableUintSetMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMathMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MathMock__factory.connect(ethers.constants.AddressZero, _signer) : MathMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMathMock = {
            instance: instance,
            factory: _signer ? new MathMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMerkleProofWrapper = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MerkleProofWrapper__factory.connect(ethers.constants.AddressZero, _signer) : MerkleProofWrapper__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMerkleProofWrapper = {
            instance: instance,
            factory: _signer ? new MerkleProofWrapper__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMulticallTest = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MulticallTest__factory.connect(ethers.constants.AddressZero, _signer) : MulticallTest__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMulticallTest = {
            instance: instance,
            factory: _signer ? new MulticallTest__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSampleFather = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SampleFather__factory.connect(ethers.constants.AddressZero, _signer) : SampleFather__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSampleFather = {
            instance: instance,
            factory: _signer ? new SampleFather__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSampleGramps = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SampleGramps__factory.connect(ethers.constants.AddressZero, _signer) : SampleGramps__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSampleGramps = {
            instance: instance,
            factory: _signer ? new SampleGramps__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSampleChild = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SampleChild__factory.connect(ethers.constants.AddressZero, _signer) : SampleChild__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSampleChild = {
            instance: instance,
            factory: _signer ? new SampleChild__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSampleHuman = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SampleHuman__factory.connect(ethers.constants.AddressZero, _signer) : SampleHuman__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSampleHuman = {
            instance: instance,
            factory: _signer ? new SampleHuman__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMulticallTokenMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MulticallTokenMock__factory.connect(ethers.constants.AddressZero, _signer) : MulticallTokenMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMulticallTokenMock = {
            instance: instance,
            factory: _signer ? new MulticallTokenMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getPullPaymentMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? PullPaymentMock__factory.connect(ethers.constants.AddressZero, _signer) : PullPaymentMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniPullPaymentMock = {
            instance: instance,
            factory: _signer ? new PullPaymentMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getOwnableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? OwnableMock__factory.connect(ethers.constants.AddressZero, _signer) : OwnableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniOwnableMock = {
            instance: instance,
            factory: _signer ? new OwnableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSampleMother = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SampleMother__factory.connect(ethers.constants.AddressZero, _signer) : SampleMother__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSampleMother = {
            instance: instance,
            factory: _signer ? new SampleMother__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getPausableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? PausableMock__factory.connect(ethers.constants.AddressZero, _signer) : PausableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniPausableMock = {
            instance: instance,
            factory: _signer ? new PausableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getReentrancyMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ReentrancyMock__factory.connect(ethers.constants.AddressZero, _signer) : ReentrancyMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniReentrancyMock = {
            instance: instance,
            factory: _signer ? new ReentrancyMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getReentrancyAttack = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ReentrancyAttack__factory.connect(ethers.constants.AddressZero, _signer) : ReentrancyAttack__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniReentrancyAttack = {
            instance: instance,
            factory: _signer ? new ReentrancyAttack__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getImplementation1 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Implementation1__factory.connect(ethers.constants.AddressZero, _signer) : Implementation1__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniImplementation1 = {
            instance: instance,
            factory: _signer ? new Implementation1__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getImplementation3 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Implementation3__factory.connect(ethers.constants.AddressZero, _signer) : Implementation3__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniImplementation3 = {
            instance: instance,
            factory: _signer ? new Implementation3__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getImplementation2 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Implementation2__factory.connect(ethers.constants.AddressZero, _signer) : Implementation2__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniImplementation2 = {
            instance: instance,
            factory: _signer ? new Implementation2__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getImplementation4 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Implementation4__factory.connect(ethers.constants.AddressZero, _signer) : Implementation4__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniImplementation4 = {
            instance: instance,
            factory: _signer ? new Implementation4__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSafeCastMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SafeCastMock__factory.connect(ethers.constants.AddressZero, _signer) : SafeCastMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSafeCastMock = {
            instance: instance,
            factory: _signer ? new SafeCastMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSignatureCheckerMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SignatureCheckerMock__factory.connect(ethers.constants.AddressZero, _signer) : SignatureCheckerMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSignatureCheckerMock = {
            instance: instance,
            factory: _signer ? new SignatureCheckerMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20NoReturnMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20NoReturnMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20NoReturnMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20NoReturnMock = {
            instance: instance,
            factory: _signer ? new ERC20NoReturnMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20ReturnTrueMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20ReturnTrueMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20ReturnTrueMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20ReturnTrueMock = {
            instance: instance,
            factory: _signer ? new ERC20ReturnTrueMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSafeERC20Wrapper = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SafeERC20Wrapper__factory.connect(ethers.constants.AddressZero, _signer) : SafeERC20Wrapper__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSafeERC20Wrapper = {
            instance: instance,
            factory: _signer ? new SafeERC20Wrapper__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20ReturnFalseMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20ReturnFalseMock__factory.connect(ethers.constants.AddressZero, _signer) : ERC20ReturnFalseMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20ReturnFalseMock = {
            instance: instance,
            factory: _signer ? new ERC20ReturnFalseMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSignedSafeMathMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SignedSafeMathMock__factory.connect(ethers.constants.AddressZero, _signer) : SignedSafeMathMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSignedSafeMathMock = {
            instance: instance,
            factory: _signer ? new SignedSafeMathMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMigratableMockV1 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MigratableMockV1__factory.connect(ethers.constants.AddressZero, _signer) : MigratableMockV1__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMigratableMockV1 = {
            instance: instance,
            factory: _signer ? new MigratableMockV1__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMigratableMockV2 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MigratableMockV2__factory.connect(ethers.constants.AddressZero, _signer) : MigratableMockV2__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMigratableMockV2 = {
            instance: instance,
            factory: _signer ? new MigratableMockV2__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMigratableMockV3 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MigratableMockV3__factory.connect(ethers.constants.AddressZero, _signer) : MigratableMockV3__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMigratableMockV3 = {
            instance: instance,
            factory: _signer ? new MigratableMockV3__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSafeMathMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SafeMathMock__factory.connect(ethers.constants.AddressZero, _signer) : SafeMathMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSafeMathMock = {
            instance: instance,
            factory: _signer ? new SafeMathMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStorageSlotMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? StorageSlotMock__factory.connect(ethers.constants.AddressZero, _signer) : StorageSlotMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniStorageSlotMock = {
            instance: instance,
            factory: _signer ? new StorageSlotMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStringsMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? StringsMock__factory.connect(ethers.constants.AddressZero, _signer) : StringsMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniStringsMock = {
            instance: instance,
            factory: _signer ? new StringsMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getMathLog = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? MathLog__factory.connect(ethers.constants.AddressZero, _signer) : MathLog__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniMathLog = {
            instance: instance,
            factory: _signer ? new MathLog__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC165InterfacesSupported = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC165InterfacesSupported__factory.connect(ethers.constants.AddressZero, _signer) : ERC165InterfacesSupported__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC165InterfacesSupported = {
            instance: instance,
            factory: _signer ? new ERC165InterfacesSupported__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSupportsInterfaceWithLookupMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SupportsInterfaceWithLookupMock__factory.connect(ethers.constants.AddressZero, _signer) : SupportsInterfaceWithLookupMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSupportsInterfaceWithLookupMock = {
            instance: instance,
            factory: _signer ? new SupportsInterfaceWithLookupMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC165MissingData = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC165MissingData__factory.connect(ethers.constants.AddressZero, _signer) : ERC165MissingData__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC165MissingData = {
            instance: instance,
            factory: _signer ? new ERC165MissingData__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1967Proxy = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1967Proxy__factory.connect(ethers.constants.AddressZero, _signer) : ERC1967Proxy__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1967Proxy = {
            instance: instance,
            factory: _signer ? new ERC1967Proxy__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getUUPSUpgradeableBrokenMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? UUPSUpgradeableBrokenMock__factory.connect(ethers.constants.AddressZero, _signer) : UUPSUpgradeableBrokenMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniUUPSUpgradeableBrokenMock = {
            instance: instance,
            factory: _signer ? new UUPSUpgradeableBrokenMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getUUPSUpgradeableUnsafeMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? UUPSUpgradeableUnsafeMock__factory.connect(ethers.constants.AddressZero, _signer) : UUPSUpgradeableUnsafeMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniUUPSUpgradeableUnsafeMock = {
            instance: instance,
            factory: _signer ? new UUPSUpgradeableUnsafeMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getBeaconProxy = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? BeaconProxy__factory.connect(ethers.constants.AddressZero, _signer) : BeaconProxy__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniBeaconProxy = {
            instance: instance,
            factory: _signer ? new BeaconProxy__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getUpgradeableBeacon = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? UpgradeableBeacon__factory.connect(ethers.constants.AddressZero, _signer) : UpgradeableBeacon__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniUpgradeableBeacon = {
            instance: instance,
            factory: _signer ? new UpgradeableBeacon__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getProxyAdmin = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ProxyAdmin__factory.connect(ethers.constants.AddressZero, _signer) : ProxyAdmin__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniProxyAdmin = {
            instance: instance,
            factory: _signer ? new ProxyAdmin__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getUUPSUpgradeableMock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? UUPSUpgradeableMock__factory.connect(ethers.constants.AddressZero, _signer) : UUPSUpgradeableMock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniUUPSUpgradeableMock = {
            instance: instance,
            factory: _signer ? new UUPSUpgradeableMock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getTransparentUpgradeableProxy = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? TransparentUpgradeableProxy__factory.connect(ethers.constants.AddressZero, _signer) : TransparentUpgradeableProxy__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniTransparentUpgradeableProxy = {
            instance: instance,
            factory: _signer ? new TransparentUpgradeableProxy__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155 = {
            instance: instance,
            factory: _signer ? new ERC1155__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20__factory.connect(ethers.constants.AddressZero, _signer) : ERC20__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20 = {
            instance: instance,
            factory: _signer ? new ERC20__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721__factory.connect(ethers.constants.AddressZero, _signer) : ERC721__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721 = {
            instance: instance,
            factory: _signer ? new ERC721__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC777 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC777__factory.connect(ethers.constants.AddressZero, _signer) : ERC777__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC777 = {
            instance: instance,
            factory: _signer ? new ERC777__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getEscrow = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Escrow__factory.connect(ethers.constants.AddressZero, _signer) : Escrow__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniEscrow = {
            instance: instance,
            factory: _signer ? new Escrow__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getRefundEscrow = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? RefundEscrow__factory.connect(ethers.constants.AddressZero, _signer) : RefundEscrow__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniRefundEscrow = {
            instance: instance,
            factory: _signer ? new RefundEscrow__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1820Implementer = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1820Implementer__factory.connect(ethers.constants.AddressZero, _signer) : ERC1820Implementer__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1820Implementer = {
            instance: instance,
            factory: _signer ? new ERC1820Implementer__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155Holder = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155Holder__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155Holder__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155Holder = {
            instance: instance,
            factory: _signer ? new ERC1155Holder__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155PresetMinterPauser = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155PresetMinterPauser__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155PresetMinterPauser__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155PresetMinterPauser = {
            instance: instance,
            factory: _signer ? new ERC1155PresetMinterPauser__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20PresetFixedSupply = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20PresetFixedSupply__factory.connect(ethers.constants.AddressZero, _signer) : ERC20PresetFixedSupply__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20PresetFixedSupply = {
            instance: instance,
            factory: _signer ? new ERC20PresetFixedSupply__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getTokenTimelock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? TokenTimelock__factory.connect(ethers.constants.AddressZero, _signer) : TokenTimelock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniTokenTimelock = {
            instance: instance,
            factory: _signer ? new TokenTimelock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20PresetMinterPauser = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20PresetMinterPauser__factory.connect(ethers.constants.AddressZero, _signer) : ERC20PresetMinterPauser__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20PresetMinterPauser = {
            instance: instance,
            factory: _signer ? new ERC20PresetMinterPauser__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721Holder = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721Holder__factory.connect(ethers.constants.AddressZero, _signer) : ERC721Holder__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721Holder = {
            instance: instance,
            factory: _signer ? new ERC721Holder__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721PresetMinterPauserAutoId = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721PresetMinterPauserAutoId__factory.connect(ethers.constants.AddressZero, _signer) : ERC721PresetMinterPauserAutoId__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721PresetMinterPauserAutoId = {
            instance: instance,
            factory: _signer ? new ERC721PresetMinterPauserAutoId__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC777PresetFixedSupply = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC777PresetFixedSupply__factory.connect(ethers.constants.AddressZero, _signer) : ERC777PresetFixedSupply__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC777PresetFixedSupply = {
            instance: instance,
            factory: _signer ? new ERC777PresetFixedSupply__factory(_signer) : undefined,
        }
        return contract
    }
        ;

    const handleInitProvider = (provider?: string) => {
        if (provider) {
            setProviderPriority(old => old.sort((a, b) => {
                return a === provider ? -1 : b === provider ? 1 : 0;
            }))
        }
        setInitializeCounter(initializeCounter + 1)
    }
    return (
        <SymfoniContext.Provider value={{ init: (provider) => handleInitProvider(provider), providers: providerPriority, currentHardhatProvider, loading, messages }}>
            <ProviderContext.Provider value={[provider, setProvider]}>
                <SignerContext.Provider value={[signer, setSigner]}>
                    <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                        <DancerProxyContext.Provider value={DancerProxy}>
                            <ERC721MintableContext.Provider value={ERC721Mintable}>
                                <GameContext.Provider value={Game}>
                                    <TestDAIContext.Provider value={TestDAI}>
                                        <TimelockControllerContext.Provider value={TimelockController}>
                                            <PaymentSplitterContext.Provider value={PaymentSplitter}>
                                                <MinimalForwarderContext.Provider value={MinimalForwarder}>
                                                    <AccessControlMockContext.Provider value={AccessControlMock}>
                                                        <ArraysImplContext.Provider value={ArraysImpl}>
                                                            <AccessControlEnumerableMockContext.Provider value={AccessControlEnumerableMock}>
                                                                <AddressImplContext.Provider value={AddressImpl}>
                                                                    <BadBeaconNotContractContext.Provider value={BadBeaconNotContract}>
                                                                        <ClonesMockContext.Provider value={ClonesMock}>
                                                                            <ConditionalEscrowMockContext.Provider value={ConditionalEscrowMock}>
                                                                                <CallReceiverMockContext.Provider value={CallReceiverMock}>
                                                                                    <ClashingImplementationContext.Provider value={ClashingImplementation}>
                                                                                        <ContextMockContext.Provider value={ContextMock}>
                                                                                            <CountersImplContext.Provider value={CountersImpl}>
                                                                                                <ContextMockCallerContext.Provider value={ContextMockCaller}>
                                                                                                    <DummyImplementationV2Context.Provider value={DummyImplementationV2}>
                                                                                                        <Create2ImplContext.Provider value={Create2Impl}>
                                                                                                            <ERC1155BurnableMockContext.Provider value={ERC1155BurnableMock}>
                                                                                                                <DummyImplementationContext.Provider value={DummyImplementation}>
                                                                                                                    <EIP712ExternalContext.Provider value={EIP712External}>
                                                                                                                        <ECDSAMockContext.Provider value={ECDSAMock}>
                                                                                                                            <ERC1155MockContext.Provider value={ERC1155Mock}>
                                                                                                                                <ERC1155PausableMockContext.Provider value={ERC1155PausableMock}>
                                                                                                                                    <ERC1155ReceiverMockContext.Provider value={ERC1155ReceiverMock}>
                                                                                                                                        <ERC1271WalletMockContext.Provider value={ERC1271WalletMock}>
                                                                                                                                            <ERC165CheckerMockContext.Provider value={ERC165CheckerMock}>
                                                                                                                                                <ERC1155SupplyMockContext.Provider value={ERC1155SupplyMock}>
                                                                                                                                                    <ERC165MockContext.Provider value={ERC165Mock}>
                                                                                                                                                        <ERC165StorageMockContext.Provider value={ERC165StorageMock}>
                                                                                                                                                            <ERC20CappedMockContext.Provider value={ERC20CappedMock}>
                                                                                                                                                                <ERC1820ImplementerMockContext.Provider value={ERC1820ImplementerMock}>
                                                                                                                                                                    <ERC20BurnableMockContext.Provider value={ERC20BurnableMock}>
                                                                                                                                                                        <ERC20DecimalsMockContext.Provider value={ERC20DecimalsMock}>
                                                                                                                                                                            <ERC20FlashMintMockContext.Provider value={ERC20FlashMintMock}>
                                                                                                                                                                                <ERC20MockContext.Provider value={ERC20Mock}>
                                                                                                                                                                                    <ERC20SnapshotMockContext.Provider value={ERC20SnapshotMock}>
                                                                                                                                                                                        <ERC20PausableMockContext.Provider value={ERC20PausableMock}>
                                                                                                                                                                                            <ERC20PermitMockContext.Provider value={ERC20PermitMock}>
                                                                                                                                                                                                <ERC2771ContextMockContext.Provider value={ERC2771ContextMock}>
                                                                                                                                                                                                    <ERC20VotesMockContext.Provider value={ERC20VotesMock}>
                                                                                                                                                                                                        <ERC3156FlashBorrowerMockContext.Provider value={ERC3156FlashBorrowerMock}>
                                                                                                                                                                                                            <ERC721EnumerableMockContext.Provider value={ERC721EnumerableMock}>
                                                                                                                                                                                                                <ERC721PausableMockContext.Provider value={ERC721PausableMock}>
                                                                                                                                                                                                                    <ERC721BurnableMockContext.Provider value={ERC721BurnableMock}>
                                                                                                                                                                                                                        <ERC721MockContext.Provider value={ERC721Mock}>
                                                                                                                                                                                                                            <ERC721ReceiverMockContext.Provider value={ERC721ReceiverMock}>
                                                                                                                                                                                                                                <ERC777SenderRecipientMockContext.Provider value={ERC777SenderRecipientMock}>
                                                                                                                                                                                                                                    <EnumerableAddressSetMockContext.Provider value={EnumerableAddressSetMock}>
                                                                                                                                                                                                                                        <EnumerableBytes32SetMockContext.Provider value={EnumerableBytes32SetMock}>
                                                                                                                                                                                                                                            <ERC721URIStorageMockContext.Provider value={ERC721URIStorageMock}>
                                                                                                                                                                                                                                                <ERC777MockContext.Provider value={ERC777Mock}>
                                                                                                                                                                                                                                                    <EnumerableMapMockContext.Provider value={EnumerableMapMock}>
                                                                                                                                                                                                                                                        <InitializableMockContext.Provider value={InitializableMock}>
                                                                                                                                                                                                                                                            <EtherReceiverMockContext.Provider value={EtherReceiverMock}>
                                                                                                                                                                                                                                                                <EnumerableUintSetMockContext.Provider value={EnumerableUintSetMock}>
                                                                                                                                                                                                                                                                    <MathMockContext.Provider value={MathMock}>
                                                                                                                                                                                                                                                                        <MerkleProofWrapperContext.Provider value={MerkleProofWrapper}>
                                                                                                                                                                                                                                                                            <MulticallTestContext.Provider value={MulticallTest}>
                                                                                                                                                                                                                                                                                <SampleFatherContext.Provider value={SampleFather}>
                                                                                                                                                                                                                                                                                    <SampleGrampsContext.Provider value={SampleGramps}>
                                                                                                                                                                                                                                                                                        <SampleChildContext.Provider value={SampleChild}>
                                                                                                                                                                                                                                                                                            <SampleHumanContext.Provider value={SampleHuman}>
                                                                                                                                                                                                                                                                                                <MulticallTokenMockContext.Provider value={MulticallTokenMock}>
                                                                                                                                                                                                                                                                                                    <PullPaymentMockContext.Provider value={PullPaymentMock}>
                                                                                                                                                                                                                                                                                                        <OwnableMockContext.Provider value={OwnableMock}>
                                                                                                                                                                                                                                                                                                            <SampleMotherContext.Provider value={SampleMother}>
                                                                                                                                                                                                                                                                                                                <PausableMockContext.Provider value={PausableMock}>
                                                                                                                                                                                                                                                                                                                    <ReentrancyMockContext.Provider value={ReentrancyMock}>
                                                                                                                                                                                                                                                                                                                        <ReentrancyAttackContext.Provider value={ReentrancyAttack}>
                                                                                                                                                                                                                                                                                                                            <Implementation1Context.Provider value={Implementation1}>
                                                                                                                                                                                                                                                                                                                                <Implementation3Context.Provider value={Implementation3}>
                                                                                                                                                                                                                                                                                                                                    <Implementation2Context.Provider value={Implementation2}>
                                                                                                                                                                                                                                                                                                                                        <Implementation4Context.Provider value={Implementation4}>
                                                                                                                                                                                                                                                                                                                                            <SafeCastMockContext.Provider value={SafeCastMock}>
                                                                                                                                                                                                                                                                                                                                                <SignatureCheckerMockContext.Provider value={SignatureCheckerMock}>
                                                                                                                                                                                                                                                                                                                                                    <ERC20NoReturnMockContext.Provider value={ERC20NoReturnMock}>
                                                                                                                                                                                                                                                                                                                                                        <ERC20ReturnTrueMockContext.Provider value={ERC20ReturnTrueMock}>
                                                                                                                                                                                                                                                                                                                                                            <SafeERC20WrapperContext.Provider value={SafeERC20Wrapper}>
                                                                                                                                                                                                                                                                                                                                                                <ERC20ReturnFalseMockContext.Provider value={ERC20ReturnFalseMock}>
                                                                                                                                                                                                                                                                                                                                                                    <SignedSafeMathMockContext.Provider value={SignedSafeMathMock}>
                                                                                                                                                                                                                                                                                                                                                                        <MigratableMockV1Context.Provider value={MigratableMockV1}>
                                                                                                                                                                                                                                                                                                                                                                            <MigratableMockV2Context.Provider value={MigratableMockV2}>
                                                                                                                                                                                                                                                                                                                                                                                <MigratableMockV3Context.Provider value={MigratableMockV3}>
                                                                                                                                                                                                                                                                                                                                                                                    <SafeMathMockContext.Provider value={SafeMathMock}>
                                                                                                                                                                                                                                                                                                                                                                                        <StorageSlotMockContext.Provider value={StorageSlotMock}>
                                                                                                                                                                                                                                                                                                                                                                                            <StringsMockContext.Provider value={StringsMock}>
                                                                                                                                                                                                                                                                                                                                                                                                <MathLogContext.Provider value={MathLog}>
                                                                                                                                                                                                                                                                                                                                                                                                    <ERC165InterfacesSupportedContext.Provider value={ERC165InterfacesSupported}>
                                                                                                                                                                                                                                                                                                                                                                                                        <SupportsInterfaceWithLookupMockContext.Provider value={SupportsInterfaceWithLookupMock}>
                                                                                                                                                                                                                                                                                                                                                                                                            <ERC165MissingDataContext.Provider value={ERC165MissingData}>
                                                                                                                                                                                                                                                                                                                                                                                                                <ERC1967ProxyContext.Provider value={ERC1967Proxy}>
                                                                                                                                                                                                                                                                                                                                                                                                                    <UUPSUpgradeableBrokenMockContext.Provider value={UUPSUpgradeableBrokenMock}>
                                                                                                                                                                                                                                                                                                                                                                                                                        <UUPSUpgradeableUnsafeMockContext.Provider value={UUPSUpgradeableUnsafeMock}>
                                                                                                                                                                                                                                                                                                                                                                                                                            <BeaconProxyContext.Provider value={BeaconProxy}>
                                                                                                                                                                                                                                                                                                                                                                                                                                <UpgradeableBeaconContext.Provider value={UpgradeableBeacon}>
                                                                                                                                                                                                                                                                                                                                                                                                                                    <ProxyAdminContext.Provider value={ProxyAdmin}>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <UUPSUpgradeableMockContext.Provider value={UUPSUpgradeableMock}>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <TransparentUpgradeableProxyContext.Provider value={TransparentUpgradeableProxy}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                <ERC1155Context.Provider value={ERC1155}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <ERC20Context.Provider value={ERC20}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                        <ERC721Context.Provider value={ERC721}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                            <ERC777Context.Provider value={ERC777}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                <EscrowContext.Provider value={Escrow}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <RefundEscrowContext.Provider value={RefundEscrow}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <ERC1820ImplementerContext.Provider value={ERC1820Implementer}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <ERC1155HolderContext.Provider value={ERC1155Holder}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <ERC1155PresetMinterPauserContext.Provider value={ERC1155PresetMinterPauser}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <ERC20PresetFixedSupplyContext.Provider value={ERC20PresetFixedSupply}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <TokenTimelockContext.Provider value={TokenTimelock}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <ERC20PresetMinterPauserContext.Provider value={ERC20PresetMinterPauser}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <ERC721HolderContext.Provider value={ERC721Holder}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <ERC721PresetMinterPauserAutoIdContext.Provider value={ERC721PresetMinterPauserAutoId}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <ERC777PresetFixedSupplyContext.Provider value={ERC777PresetFixedSupply}>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {showLoading && loading ?
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                props.loadingComponent
props.loadingComponent
div>
{messages.map((msg, i) => (
p key={i}>{msg}</p>
}
div>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                : props.children
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </ERC777PresetFixedSupplyContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    </ERC721PresetMinterPauserAutoIdContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </ERC721HolderContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            </ERC20PresetMinterPauserContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </TokenTimelockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    </ERC20PresetFixedSupplyContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </ERC1155PresetMinterPauserContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            </ERC1155HolderContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </ERC1820ImplementerContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    </RefundEscrowContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                                </EscrowContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                            </ERC777Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                        </ERC721Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                    </ERC20Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                                </ERC1155Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                            </TransparentUpgradeableProxyContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                        </UUPSUpgradeableMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                    </ProxyAdminContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                                </UpgradeableBeaconContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                            </BeaconProxyContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                        </UUPSUpgradeableUnsafeMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                    </UUPSUpgradeableBrokenMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                                </ERC1967ProxyContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                            </ERC165MissingDataContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                        </SupportsInterfaceWithLookupMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                    </ERC165InterfacesSupportedContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                                </MathLogContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                            </StringsMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                        </StorageSlotMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                    </SafeMathMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                                </MigratableMockV3Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                            </MigratableMockV2Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                        </MigratableMockV1Context.Provider >
                                                                                                                                                                                                                                                                                                                                                                    </SignedSafeMathMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                                </ERC20ReturnFalseMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                            </SafeERC20WrapperContext.Provider >
                                                                                                                                                                                                                                                                                                                                                        </ERC20ReturnTrueMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                    </ERC20NoReturnMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                                </SignatureCheckerMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                            </SafeCastMockContext.Provider >
                                                                                                                                                                                                                                                                                                                                        </Implementation4Context.Provider >
                                                                                                                                                                                                                                                                                                                                    </Implementation2Context.Provider >
                                                                                                                                                                                                                                                                                                                                </Implementation3Context.Provider >
                                                                                                                                                                                                                                                                                                                            </Implementation1Context.Provider >
                                                                                                                                                                                                                                                                                                                        </ReentrancyAttackContext.Provider >
                                                                                                                                                                                                                                                                                                                    </ReentrancyMockContext.Provider >
                                                                                                                                                                                                                                                                                                                </PausableMockContext.Provider >
                                                                                                                                                                                                                                                                                                            </SampleMotherContext.Provider >
                                                                                                                                                                                                                                                                                                        </OwnableMockContext.Provider >
                                                                                                                                                                                                                                                                                                    </PullPaymentMockContext.Provider >
                                                                                                                                                                                                                                                                                                </MulticallTokenMockContext.Provider >
                                                                                                                                                                                                                                                                                            </SampleHumanContext.Provider >
                                                                                                                                                                                                                                                                                        </SampleChildContext.Provider >
                                                                                                                                                                                                                                                                                    </SampleGrampsContext.Provider >
                                                                                                                                                                                                                                                                                </SampleFatherContext.Provider >
                                                                                                                                                                                                                                                                            </MulticallTestContext.Provider >
                                                                                                                                                                                                                                                                        </MerkleProofWrapperContext.Provider >
                                                                                                                                                                                                                                                                    </MathMockContext.Provider >
                                                                                                                                                                                                                                                                </EnumerableUintSetMockContext.Provider >
                                                                                                                                                                                                                                                            </EtherReceiverMockContext.Provider >
                                                                                                                                                                                                                                                        </InitializableMockContext.Provider >
                                                                                                                                                                                                                                                    </EnumerableMapMockContext.Provider >
                                                                                                                                                                                                                                                </ERC777MockContext.Provider >
                                                                                                                                                                                                                                            </ERC721URIStorageMockContext.Provider >
                                                                                                                                                                                                                                        </EnumerableBytes32SetMockContext.Provider >
                                                                                                                                                                                                                                    </EnumerableAddressSetMockContext.Provider >
                                                                                                                                                                                                                                </ERC777SenderRecipientMockContext.Provider >
                                                                                                                                                                                                                            </ERC721ReceiverMockContext.Provider >
                                                                                                                                                                                                                        </ERC721MockContext.Provider >
                                                                                                                                                                                                                    </ERC721BurnableMockContext.Provider >
                                                                                                                                                                                                                </ERC721PausableMockContext.Provider >
                                                                                                                                                                                                            </ERC721EnumerableMockContext.Provider >
                                                                                                                                                                                                        </ERC3156FlashBorrowerMockContext.Provider >
                                                                                                                                                                                                    </ERC20VotesMockContext.Provider >
                                                                                                                                                                                                </ERC2771ContextMockContext.Provider >
                                                                                                                                                                                            </ERC20PermitMockContext.Provider >
                                                                                                                                                                                        </ERC20PausableMockContext.Provider >
                                                                                                                                                                                    </ERC20SnapshotMockContext.Provider >
                                                                                                                                                                                </ERC20MockContext.Provider >
                                                                                                                                                                            </ERC20FlashMintMockContext.Provider >
                                                                                                                                                                        </ERC20DecimalsMockContext.Provider >
                                                                                                                                                                    </ERC20BurnableMockContext.Provider >
                                                                                                                                                                </ERC1820ImplementerMockContext.Provider >
                                                                                                                                                            </ERC20CappedMockContext.Provider >
                                                                                                                                                        </ERC165StorageMockContext.Provider >
                                                                                                                                                    </ERC165MockContext.Provider >
                                                                                                                                                </ERC1155SupplyMockContext.Provider >
                                                                                                                                            </ERC165CheckerMockContext.Provider >
                                                                                                                                        </ERC1271WalletMockContext.Provider >
                                                                                                                                    </ERC1155ReceiverMockContext.Provider >
                                                                                                                                </ERC1155PausableMockContext.Provider >
                                                                                                                            </ERC1155MockContext.Provider >
                                                                                                                        </ECDSAMockContext.Provider >
                                                                                                                    </EIP712ExternalContext.Provider >
                                                                                                                </DummyImplementationContext.Provider >
                                                                                                            </ERC1155BurnableMockContext.Provider >
                                                                                                        </Create2ImplContext.Provider >
                                                                                                    </DummyImplementationV2Context.Provider >
                                                                                                </ContextMockCallerContext.Provider >
                                                                                            </CountersImplContext.Provider >
                                                                                        </ContextMockContext.Provider >
                                                                                    </ClashingImplementationContext.Provider >
                                                                                </CallReceiverMockContext.Provider >
                                                                            </ConditionalEscrowMockContext.Provider >
                                                                        </ClonesMockContext.Provider >
                                                                    </BadBeaconNotContractContext.Provider >
                                                                </AddressImplContext.Provider >
                                                            </AccessControlEnumerableMockContext.Provider >
                                                        </ArraysImplContext.Provider >
                                                    </AccessControlMockContext.Provider >
                                                </MinimalForwarderContext.Provider >
                                            </PaymentSplitterContext.Provider >
                                        </TimelockControllerContext.Provider >
                                    </TestDAIContext.Provider >
                                </GameContext.Provider >
                            </ERC721MintableContext.Provider >
                        </DancerProxyContext.Provider >
                    </CurrentAddressContext.Provider>
                </SignerContext.Provider>
            </ProviderContext.Provider>
        </SymfoniContext.Provider>
    )

};
